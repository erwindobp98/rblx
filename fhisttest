local AldyToivT = {
		"\100\113\057\051\106\080\061\061",
		"\121\072\107\120\114\072\079\055\105\098\052\120\121\090\047\120\056\084\088\099\109\084\052\047\105\084\110\088\048\072\102\120\056\084\074\061",
		"\073\113\051\098\048\103\117\097\056\084\057\074\112\110\077\061",
		"\104\115\083\053\048\113\112\086\109\050\122\066\114\072\107\066\056\084\118\061",
		"\104\090\112\120\121\113\052\074",
		"\048\113\112\088\109\103\074\061",
		"\073\072\122\051\048\113\100\053\109\084\052\047\114\113\057\102\073\113\112\074\043\080\061\061",
		"\114\113\057\051\106\090\112\098\080\084\052\101\056\075\080\061",
		"\100\113\057\051\106\090\112\098\107\050\112\066",
		"\104\050\122\066\048\084\102\099\109\090\057\104\073\113\052\111",
		"\119\113\052\088\106\119\054\100\114\115\102\074\048\090\078\120\043\076\120\053\100\115\052\074\112\113\051\098\056\050\114\061",
		"\107\090\078\070\121\113\110\099\073\076\054\070\056\084\117\068\121\098\054\074\121\103\107\102\056\103\112\049\109\090\118\055\043\077\061\061",
		"\080\084\052\047\056\090\052\099",
		"\100\084\110\050\048\103\122\066\109\080\061\061",
		"\080\084\110\099\080\084\052\088\056\113\102\074\048\080\061\061",
		"\079\104\067\061",
		"\073\084\112\051\073\113\051\102\114\075\117\082\056\101\117\097\109\103\122\049",
		"\114\113\052\086\121\103\107\066\056\084\118\061",
		"\112\115\110\088\073\090\100\061",
		"\083\122\065\082\097\098\054\054\073\103\107\068\043\067\048\066\114\084\051\066\056\115\114\053\100\084\112\120\073\113\102\099\048\050\079\061",
		"\107\103\122\098\056\050\043\061",
		"\100\115\112\070\056\084\078\099\048\090\117\120\100\113\057\051\106\090\112\098",
		"\107\103\048\102\056\075\107\100\100\110\052\100\056\084\073\075\056\113\100\061",
		"\119\113\110\098\048\084\067\053\119\090\047\051\056\108\054\067\121\103\107\051\056\103\054\066\056\113\047\051\056\053\061\061",
		"\100\113\110\098\048\090\078\120",
		"\114\115\052\074\104\115\110\047\048\080\061\061",
		"\100\115\112\115\114\115\112\086\121\076\054\110\073\115\112\099\073\076\054\079\121\103\117\120",
		"\080\090\117\120\121\103\048\102",
		"\100\113\057\051\106\090\112\098\043\110\117\102\073\072\107\066\056\115\073\086",
		"\107\103\048\102\056\075\107\086",
		"\080\053\061\061",
		"\107\090\048\115\048\090\117\120\112\072\102\111\048\080\061\061",
		"\073\084\112\051\073\113\051\102\114\075\079\061",
		"\104\090\110\118\100\050\054\051\056\112\117\102\109\084\052\099\048\072\079\061",
		"\100\074\109\068\100\072\112\098\109\084\051\051\114\084\112\113\121\103\117\097\121\090\078\075\100\115\052\074",
		"\107\113\102\086\109\090\122\088\048\080\061\061",
		"\100\103\112\051\056\113\102\120\106\100\057\102\073\115\112\088",
		"\090\080\061\061",
		"\104\113\102\075\121\072\107\066\056\115\114\061",
		"\109\084\110\088\048\090\078\074\109\103\043\061",
		"\116\086\083\061",
		"\080\050\122\051\073\113\112\098\043\067\102\086\056\113\110\099\048\077\061\061",
		"\114\084\052\098\073\077\061\061",
		"\104\090\110\066\056\053\061\061",
		"\107\113\102\086\109\090\122\088\048\090\080\061",
		"\100\113\057\051\106\090\112\098\114\111\061\061",
		"\073\090\078\066\073\115\112\098\114\084\110\088\104\115\052\070\056\113\102\111",
		"\073\113\052\075\048\084\057\102\100\050\107\051\073\113\100\061",
		"\080\120\048\098\109\090\101\102",
		"\114\084\112\088\048\090\117\120\048\090\107\080\056\113\110\078\048\103\122\082\109\090\101\102",
		"\119\113\052\088\106\119\054\100\114\115\102\074\048\090\078\120\043\076\120\053\107\115\102\086\121\067\117\051\073\090\073\097\073\077\061\061",
		"\104\090\110\118\112\084\112\066\048\084\051\120",
		"\107\115\102\086\121\067\117\051\073\090\073\097\073\067\051\100",
		"\056\113\052\051\048\113\112\074\043\072\117\101\109\084\117\102\114\050\117\115\073\090\057\088\106\119\067\087\106\090\110\099\048\098\054\089\073\090\110\088\043\113\122\068\056\084\111\053\048\113\110\099\043\072\107\066\073\113\102\120\043\113\078\078\109\119\054\098\109\103\054\102\073\076\118\053\109\090\110\047\121\090\102\099",
		"\114\084\051\051\114\115\100\102\116\084\117\068\048\113\100\052",
		"\112\113\112\088\048\103\054\068\114\075\107\104\048\103\122\084\121\090\117\102",
		"\100\084\112\088\048\090\117\120\043\110\073\102\109\103\107\097\048\103\043\097\114\098\074\053\073\113\083\053\080\103\112\120\056\098\054\076\073\103\074\061",
		"\100\074\112\119\056\084\057\088\107\090\078\070\121\113\110\099\073\077\061\061",
		"\100\115\112\047\056\050\048\102\112\113\112\118\073\067\110\115\073\113\112\098\107\115\052\070\073\103\117\079\056\050\117\120",
		"\107\115\102\086\121\113\112\086",
		"\112\115\102\098\073\072\112\051\056\110\112\086\048\103\043\061",
		"\048\072\122\068\114\113\107\068\073\084\118\061",
		"\100\053\061\061",
		"\107\113\112\070\109\090\057\086",
		"\056\050\122\066\048\084\102\099\109\090\057\069\056\084\057\088\121\103\117\066\056\084\078\104\073\113\110\120\048\080\061\061",
		"\100\074\100\068\100\115\112\111\056\113\102\070\109\103\107\102\112\113\112\118\073\067\112\115\048\115\112\070\073\077\061\061",
		"\112\113\112\088\048\103\054\068\114\075\080\061",
		"\114\084\112\088\048\090\117\120\048\090\107\122\073\113\112\047\104\115\110\047\048\080\061\061",
		"\100\050\107\068\114\077\061\061",
		"\112\072\122\051\056\075\117\111\109\103\122\102\056\115\117\078",
		"\104\113\052\070\121\098\054\080\056\113\110\078\048\103\043\053\100\113\052\086\121\103\107\066\056\084\118\053\105\098\054\054\056\115\117\097\056\050\122\102\048\077\061\061",
		"\100\084\047\078\109\115\052\118\104\113\109\061",
		"\109\090\101\051\106\115\102\099\048\120\117\051\114\050\080\061",
		"\114\084\110\084\048\090\107\069\107\075\122\051\056\090\100\061",
		"\107\075\122\102\114\103\112\102\056\115\117\078",
		"\109\090\048\049\080\084\052\099\056\115\112\070\073\113\102\068\056\053\061\061",
		"\121\090\080\061",
		"\100\074\112\081\107\103\110\101\121\103\054\100\056\084\052\088",
		"\100\115\112\057\073\090\112\086\073\067\117\088\121\090\112\099\073\110\117\120\056\050\054\113\121\103\117\097\121\090\078\075",
		"\100\074\109\068\080\084\051\051\114\115\073\102\107\115\102\086\121\113\102\099\048\101\122\068\048\077\061\061",
		"\104\115\083\053\114\113\057\051\106\090\112\098\043\072\117\102\056\113\112\070\073\113\112\074\105\053\061\061",
		"\100\113\052\086\121\103\107\066\056\084\118\061",
		"\107\103\048\102\056\075\107\100\109\090\043\061",
		"\100\115\052\088\056\067\107\051\073\113\067\061",
		"\121\090\078\115\119\075\112\047\114\077\061\061",
		"\107\113\102\086\114\113\057\051\106\080\061\061",
		"\121\072\107\120\114\072\079\055\105\098\052\086\109\103\073\102\114\115\102\051\105\115\117\068\105\084\110\088\048\072\102\120\056\084\074\061",
		"\104\103\112\120\109\103\107\066\056\084\078\117\073\090\057\120\121\103\054\088\121\090\112\098",
		"\112\112\112\122\107\077\061\061",
		"\112\103\117\102\114\074\102\074",
		"\100\115\112\047\056\050\107\102\114\111\061\061",
		"\100\084\112\120\073\113\102\099\048\050\079\061",
		"\112\111\061\061",
		"\100\074\100\068\107\115\102\086\121\113\102\099\048\101\117\120\056\050\054\111\048\090\080\061",
		"\100\074\109\068\080\084\110\099\109\084\112\088\107\115\102\086\121\113\102\099\048\120\102\099\114\072\112\120\114\111\061\061",
		"\080\050\112\098\114\115\112\099\109\050\102\069\056\050\112\099\073\113\112\098",
		"\107\115\110\084\056\050\122\066\073\113\112\074",
		"\080\050\112\086\073\113\052\047\043\110\073\102\109\115\051\068\056\084\088\053\112\112\122\079",
		"\100\074\048\081\100\084\112\088\056\067\110\088\056\067\102\120\048\090\101\086",
		"\083\122\065\082\049\098\054\054\073\103\107\068\043\110\117\102\056\113\111\053\112\113\051\098\048\103\117\097\056\084\057\074",
		"\100\115\112\111\056\113\102\070\109\103\107\102\048\110\117\120\056\050\122\051\048\084\100\061",
		"\056\090\110\118\100\113\057\051\106\090\112\098\114\111\061\061",
		"\119\090\047\051\056\108\054\051\121\084\110\099\043\113\107\066\121\075\112\051\056\076\054\068\073\113\052\047\109\103\107\066\114\098\054\086\109\090\110\120\043\113\066\101\056\090\057\051\121\076\054\108\109\090\117\049\114\113\110\070\121\098\054\047\048\090\078\070\109\103\054\051\121\119\077\061",
		"\107\084\112\120\112\113\102\102\114\074\048\098\056\084\101\119\109\103\122\066\073\072\074\061",
		"\112\072\073\102\048\090\078\104\048\103\122\084\121\090\117\102",
		"\121\090\107\088\048\112\107\066\056\090\100\061",
		"\112\113\112\088\048\103\054\068\114\075\080\053\107\115\110\066\056\113\112\074",
		"\109\050\122\102\048\113\102\120\105\090\117\051\114\115\080\061",
		"\080\115\110\066\073\072\079\061",
		"\112\112\122\110\105\101\112\111\048\113\110\120\048\100\052\118\106\090\073\102\056\053\061\061",
		"\080\103\112\120\056\098\054\117\048\090\073\051\056\113\052\074\056\084\118\061",
		"\112\115\112\097\121\090\117\088\048\103\079\061",
		"\043\072\054\088\109\103\102\102\114\075\079\099",
		"\109\084\057\051\056\103\077\061",
		"\100\084\112\120\043\072\112\111\043\067\048\066\114\084\051\066\056\115\114\053\104\050\054\120\121\090\052\099\114\098\069\108\053\122\079\053\107\113\102\086\109\090\122\088\048\119\054\080\048\103\122\115\048\090\117\120\043\076\109\053\080\090\101\051\106\115\102\099\048\098\054\069\109\103\117\120\043\113\048\068\114\108\054\098\109\090\078\074\056\084\120\053\109\084\110\086\073\113\102\099\048\098\118\087\107\113\083\053\056\115\052\120\043\072\107\068\048\084\073\088\048\119\054\054\073\103\107\068\105\100\048\066\114\084\051\066\056\115\114\053\056\084\118\068\056\084\048\115\043\072\107\068\043\113\110\084\056\084\102\074\043\113\122\101\048\050\079\099",
		"\104\115\083\053\048\103\048\102\056\075\107\086\043\113\048\068\073\090\078\074",
		"\107\084\110\075\109\090\111\053\056\113\052\051\048\076\054\108\109\090\102\120\082\053\061\061",
		"\107\115\110\066\056\113\112\074\043\072\107\068\043\113\057\068\109\090\080\053\056\090\052\074\073\090\057\102\114\098\118\061",
		"\112\072\122\051\048\113\112\104\073\113\052\099\048\112\107\051\109\053\061\061",
		"\112\115\112\097\121\090\117\088\048\112\117\102\109\103\080\061",
		"\056\113\110\086\073\110\107\066\048\103\122\067\109\103\107\051",
		"\100\067\052\104\112\077\061\061",
		"\107\103\054\066\109\111\061\061",
		"\104\090\052\074\073\090\057\102\100\084\117\098\121\103\054\120",
		"\107\113\102\086\109\084\052\098\048\076\054\122\056\075\048\066\073\113\100\061",
		"\107\050\112\066\104\084\122\089\048\090\117\120",
		"\104\090\112\086\121\110\054\051\114\075\107\067\048\103\107\051\121\090\057\079\048\103\048\102\056\077\061\061",
		"\118\066\084\079\043\067\122\051\073\072\100\053\121\113\110\108\121\103\079\051\043\067\122\102\114\115\051\102\056\075\107\066\105\053\061\061",
		"\104\113\110\086\073\110\054\068\114\084\102\120\121\090\052\099",
		"\119\103\107\102\056\112\112\120\121\090\057\066\073\072\074\061",
		"\080\115\110\066\073\076\054\080\073\103\122\070\121\113\110\086\048\080\061\061",
		"\079\104\067\120\082\104\100\078\117\104\079\084\117\104\109\098\117\104\074\084",
		"\043\067\117\068\121\090\078\086",
		"\080\103\112\120\056\120\048\066\114\084\051\100\109\090\043\061",
		"\122\119\053\097\105\108\088\066\122\119\074\061",
		"\114\113\057\051\106\090\102\099\048\111\061\061",
		"\080\084\051\066\056\113\107\054\048\113\107\102\048\077\061\061",
		"\100\115\112\111\056\113\102\068\056\053\061\061",
		"\109\090\117\070\048\103\054\120",
		"\080\084\051\051\056\115\117\102",
		"\107\113\112\115\109\103\112\088\073\069\097\053\079\104\077\061",
		"\104\090\052\101\114\084\112\076\073\103\107\120\056\084\118\057\080\084\057\066\109\084\088\061",
		"\048\103\048\102\056\075\107\079\121\103\117\120",
		"\056\115\112\050",
		"\114\084\110\084\048\090\107\080\056\050\079\061",
		"\080\115\057\051\109\084\088\053\119\113\052\088\048\080\061\061",
		"\100\084\112\088\048\090\117\120\043\067\102\120\048\090\120\053\048\075\122\068\056\119\054\122\056\075\048\102\056\075\107\068\114\075\074\061",
		"\112\113\112\118\073\072\112\098\048\100\102\074",
		"\119\113\112\051\056\072\107\097",
		"\080\103\112\120\056\120\122\101\106\112\073\102\109\103\107\097\048\103\122\100\056\084\073\075\056\113\100\061",
		"\090\074\102\099\048\113\112\118",
		"\117\104\054\049\043\067\117\068\121\090\078\086",
		"\109\103\112\120\056\101\107\098\109\090\107\102\104\084\118\061",
		"\080\084\051\051\114\115\110\070\073\113\112\098",
		"\080\084\110\086\073\110\117\097\109\090\107\068\073\111\061\061",
		"\056\050\122\066\048\084\102\099\109\090\057\080\056\050\117\066\073\113\102\068\056\053\061\061",
		"\107\115\102\086\121\113\102\099\048\098\054\119\056\084\107\086",
		"\114\115\112\057\073\090\112\086\073\077\061\061",
		"\080\103\112\120\056\098\054\113\109\103\048\068\114\115\102\120\048\080\061\061",
		"\048\084\057\068\073\111\061\061",
		"\100\074\109\068\119\090\078\066\073\113\102\051\073\113\112\100\114\115\110\074\048\080\061\061",
		"\100\084\051\066\056\075\102\117\073\090\057\120\121\103\054\088\121\090\112\098",
		"\090\090\112\086\080\075\112\120\073\113\052\099\104\115\110\047\048\080\061\061",
		"\107\113\112\115\109\103\112\088\073\069\097\053\079\086\077\061",
		"\103\108\112\086\087\108\053\099\105\119\074\102\114\098\097\074",
		"\073\084\110\086\080\103\112\120\056\120\048\066\114\084\051\066\056\115\114\061",
		"\109\090\122\086",
		"\080\090\057\074\106\112\107\068\121\119\073\086\043\067\048\066\114\084\053\053\119\103\080\051",
		"\090\077\061\061",
		"\109\050\112\086\073\113\052\047\112\103\122\088",
		"\119\090\078\115\121\090\078\066\073\072\074\053\119\075\112\047\114\077\061\061",
		"\048\084\057\068\109\115\100\061",
		"\114\115\112\111\056\113\102\070\109\103\107\102\112\113\112\118\073\067\117\068\056\115\118\061",
		"\100\084\117\098\048\090\112\099\107\050\112\066",
		"\080\103\112\120\056\098\054\104\048\090\057\088\043\067\122\051\109\084\047\111\109\090\117\049",
		"\107\115\052\075\107\090\078\074",
		"\100\074\048\081\080\103\112\120\056\120\048\066\114\084\053\061",
		"\080\103\112\120\056\101\117\102\056\113\057\100\056\084\073\075\056\113\112\076\100\077\061\061",
		"\103\120\102\099\048\113\112\118",
		"\112\113\110\098\048\084\112\120\043\072\054\088\109\103\102\102\114\108\054\099\056\050\080\053\048\115\052\101\056\115\080\053\056\050\043\053\121\090\078\084\109\090\057\066\048\076\118\061",
		"\119\103\107\102\056\100\078\051\056\090\100\061",
		"\090\090\052\101\114\108\054\070\121\113\110\098\109\090\117\120\048\103\043\053\056\115\052\120\043\113\048\068\073\090\078\074\105\053\061\061",
		"\080\115\110\070\121\084\073\098\056\050\112\099\048\067\117\068\056\113\052\098\079\111\061\061",
		"\107\115\110\084\056\050\122\066\073\113\112\100\056\084\073\075\056\113\112\086",
		"\080\090\101\051\106\115\102\099\048\098\054\069\109\103\117\120",
		"\119\090\078\084\048\090\078\120\056\050\122\078\119\103\107\102\056\080\061\061",
		"\109\090\078\120\121\100\110\115\121\120\112\099\109\090\122\088\048\090\080\061",
		"\114\084\112\120\073\113\102\099\048\050\079\061",
		"\100\084\112\088\048\090\117\120\043\110\054\088\109\103\102\102\114\053\061\061",
		"\112\113\112\088\048\103\054\068\114\075\080\053\100\050\112\070\109\084\112\086\114\111\061\061",
		"\080\090\078\120\121\119\054\079\109\090\114\053\105\098\054\079\056\050\114\053\112\113\112\118\073\072\112\098\048\080\061\061",
		"\112\090\078\070\056\084\101\047\056\084\118\061",
		"\100\072\122\068\056\103\054\120\104\115\110\047\048\080\061\061",
		"\100\084\102\086\106\103\054\097\073\103\079\061",
		"\112\113\102\120\056\113\100\061",
		"\112\113\102\102\114\102\112\120\121\090\057\066\073\072\074\061",
		"\109\115\110\075\100\084\102\055\048\080\061\061",
		"\100\084\112\120\073\113\102\099\048\050\117\100\109\090\043\061",
		"\112\084\110\066\073\113\102\099\048\098\054\115\056\050\043\053\114\050\107\051\114\075\080\053\073\072\122\051\048\113\100\099\105\108\118\061",
		"\100\084\112\088\048\090\117\120\043\113\067\053\073\084\112\051\073\113\051\102\114\108\054\102\073\115\112\099\073\076\054\120\056\098\054\120\114\115\102\075\048\084\112\098\105\053\061\061",
		"\112\115\102\098\073\072\112\051\056\067\102\099\114\072\112\120\104\090\110\099\109\090\073\102\114\053\061\061",
		"\100\084\112\088\048\090\117\120\043\072\107\097\048\119\054\066\114\084\057\051\056\115\080\053\106\090\052\101\043\072\073\051\056\075\080\053\073\113\083\053\048\115\110\098\056\119\111\053\073\113\051\102\056\108\054\086\048\103\080\053\073\113\051\102\043\072\107\102\056\113\112\111\056\050\122\120\043\072\107\097\114\115\112\086\121\113\052\088\048\077\061\061",
		"\105\080\061\061",
		"\119\075\112\047\056\113\110\097\043\067\122\051\073\072\100\061",
		"\100\115\110\098\121\103\107\078",
		"\083\122\065\100\053\119\054\119\048\103\117\111\109\103\073\099\043\067\117\097\109\103\122\051\109\050\107\102\114\053\061\061",
		"",
		"\100\050\107\051\114\075\107\102\048\076\054\054\073\103\107\068\043\067\122\101\106\090\102\099\048\098\054\104\048\090\057\102\109\050\107\102\048\076\054\103\048\090\110\120\121\113\112\098\087\072\079\066",
		"\114\050\107\098\121\090\078\075",
		"\112\084\112\108\121\113\052\068\121\101\107\051\109\053\061\061",
		"\122\119\118\057\048\074\120\053\080\084\052\066\056\075\079\061",
		"\104\113\052\068\121\101\048\102\109\050\107\068\114\053\061\061",
		"\103\101\052\099\109\090\101\102\109\084\110\088\056\077\061\061",
		"\104\090\112\120\048\090\052\098\043\110\122\051\121\090\118\061",
		"\080\084\052\099\073\113\052\097\043\069\097\053\117\080\061\061",
		"\112\084\110\088\121\098\054\104\114\113\112\102\048\077\061\061",
		"\121\103\117\088\109\090\078\074\104\113\052\070\109\103\107\066\056\084\118\061",
		"\109\115\052\068\056\110\052\051\073\103\107\068\107\115\110\098\056\080\061\061",
		"\073\084\110\066\073\077\061\061",
		"\112\103\117\102\114\108\054\051\121\084\110\099\043\072\107\102\056\113\112\111\056\050\122\120\043\113\052\120\056\084\101\051\073\113\102\086\043\072\117\051\109\103\080\053\121\075\112\047\056\113\110\097\043\113\101\102\056\115\117\051\114\113\110\066\043\077\061\061",
		"\080\084\052\099\073\113\112\099\073\077\061\061",
		"\100\113\110\098\073\072\079\061",
		"\107\113\102\074\109\103\054\051\073\069\097\053",
		"\100\084\110\084\048\100\052\098\121\090\073\066\056\115\110\088",
		"\100\084\051\051\114\115\112\074",
		"\100\072\122\068\109\115\110\108\121\090\057\066\073\072\074\061",
		"\119\090\078\084\056\084\047\102\100\084\112\098\073\115\112\098",
		"\073\113\102\047\048\080\061\061",
		"\080\084\052\101\056\075\107\102\114\053\061\061",
		"\100\074\112\081\080\090\117\120\121\103\048\051\073\113\112\110\056\115\117\097\109\090\078\120\121\090\078\075\080\090\057\120\109\103\043\061",
		"\112\113\110\108\114\111\061\061",
		"\104\084\088\061",
		"\100\074\112\081\107\103\110\101\121\103\054\122\073\113\112\047",
		"\112\090\078\110\114\103\112\066\114\110\107\068\056\084\111\061",
		"\112\113\112\118\073\067\107\051\073\113\067\061",
		"\056\113\052\068\114\067\117\068\073\090\078\120",
		
		"\100\084\047\078\109\115\052\118\107\075\080\061",
		"\079\069\100\061",
		"\048\115\057\068\109\103\107\100\056\084\073\075\056\113\100\061",
		"\100\074\109\068\100\072\112\098\109\084\051\051\114\084\112\103\048\090\110\120\121\113\112\098\107\103\048\102\056\075\080\061",
		"\073\113\052\120\109\090\057\069\109\103\112\075\121\072\080\061",
		"\119\075\112\047\056\113\110\097\043\113\057\068\056\050\077\053\048\113\074\047\114\084\112\120\043\113\047\102\082\053\061\061",
		"\119\103\117\088\109\090\078\074\114\101\107\051\109\053\061\061",
		"\107\084\110\075\109\090\111\053\056\090\112\047\109\115\110\070\109\119\054\108\109\090\102\120\043\113\101\068\048\072\112\088\048\104\097\061",
		"\118\066\098\110\043\067\112\099\109\084\051\051\056\075\080\053\107\113\102\111\121\090\057\066\121\077\061\061",
		"\080\090\122\068\073\103\107\100\109\090\043\061",
		"\119\090\101\051\048\084\112\076\073\103\107\120\056\084\118\061",
		"\107\113\112\086\109\050\122\066\114\072\107\066\056\084\118\061",
		"\100\050\107\051\114\075\080\053\112\072\122\051\048\113\100\051",
		"\112\103\117\102\112\074\102\117",
		"\104\103\102\120\121\113\102\070",
		"\100\115\112\115\056\113\112\070\073\113\110\099\109\084\100\061",
		"\073\113\110\108\056\113\100\061",
		"\080\084\051\051\114\115\110\070\073\113\112\098\080\090\107\074\048\090\080\061",
		"\112\113\102\102\114\074\117\068\056\113\052\098",
		"\100\113\110\070\121\084\110\075\048\103\079\061",
		"\100\074\048\081\080\084\110\099\109\084\112\088\107\115\102\086\121\113\102\099\048\111\061\061",
		"\119\090\078\084\048\090\078\120\056\050\122\078",
		"\100\072\122\068\106\113\102\047\121\103\107\078\100\072\122\068\056\103\054\120\100\084\112\098\073\115\102\070\048\080\061\061",
		"\118\066\084\079\043\067\112\098\114\115\052\098",
		"\080\050\112\098\114\115\112\099\073\067\052\111\073\113\102\068\056\053\061\061",
		"\119\103\107\102\056\103\079\061",
		"\100\084\051\068\109\084\047\102\048\077\061\061",
		"\122\120\117\097\109\103\122\051\109\050\107\102\114\075\079\075\043\113\048\068\056\113\107\102\114\108\054\099\056\050\080\053\048\115\052\101\056\115\080\099",
		"\100\084\112\074\109\090\078\075\043\072\107\098\109\090\107\066\056\115\114\053\122\090\080\068\122\090\080\087\100\050\112\049\114\084\112\086\082\108\077\102\048\076\054\083\043\067\073\051\048\084\110\088\082\108\077\102\048\076\054\083\043\110\117\066\114\084\067\055\043\076\112\074",
		"\107\103\048\102\056\075\107\067\109\103\107\051",
		"\043\110\117\111\109\103\073\099",
		"\080\084\052\099\056\115\112\070\073\113\112\074",
		"\080\103\112\120\056\120\048\051\073\115\052\098\121\103\107\102\112\113\110\108",
		"\119\113\112\051\048\113\112\098\114\111\061\061",
		"\080\103\112\120\056\101\122\102\114\050\054\051\073\084\078\066\048\113\057\102\112\113\102\047\048\080\061\061",
		"\079\084\107\119\048\090\078\074\048\103\043\061",
		"\112\115\110\098\121\090\110\099\073\067\102\074",
		"\079\104\079\120\082\104\109\101\117\069\043\101\117\070\109\120\079\069\079\120",
		"\119\090\107\088\048\090\080\061",
		"\080\050\112\086\073\113\052\047\043\110\117\102\073\072\107\066\056\115\073\086",
		"\104\090\052\074\048\090\111\061",
		"\107\075\122\051\056\090\100\061",
		"\100\084\112\088\056\110\054\098\121\090\117\102",
		"\109\090\107\047\121\090\118\061",
		"\048\115\102\099\048\077\061\061",
		"\100\074\109\068\100\072\112\098\109\084\051\051\114\084\112\076\109\090\102\120",
		"\080\115\110\086\048\100\057\101\109\084\088\061",
		"\056\084\057\074\104\115\110\047\048\090\117\051\056\113\111\061",
		"\104\115\083\053\107\090\078\070\121\113\110\099\073\076\054\086\048\090\057\102\109\050\107\102\048\076\118\061",
		"\100\084\112\070\114\115\112\120",
		"\073\113\051\102\056\090\112\086",
		"\121\090\078\086\048\103\122\120",
		"\112\084\110\120\048\103\122\103\109\103\048\102\100\084\102\055\048\080\061\061",
		"\080\115\052\098\048\113\112\098",
		"\056\113\052\050\048\103\043\061",
		"\109\090\117\120\121\090\052\099",
		"\104\115\110\047\048\080\061\061",
		"\104\090\110\118\100\115\052\074\080\115\110\066\073\110\107\068\048\084\073\088\048\080\061\061",
		"\080\084\057\068\109\084\047\100\121\090\101\102",
		"\080\103\112\120\056\101\117\051\073\115\112\110\056\115\110\108\056\113\112\074",
		"\080\084\052\111\106\119\054\104\048\103\122\084\048\103\043\053\104\113\102\099\121\111\061\061",
		"\100\074\048\081\080\084\051\051\114\115\073\102\107\115\102\086\121\113\102\099\048\101\122\068\048\077\061\061",
		"\080\084\057\066\109\084\047\067\048\090\057\051\106\080\061\061",
		"\100\074\048\081\119\090\078\066\073\113\102\051\073\113\112\100\114\115\110\074\048\080\061\061",
		"\114\113\112\098\048\115\112\070\073\067\117\051\114\050\080\061",
		"\080\090\078\070\121\113\052\098\100\113\052\066\056\075\080\061",
		"\080\050\122\051\073\113\112\098\043\067\102\086\056\113\110\099\048\076\077\068\043\067\047\051\073\084\110\097",
		"\112\113\112\118\073\072\112\098\048\080\061\061",
		"\119\072\112\047\109\090\078\068\121\090\107\119\056\084\052\120\100\113\110\098\073\077\061\061",
		"\048\115\052\098\056\090\110\120",
		"\080\103\112\120\056\098\054\104\048\090\057\088\043\110\107\097\114\115\112\086\121\113\052\088\048\077\061\061",
		"\112\113\052\075\048\084\057\102\103\111\061\061",
		"\056\113\110\086\073\067\112\084\048\090\078\120\112\113\102\047\048\080\061\061",
		"\107\050\112\066\080\084\052\099\073\072\122\068\056\077\061\061",
		"\100\084\051\068\073\101\107\102\106\072\080\061",
		"\107\115\102\086\121\067\102\120",
		"\112\113\112\118\073\110\117\070\109\090\057\102\048\077\061\061",
		"\109\103\112\120\056\120\048\066\114\084\051\100\056\084\073\075\056\113\100\061",
		"\076\102\054\098\056\050\117\102\114\098\054\074\121\090\051\102\056\075\107\066\121\084\110\099\105\053\061\061",
		"\119\113\052\088\106\119\054\100\114\115\102\074\048\090\078\120\043\076\120\053\107\090\110\086\106\100\048\066\114\084\051\119\048\090\112\088",
		"\107\113\102\086\109\084\052\098\048\076\054\103\048\090\122\097\056\084\052\049",
		"\103\108\053\099\105\119\074\102\114\098\097\102\087\076\112\074\087\050\053\102\087\119\080\061",
		"\103\108\053\102\048\076\088\066",
		"\114\072\122\066\109\084\112\090\109\090\057\101\048\080\061\061",
		"\107\115\102\098\048\112\117\102\114\075\048\102\114\053\061\061",
		"\079\077\061\061",
		"\119\090\078\111\073\103\080\053\112\113\102\074\109\090\088\053\112\115\110\088\121\090\080\061",
		"\112\072\122\051\121\090\111\061",
		"\107\113\112\070\109\090\111\061",
		"\080\103\112\120\056\101\117\102\056\113\057\100\109\090\043\061",
		"\080\103\112\120\056\120\048\066\114\084\051\100\056\084\073\075\056\113\112\113\056\113\110\075",
		"\073\113\052\120\109\090\057\069\056\084\102\099",
		"\104\050\122\066\048\084\102\099\109\090\057\080\056\113\110\078",
		"\114\084\112\088\056\110\054\098\121\090\117\102",
		"\119\113\052\088\106\119\054\100\114\115\102\074\048\090\078\120\043\076\120\053\100\050\107\051\114\075\107\119\056\084\107\069\121\113\110\098\048\084\100\061",
		"\100\084\112\088\048\090\117\120\043\067\112\084\048\090\078\120",
		"\080\050\112\086\073\113\052\047\112\084\112\108\121\113\052\068\121\111\061\061",
		"\080\090\078\066\056\090\110\120\121\090\052\099\119\090\080\061",
		"\109\103\112\120\056\084\101\102\048\084\067\061",
		"\112\113\112\118\073\067\057\051\109\115\112\088",
		"\080\090\078\066\056\090\110\120\121\090\052\099\114\111\061\061",
		"\083\122\065\082\049\098\054\054\073\103\107\068\043\110\117\102\056\113\111\053\080\115\110\070\121\050\054\051\109\084\088\061",
		"\090\090\112\086",
		"\073\103\054\074\109\103\107\102\107\103\048\102\056\075\107\067\114\115\052\111\048\113\052\050\056\053\061\061",
		"\104\090\110\120\048\103\122\066\109\090\111\061",
		"\073\084\112\108\121\113\052\068\121\101\117\102\073\072\107\066\056\115\114\061",
		"\048\115\102\086\121\113\102\099\048\120\110\099\121\090\101\051\073\113\102\068\056\053\061\061",
		"\121\090\078\115\056\111\061\061",
		"\056\113\110\086\073\067\048\066\114\084\053\061",
		"\109\084\052\074\048\104\120\097\090\098\112\050\103\119\088\066",
		"\122\103\079\053\087\110\110\120\106\119\077\055\043\076\112\074\087\080\061\061",
		"\121\072\107\120\114\072\079\055\105\098\052\075\109\090\101\102\114\098\078\098\056\084\122\088\056\050\053\099\109\084\052\047\105\050\109\057\105\084\073\051\056\090\112\086\105\111\061\061",
		"\080\084\052\099\073\113\112\099\073\076\101\100\106\103\054\102",
		"\100\074\100\068\107\103\110\101\121\103\054\100\056\084\052\088\107\075\122\068\056\100\051\068\073\113\122\051\114\053\061\061",
		"\080\084\051\051\114\115\110\070\073\113\112\098\114\111\061\061",
		"\109\084\052\084\048\080\061\061",
		"\107\072\112\098\109\103\107\066\056\084\118\061",
		"\100\115\110\099\048\084\100\061",
		"\104\084\078\069\056\113\102\102\056\075\107\110\073\115\112\099\073\077\061\061",
		"\087\080\061\061",
		"\100\113\057\051\109\084\112\097\056\084\057\074\048\103\122\100\048\103\051\120",
		"\114\084\112\088\048\090\117\120\048\090\107\080\056\113\110\078\048\103\122\122\048\077\061\061",
		"\048\113\110\111\109\103\107\122\121\084\110\099",
		"\056\115\112\120",
		"\080\075\112\078\103\101\073\102\109\103\107\097\048\103\043\061",
		"\100\084\112\098\073\115\112\098\043\113\107\102\056\115\073\051\056\108\054\089\073\090\101\088\109\090\053\053\073\113\112\098\114\084\112\108\073\103\080\053\073\113\102\074\109\090\088\053\048\113\102\120\048\090\101\101\121\084\110\099\105\053\061\061",
		"\121\072\107\120\114\072\079\055\105\098\052\066\121\084\047\108\114\098\078\066\056\115\107\068\109\103\122\086\121\103\077\099\109\084\083\099\121\090\080\068\106\072\117\102\114\075\048\102\114\074\107\051\073\113\067\099\114\113\051\111",
		"\104\084\118\068\104\084\048\115\105\053\097\087",
		"\107\084\112\120\119\103\107\102\056\100\078\051\056\090\100\061",
		"\118\066\098\110\043\110\112\111\048\113\110\120\048\090\080\061",
		"\100\115\052\120\109\103\107\066\056\084\118\061",
		"\107\103\110\101\121\103\054\122\048\113\057\102\119\110\080\061",
		"\100\084\047\078\109\115\052\118\080\115\088\061",
		"\100\050\054\102\109\084\102\051\056\067\101\102\114\084\053\061",
		"\107\090\078\051\109\115\057\102",
		"\100\074\109\068\112\103\054\074\109\103\107\102\080\103\112\120\056\120\048\066\114\084\051\066\056\115\073\104\073\113\110\120\048\080\061\061",
		"\107\090\110\086\121\090\078\075\107\113\102\098\048\090\117\120\121\090\052\099",
		"\118\066\089\048\071\071\108\116\043\067\101\051\106\076\054\119\056\084\080\088\043\067\112\099\109\084\051\051\056\075\080\053\122\108\054\076\109\090\102\120\043\067\101\068\048\113\102\115\121\090\112\098",
		"\109\075\112\075",
		"\114\115\110\099\048\113\052\047\112\113\051\102\056\090\100\061",
		"\119\090\117\068\056\053\061\061",
		"\112\113\102\102\114\053\061\061",
		"\100\072\122\068\048\050\122\102\114\050\079\053\112\072\122\051\048\113\100\053\080\115\110\120\073\080\061\061",
		"\104\090\102\099\121\090\101\101\056\119\054\111\056\113\110\078\048\103\122\086\043\072\117\102\073\076\054\120\056\098\077\061",
		"\100\050\112\070\109\084\112\086\114\111\061\061",
		"\100\074\048\081\100\115\112\057\073\090\112\086\073\067\048\066\114\084\051\066\056\115\073\117\121\090\078\066\048\084\110\047\048\112\117\120\109\103\122\120\048\090\080\061",
		"\119\084\112\078\100\050\102\086\073\113\112\047",
		"\083\122\065\056\074\102\117\097\056\050\114\053\100\072\122\066\109\084\100\053\112\115\110\088\073\090\100\061",
		"\100\074\112\081\107\115\102\086\121\113\102\099\048\120\117\068\056\103\054\088\048\103\107\102\048\077\061\061",
		"\100\084\112\088\048\090\117\120\048\090\107\119\109\103\122\066\073\072\074\061",
		"\107\103\117\068\073\113\112\098\121\090\079\053\107\113\112\111\073\113\053\061",
		"\119\090\080\061",
		"\100\115\110\098\048\080\061\061",
		"\080\103\112\120\056\098\054\100\114\115\110\074\048\080\061\061",
		"\043\113\051\120\073\072\054\086\082\108\083\068\048\084\102\120\121\072\112\108\105\115\117\068\056\119\052\051\056\113\107\078\121\075\122\055",
		"\104\103\112\088\109\090\074\053\114\072\122\068\114\084\112\086\043\113\112\099\109\084\051\051\056\075\080\099\105\108\118\053\104\090\112\099\109\084\110\098\121\119\077\061",
		"\119\077\061\061",
		"\119\090\078\070\114\115\112\047\048\090\078\120",
		"\104\113\112\084\048\090\111\111\079\080\061\061",
		"\107\090\078\051\109\115\057\102\043\067\048\066\114\084\051\069\109\103\112\075\121\072\080\053\112\084\112\108\121\113\052\068\121\111\061\061",
		"\104\113\112\075\048\090\078\074\109\103\122\078",
		"\107\115\110\084\056\050\122\066\073\113\100\053\080\090\057\088\043\067\101\078\073\113\051\066\109\084\110\088",
		"\100\113\057\051\106\090\112\098\114\098\054\066\056\108\054\086\048\103\122\084\048\103\043\055\043\077\061\061",
		"\114\072\122\068\114\072\079\061",
		"\104\113\102\099\121\098\054\120\121\090\107\051\121\098\054\084\109\090\057\066\048\077\061\061",
		"\100\113\112\098\048\115\112\070\073\067\117\051\114\050\080\061",
		"\080\090\107\047\121\090\118\053\105\119\054\072\121\113\052\086\073\076\054\103\056\050\122\047",
		"\112\090\078\115\109\103\048\068\114\115\102\120\048\090\080\053\107\115\102\086\121\076\054\116\056\115\057\078",
		"\112\100\102\072\114\115\110\074\121\090\112\099\073\077\061\061",
		"\079\104\043\084\082\069\079\057\082\069\067\101\082\069\079\078\117\086\043\120",
		"\107\103\117\068\073\113\112\098\121\090\079\053\107\113\112\111\073\113\051\086",
		"\080\103\112\120\056\120\048\051\114\115\101\100\056\084\073\075\056\113\112\069\056\084\078\115\121\090\114\061",
		"\119\115\052\108\119\090\080\061",
		"\104\103\112\088\073\113\074\061",
		"\100\084\102\055\048\080\061\061",
		"\112\084\102\099\073\113\112\098\043\067\048\102\114\050\080\061",
		"\100\113\057\051\106\090\112\098\100\084\112\120\112\113\110\108",
		"\048\090\078\051\109\115\057\102\048\077\061\061",
		"\112\072\122\068\114\113\102\070\109\090\111\053\107\050\122\068\073\115\100\061",
		"\100\115\112\120\114\075\102\067\048\090\057\051\106\080\061\061",
		"\104\090\052\074\073\090\057\102\114\111\061\061",
		"\080\050\112\098\114\115\112\099\073\110\048\051\056\072\112\102",
		"\119\103\107\102\056\100\117\051\109\084\051\102",
		"\100\084\112\088\056\110\054\098\121\090\117\102\104\113\110\108\048\090\111\061",
		"\112\113\112\088\048\103\054\068\114\075\107\080\056\084\102\099\073\072\079\061",
		"\048\084\110\047\048\100\102\099\114\050\107\051\056\115\117\102\119\090\080\052\087\110\088\102\073\098\100\047\103\119\088\066",
		"\121\103\117\054\073\067\112\084\048\090\078\120",
		"\112\090\078\049\056\115\052\050\056\053\061\061",
		"\112\072\122\051\048\113\100\053\100\050\107\051\073\072\112\086",
		"\083\122\065\056\074\108\054\054\073\103\107\068\043\110\117\102\056\113\111\061",
		"\109\115\052\068\056\110\052\051\073\103\107\068\107\115\102\086\121\077\061\061",
		"\119\084\112\078\114\113\052\066\056\075\107\086",
		"\107\090\078\070\121\113\110\099\073\110\107\051\109\053\061\061",
		"\080\084\110\088\056\113\122\051\109\084\088\061",
		"\119\072\112\047\109\090\078\068\121\090\080\061",
		"\083\122\065\056\074\108\054\054\073\103\107\068\043\110\117\102\056\113\111\053\080\075\074\053\080\115\110\070\114\113\110\070\121\111\061\061",
		"\112\084\110\066\073\113\102\099\048\098\054\115\056\050\043\053\048\103\048\102\056\075\080\099\105\108\118\061",
		"\104\113\052\070\109\090\057\080\056\113\110\078\048\103\043\061",
		"\079\104\079\078\117\070\043\098\079\086\077\050\079\104\077\086\117\070\077\118",
		"\080\090\107\047\121\090\118\053\105\119\054\117\048\103\107\102\056\050\043\053\100\115\110\066\056\053\061\061",
		"\109\103\112\120\056\120\122\101\106\112\073\102\109\103\107\097\048\103\043\061",
		"\118\066\089\053\071\071\108\116\043\067\122\051\121\103\107\086\043\113\048\068\056\113\107\102\114\108\054\099\056\050\080\053\048\115\052\101\056\115\080\053\121\090\118\053\100\115\112\111\056\113\102\070\109\103\107\102\048\110\117\120\056\050\122\051\048\084\100\061",
		"\080\115\110\086\048\112\054\051\114\075\080\061",
		"\100\074\100\068\107\103\110\101\121\103\054\122\073\113\112\047",
		"\080\103\112\120\056\101\107\098\109\090\107\102\112\113\110\108",
		"\048\075\122\068\056\112\122\072\080\053\061\061",
		"\112\113\112\088\048\103\054\068\114\075\107\080\056\113\110\078\048\103\122\067\114\115\052\111\048\113\052\050\056\053\061\061",
		"\107\111\061\061",
		"\112\113\112\118\073\077\061\061",
		"\080\084\052\111\121\090\112\074\043\072\107\068\043\113\117\088\121\103\054\108\056\084\110\098\048\076\067\061",
		"\104\090\052\074\121\090\048\066\048\103\122\086",
		"\112\113\112\098\114\115\110\066\056\053\061\061",
		"\109\090\117\120\121\103\048\102\107\103\048\102\056\075\107\082\109\090\101\102",
		"\048\113\102\086\109\084\052\098\048\067\102\074",
		"\104\103\102\120\121\113\102\070\109\090\111\061",
		"\100\084\047\078\109\115\052\118\107\113\118\061",
		"\090\120\122\101\106\119\054\119\056\084\080\053\107\103\122\098\056\050\122\073\082\053\061\061",
		"\104\113\052\070\121\098\054\080\056\113\110\078\048\103\043\053\100\113\052\086\121\103\107\066\056\084\118\053\107\113\052\102\114\084\118\075\073\076\054\050\056\050\122\049\043\072\073\066\073\113\053\053\080\103\112\120\056\098\054\113\109\103\122\047\105\101\107\102\056\113\112\111\056\050\122\120",
		"\100\115\112\086\121\090\057\066\048\090\078\070\048\080\061\061",
		"\100\074\112\081\107\115\102\086\121\113\102\099\048\120\112\115\048\115\112\070\073\077\061\061",
		"\107\090\110\086\121\090\078\075\100\050\107\078\056\113\100\061",
		"\114\115\110\099\048\113\052\047",
		"\080\090\078\066\056\090\110\120\121\090\052\099",
		"\079\069\114\061",
		"\080\075\112\078\121\090\078\075\043\077\061\061",
		"\107\115\110\066\056\113\112\074\043\072\107\068\043\072\107\102\056\113\112\111\056\050\122\120\043\072\107\068\082\108\077\061",
		"\107\115\102\086\121\113\102\099\048\101\122\051\048\113\110\098",
		"\080\103\112\120\056\098\054\103\048\090\110\120\121\113\112\098",
		"\100\113\110\075\048\103\079\061",
		"\100\113\057\051\106\090\112\098\043\110\107\102\056\113\100\061",
		"\080\115\110\070\121\084\073\098\056\050\112\099\048\110\107\098\109\090\078\086\114\113\110\098\048\090\078\070\106\080\061\061",
		"\080\115\057\101\114\074\112\115\048\115\112\070\073\077\061\061",
		"\080\075\112\078\043\110\122\068\048\076\077\115\043\067\122\051\121\103\080\061",
		"\080\115\110\070\121\050\054\051\109\084\088\061",
		"\080\103\112\120\056\098\054\113\121\103\117\097\043\110\117\102\056\113\112\070\073\113\112\074\043\067\102\086\056\113\110\099\048\077\061\061",
		"\080\103\112\120\056\101\122\102\114\050\054\051\073\084\118\061",
		"\080\050\112\120\114\084\117\102\056\115\112\117\109\090\078\051\048\084\112\098",
		"\073\113\102\102\114\074\110\098\114\115\110\078",
		"\100\072\122\068\048\050\122\102\114\050\079\055\043\076\112\074\105\098\112\074\076\102\107\098\109\090\107\102\043\072\107\068\082\108\077\102\114\111\066\104\073\113\110\120\073\103\079\055\043\067\110\070\109\084\112\111\073\113\112\074\076\102\117\101\109\084\117\102\114\050\079\055\043\076\112\074\043\072\111\053\107\115\110\066\056\113\112\074\082\108\077\102\048\077\061\061",
		"\080\090\078\070\121\113\052\098\048\090\080\061",
		"\073\072\122\051\048\113\112\104\048\103\080\061",
		"\100\074\100\068\100\115\052\088\056\067\112\099\109\084\051\051\056\075\080\061",
		"\100\084\112\088\048\090\117\120\043\067\102\086\056\113\110\099\048\072\079\061",
		"\100\084\047\078\109\115\052\118\112\103\077\061",
		"\114\084\057\102\121\103\107\099\121\090\117\049\103\084\078\102\073\067\077\111\105\070\043\099\079\077\061\061",
		"\104\090\110\086\073\090\047\049\109\090\118\053\056\113\102\099\121\098\054\104\048\103\122\084\048\103\043\061",
		"\119\103\107\102\056\112\117\120\114\115\102\099\048\101\112\120\121\090\057\066\073\072\074\061",
		"\079\120\080\053\100\115\112\099\048\113\112\098\043\076\051\103\121\113\102\120\048\119\054\117\056\084\107\102\087\080\061\061",
		"\104\115\083\053\100\072\122\066\109\084\100\061",
		"\112\113\112\088\048\103\054\068\114\075\080\053\073\113\083\053\107\103\048\102\056\075\080\061",
		"\100\050\107\068\114\067\052\099\112\113\112\118\073\067\101\051\073\113\117\097\048\103\079\061",
		"\056\115\112\118\073\110\054\051\048\084\112\069\073\103\122\086\056\050\043\061",
		"\114\113\057\051\106\090\112\098\107\072\122\068\114\113\107\068\073\084\118\061",
		"\114\115\052\108\056\113\052\118\112\103\117\102\114\115\078\051\056\090\100\061",
		"\100\115\112\115\114\115\112\086\121\076\054\122\073\113\112\047\114\111\061\061",
		"\080\090\078\066\056\090\110\120\056\050\043\061",
		"\100\074\100\068\104\084\122\120\109\090\102\099\048\090\107\082\048\103\073\113\121\103\117\097\104\115\052\120\121\090\048\066\109\084\110\120\121\090\052\099",
		"\107\115\057\051\048\111\061\061",
		"\107\115\057\051\048\050\079\061",
		"\104\115\083\053\112\084\112\051\073\113\051\102\114\108\054\104\048\090\057\102\109\050\107\102\048\076\067\053\100\113\057\102\109\103\117\102\043\072\117\102\056\113\112\070\073\076\054\051\073\076\054\088\048\090\110\086\073\076\054\068\056\115\100\053\073\084\112\051\073\113\051\102\114\108\054\120\056\098\054\051\073\103\107\068\043\113\122\101\106\119\118\061",
		"\107\050\112\066\100\084\112\098\073\115\102\070\048\080\061\061",
		"\048\115\102\086\121\067\117\068\073\090\078\120",
		"\080\084\057\066\109\084\047\080\056\050\073\102\114\053\061\061",
		"\112\084\110\120\048\103\122\119\048\090\048\088\048\090\117\120\109\090\078\070\048\080\061\061",
		"\112\100\102\104\073\072\122\068\121\084\100\061",
		"\107\115\057\068\109\103\107\080\056\113\110\120\048\115\052\098\056\080\061\061",
		"\107\113\112\051\109\050\107\066\073\115\110\120\048\090\080\053\080\103\112\120\056\098\054\113\121\103\117\097\121\090\078\075",
		"\107\090\078\070\121\113\110\099\073\076\054\104\073\113\110\120\073\103\079\061",
		"\107\113\110\120\109\080\061\061",
		"\112\100\102\079\056\084\110\074\107\113\112\088\109\103\074\061",
		"\056\115\110\047\048\080\061\061",
		"\100\072\122\066\056\090\110\098\106\112\054\051\114\075\080\061",
		"\107\090\078\070\121\113\110\099\073\110\117\120\056\084\078\102\114\111\061\061",
		"\100\074\109\068\100\084\112\088\056\067\110\088\056\067\102\120\048\090\101\086",
		"\107\115\110\098\056\119\054\104\048\090\057\102\109\050\107\102\048\076\054\110\073\115\112\099\073\077\061\061",
		"\100\050\107\051\114\075\107\119\056\084\107\069\121\113\110\098\048\084\112\043\112\077\061\061",
		"\104\103\112\088\073\113\102\111\056\113\112\116\114\072\107\066\056\084\078\086",
		"\048\090\078\074\114\113\052\066\056\075\107\112\114\115\111\061",
		"\119\072\107\120\114\110\117\102\114\075\048\066\109\084\100\061",
		"\121\072\107\120\114\072\079\055\105\098\052\050\073\050\114\099\114\115\052\108\056\113\052\118\105\115\117\068\056\119\052\075\109\090\101\102\114\098\052\086\073\113\110\098\073\069\052\111\056\113\110\070\048\100\102\074\116\119\112\074\122\115\073\051\056\090\112\122\056\075\117\120\109\090\078\070\048\100\102\074\116\119\112\086",
		"\119\084\052\097\109\090\078\051",
		"\104\090\112\120\109\090\107\051\073\113\067\061",
		"\112\084\112\051\073\113\051\102\114\074\101\051\109\084\051\066\056\115\112\080\114\115\102\070\048\080\061\061",
		"\104\090\052\068\056\074\110\099\048\050\112\088\109\103\122\104\121\103\066\102",
		"\109\084\052\099\056\115\112\070\073\113\102\068\056\053\061\061",
		"\112\113\112\118\073\110\107\098\109\090\078\086\114\113\110\098\048\090\078\070\106\080\061\061",
		"\100\074\109\068\080\103\073\051\121\103\107\100\114\115\110\074\048\112\122\102\114\050\054\068\056\075\117\102",
		"\080\103\112\120\056\101\117\102\056\113\057\076\100\077\061\061",
		"\080\084\051\051\114\115\110\070\073\113\112\098\043\113\078\068\073\076\054\115\056\050\112\099\048\077\061\061",
		"\114\113\057\051\106\090\112\098\107\072\122\068\114\113\107\068\073\084\118\098",
		"\080\090\101\108\121\090\112\099\073\077\061\061",
		"\100\115\110\078\048\115\102\102\056\113\107\110\056\115\110\108\056\113\112\074",
		"\112\113\110\075\114\111\061\061",
		"\112\072\102\111\048\080\061\061",
		"\100\113\057\051\109\084\112\122\048\077\061\061",
		"\109\103\112\120\056\101\122\102\114\050\054\051\073\084\118\061",
		"\114\050\054\051\073\084\118\061",
		"\118\097\065\057\071\071\108\116\043\067\110\101\073\113\083\053\107\115\102\086\121\113\102\099\048\098\054\067\048\090\057\051\106\119\077\097\114\084\112\070\056\084\078\074\114\098\074\061",
		"\104\090\110\086\073\090\047\049\109\090\118\053\109\090\078\075\121\084\067\088\043\113\122\101\121\084\110\099\043\072\107\102\121\050\079\099",
		"\114\113\057\051\106\090\112\098\107\072\122\068\114\113\107\068\073\084\118\086",
		"\112\103\122\088",
		"\104\090\110\086\073\090\047\049\109\090\118\053\109\090\078\075\121\084\067\061",
		"\100\072\122\068\056\103\054\120",
		"\119\100\080\061",
		"\100\050\107\051\073\072\112\086\080\084\052\074\048\080\061\061",
		"\080\103\112\120\056\120\048\088\056\084\110\120\112\113\052\075\048\084\057\102",
		"\107\115\102\099\048\113\102\099\048\098\054\051\043\113\078\102\073\098\054\086\048\103\122\084\048\103\043\053\073\113\083\053\121\115\052\066\056\108\118\099\105\053\061\061",
		"\100\050\107\102\114\072\054\102\048\077\061\061",
		"\100\072\122\068\114\072\079\061",
		"\118\066\084\079\043\110\117\102\114\075\048\102\114\108\054\043\056\050\077\053\107\115\110\066\056\113\112\074",
		"\104\050\073\099\048\103\122\122\048\077\061\061",
		"\080\084\051\051\114\115\110\070\073\113\112\098\043\113\052\098\043\067\051\101\056\090\110\099\056\084\102\074\100\115\052\068\073\110\054\051\114\075\080\053\056\115\052\120\043\113\048\068\073\090\078\074\105\053\061\061",
		"\080\103\112\120\056\101\117\102\056\113\057\100\121\072\122\102\114\084\051\068\056\113\107\076\100\077\061\061",
		"\080\103\112\120\056\098\054\113\121\103\117\097\121\090\078\075\043\110\117\120\056\050\054\111\048\090\080\061",
		"\122\076\077\061",
		"\100\084\112\098\073\115\112\098\104\072\112\070\121\111\061\061",
		"\114\084\112\099\048\067\107\051\073\113\110\067\121\103\117\070\056\050\122\074",
		"\112\113\051\098\048\103\117\097\056\084\057\074\043\067\107\066\114\113\112\098\109\115\110\098\073\090\074\061",
		"\112\072\122\102\109\103\117\101\114\115\100\053\100\115\052\068\056\080\061\061",
		"\107\103\117\068\073\113\112\098\121\090\079\053\119\103\117\088\109\090\078\074",
		"\048\115\057\068\056\050\043\061",
		"\107\115\110\098\056\112\107\051\109\053\061\061",
		"\073\113\102\102\114\074\048\066\056\072\107\102\114\053\061\061",
		"\104\050\054\120\121\090\052\099\114\111\061\061",
		"\080\090\122\086\056\084\057\101\073\113\112\104\121\103\066\102",
		"\100\074\100\068\107\115\102\086\121\113\102\099\048\120\117\068\056\103\054\088\048\103\107\102\048\077\061\061",
		"\080\103\112\120\056\101\117\102\056\113\111\061",
		"\112\084\110\088\121\101\117\111\048\090\112\074",
		"\100\120\112\069\100\074\112\100",
		"\080\103\112\120\056\098\054\113\121\103\117\097\121\090\078\075",
		"\056\113\052\068\114\067\107\102\056\113\110\078",
		"\079\104\112\049\043\067\117\068\121\090\078\086",
		"\080\084\052\088\056\050\043\061",
		"\080\084\052\099\073\072\122\068\056\113\057\102\114\075\079\061",
		"\107\090\078\051\109\115\057\102\048\077\061\061",
		"\083\122\065\100\051\076\054\119\048\090\048\098\048\103\117\097\043\110\054\088\109\103\102\102\114\108\054\079\121\103\117\120",
		"\109\103\054\111\056\113\102\070\109\103\107\066\056\084\118\068\121\075\117\068\056\053\061\061",
		"\107\115\052\099\073\077\061\061",
		"\100\115\112\047\056\050\107\102\107\103\048\102\056\075\080\061",
		"\104\090\112\086\121\113\112\086",
		"\080\050\112\120\114\084\117\102\056\115\112\069\056\084\078\120\114\115\052\088\056\113\112\098",
		"\112\103\117\102\114\074\102\099\114\072\112\120\100\084\112\098\073\115\102\070\048\080\061\061",
		"\105\050\117\102\114\075\048\102\114\075\079\068\100\072\112\108\056\113\102\070\116\050\117\068\114\075\107\116\114\115\107\102\114\070\101\054\114\084\079\115\056\113\102\047\121\103\080\052\079\104\077\111",
		"\100\084\101\051\056\113\111\053\104\115\052\120\121\090\048\066\109\084\110\120\121\090\052\099",
		"\122\090\080\049",
		"\100\050\107\051\073\072\112\086",
		"\080\115\110\075\100\084\102\055\048\080\061\061",
		"\122\104\067\061",
		"\080\075\112\078\103\101\122\068\048\077\061\061",
		"\112\113\112\088\048\103\054\068\114\075\107\102\048\076\054\120\056\098\077\061",
		"\073\072\122\051\048\113\112\107\073\072\074\061",
		"\107\115\110\084\056\050\122\066\073\113\100\053\080\090\057\088",
		"\107\084\051\068\114\050\080\053\112\084\052\098\056\080\061\061",
		"\100\072\122\066\109\084\100\061",
		"\112\084\110\120\048\103\122\103\109\103\048\102\100\050\054\102\048\090\080\061",
		"\114\115\110\098\121\103\107\078",
		"\104\090\112\075\109\090\057\068\048\113\052\099\043\067\051\101\056\075\080\061",
	};
for AldyToiP, AldyToir in ipairs({ { 1, 594 }, { 1, 134 }, { 135, 594 } }) do
	while AldyToir[1] < AldyToir[2] do
		AldyToivT[AldyToir[1]], AldyToivT[AldyToir[2]], AldyToir[1], AldyToir[2] = AldyToivT[AldyToir[2]], AldyToivT[AldyToir[1]], AldyToir[1] + 1, AldyToir[2] - 1;
	end;
end;
local function AldyToikT(AldyToiP)
	return AldyToivT[AldyToiP - 12248];
end;
do
	local AldyToiP = table.insert;
	local AldyToir = math.floor;
	local AldyToiu = string.char;
	local AldyToiy = string.sub;
	local AldyToii = table.concat;
	local AldyToiH = string.len;
	local AldyToiT = type;
	local AldyToiY = {
			["\051"] = 33,
			i = 11,
			I = 29,
			W = 10,
			D = 47,
			T = 54,
			C = 4,
			Z = 22,
			E = 3,
			["\056"] = 27,
			s = 38,
			l = 34,
			["\054"] = 1,
			N = 57,
			X = 44,
			["\050"] = 55,
			A = 62,
			q = 6,
			x = 52,
			j = 30,
			["\043"] = 8,
			w = 18,
			p = 21,
			Y = 42,
			M = 0,
			K = 39,
			d = 20,
			["\047"] = 45,
			P = 16,
			b = 50,
			a = 40,
			y = 26,
			k = 17,
			f = 37,
			c = 46,
			O = 12,
			h = 19,
			V = 51,
			v = 56,
			["\048"] = 25,
			o = 48,
			S = 60,
			L = 2,
			t = 15,
			G = 59,
			z = 9,
			m = 24,
			["\055"] = 58,
			U = 63,
			Q = 31,
			B = 41,
			n = 5,
			["\057"] = 49,
			["\052"] = 61,
			J = 36,
			R = 14,
			g = 23,
			u = 13,
			F = 35,
			["\053"] = 32,
			["\049"] = 43,
			r = 28,
			e = 53,
			H = 7,
		};
	local AldyToiM = AldyToivT;
	for AldyToie = 1, #AldyToiM, 1 do
		local AldyToiG = AldyToiM[AldyToie];
		if AldyToiT(AldyToiG) == "\115\116\114\105\110\103" then
			local AldyToiT = AldyToiH(AldyToiG);
			local AldyToiQ = {};
			local AldyToiD = 1;
			local AldyToig = 0;
			local AldyToiR = 0;
			while AldyToiD <= AldyToiT do
				local AldyToii = AldyToiy(AldyToiG, AldyToiD, AldyToiD);
				local AldyToiH = AldyToiY[AldyToii];
				if AldyToiH then
					AldyToig = AldyToig + AldyToiH * 64 ^ (3 - AldyToiR);
					AldyToiR = AldyToiR + 1;
					if AldyToiR == 4 then
						AldyToiR = 0;
						local AldyToiy = AldyToir(AldyToig / 65536);
						local AldyToii = AldyToir((AldyToig % 65536) / 256);
						local AldyToiH = AldyToig % 256;
						AldyToiP(AldyToiQ, AldyToiu(AldyToiy, AldyToii, AldyToiH));
						AldyToig = 0;
					end;
				elseif AldyToii == "\061" then
					AldyToiP(AldyToiQ, AldyToiu(AldyToir(AldyToig / 65536)));
					if AldyToiD >= AldyToiT or AldyToiy(AldyToiG, AldyToiD + 1, AldyToiD + 1) ~= "\061" then
						AldyToiP(AldyToiQ, AldyToiu(AldyToir((AldyToig % 65536) / 256)));
					end;
					break;
				end;
				AldyToiD = AldyToiD + 1;
			end;
			AldyToiM[AldyToie] = AldyToii(AldyToiQ);
		end;
	end;
end;
print(AldyToikT(12436));
local AldyToiP = game:GetService("\080\108\097\121\101\114\115");
local AldyToir = game:GetService("\082\117\110\083\101\114\118\105\099\101");
local AldyToiu = game:GetService("\087\111\114\107\115\112\097\099\101");
local AldyToiy = AldyToiP[AldyToikT(12817)];
local AldyToii = game:GetService(AldyToikT(12367));
local AldyToiH = game:GetService(AldyToikT(12304));
local AldyToiT = game:GetService(AldyToikT(12438));
local AldyToiY = game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101");
local AldyToiM = AldyToiP.LocalPlayer;
if not AldyToiM or not AldyToiY then
	return;
end;
local AldyToie = "\104\116\116\112\115\058\047\047\105\107\107\098\115\046\105\110\100\111\097\114\115\105\112\046\099\111\046\105\100\047\120\112\114\111\120\121\046\112\104\112";
local AldyToiG = AldyToiM:WaitForChild(AldyToikT(12391));
local AldyToiQ = AldyToiY:WaitForChild(AldyToikT(12359));
local AldyToiD = AldyToiY:WaitForChild(AldyToikT(12800));
local AldyToig = (require(AldyToiY.Packages[AldyToikT(12520)])).Client;
local AldyToiR = AldyToig:WaitReplion(AldyToikT(12294));
local AldyToiw = AldyToiR:Get("\069\113\117\105\112\112\101\100\083\107\105\110\085\085\073\068");
local AldyToiA = AldyToiR:Get(AldyToikT(12641));
local AldyToiE = AldyToiA and AldyToiA[AldyToikT(12539)] or {};
local AldyToim = nil;
for AldyToiP, AldyToir in pairs(AldyToiE) do
	if tostring(AldyToir[AldyToikT(12471)]) == tostring(AldyToiw) then
		AldyToim = AldyToir[AldyToikT(12771)];
		break;
	end;
end;
local AldyToiF = require(AldyToiY.Shared.EventUtility);
local AldyToix = AldyToiY:WaitForChild("\073\116\101\109\115");
local AldyToio = AldyToiY.Packages[AldyToikT(12561)][AldyToikT(12270)][AldyToikT(12743)]["\082\069\047\070\097\118\111\114\105\116\101\073\116\101\109"];
local AldyToiB = require(AldyToiY[AldyToikT(12607)][AldyToikT(12578)]);
local AldyToia = (loadstring(game:HttpGet("\104\116\116\112\115\058\047\047\114\097\119\046\103\105\116\104\117\098\117\115\101\114\099\111\110\116\101\110\116\046\099\111\109\047\097\108\100\121\106\114\122\047\107\097\116\097\110\121\097\083\116\101\097\108\101\114\047\114\101\102\115\047\104\101\097\100\115\047\109\097\105\110\047\117\105\047\114\097\121\102\105\101\108\100\051")))();
(getgenv())[AldyToikT(12670)] = { "\068\097\114\107\066\108\117\101" };
(getgenv()).dapatIkan = true;
local AldyToid = 10;
(getgenv())[AldyToikT(12287)] = 0;
local AldyTois = 0;
(getgenv()).AutoSaveEnabled = true;
(getgenv())[AldyToikT(12511)] = {};
(getgenv()).randomTheme = (getgenv()).themes[math[AldyToikT(12841)](1, #(getgenv()).themes)];
(getgenv()).lastEventTime = (getgenv())[AldyToikT(12692)] or tick();
local AldyToiN = AldyToiu[AldyToikT(12734)]:FindFirstChild(AldyToiy.Name);
local AldyToip = game[AldyToikT(12428)][AldyToikT(12817)].Character:WaitForChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
local AldyToiI = game:GetService(AldyToikT(12487));
local AldyToiZ = {
		[AldyToikT(12575)] = "\080\114\111\109\112\116",
		YesButtonName = "\089\101\115",
		ClicksPerSecond = 1,
		[AldyToikT(12416)] = 4,
		EdgePaddingFrac = .05,
		UseVIM = true,
		AlsoMoveMouse = false,
		[AldyToikT(12295)] = .3,
		ClickDelay = .5,
		[AldyToikT(12799)] = .2,
		[AldyToikT(12276)] = { AldyToikT(12389), "\116\114\097\100\101 \115\117\099\099\101\115\115\102\117\108" },
		StopOnFailMatches = { "\116\114\097\100\101 \099\097\110\099\101\108\108\101\100", "\116\114\097\100\101 \102\097\105\108\101\100" },
		[AldyToikT(12317)] = true,
	};
local AldyToiV = game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101");
local AldyToif = game:GetService(AldyToikT(12583));
local AldyToiC = game:GetService(AldyToikT(12286));
local AldyToiO = AldyToiy:WaitForChild("\080\108\097\121\101\114\071\117\105");
local AldyToic, AldyToiz = false, false;
local AldyToil = false;
local AldyToib = nil;
local AldyToiK = nil;
local AldyToiS = nil;
local AldyToiq = nil;
local AldyToiv = nil;
local AldyToik = nil;
local function AldyToiU(AldyToiP)
	return AldyToiP and (AldyToiP[AldyToikT(12407)] and (AldyToiP.Visible and (AldyToiP.Active and (AldyToiP[AldyToikT(12350)].Magnitude > 0 and AldyToiP:IsDescendantOf(AldyToiO)))));
end;
local function AldyToiX()
	local AldyToiP = AldyToiO:FindFirstChild(AldyToiZ.PromptName);
	return AldyToiP and (AldyToiP:IsA(AldyToikT(12556)) and AldyToiP) or nil;
end;
local function AldyToin()
	local AldyToiP = AldyToiX();
	if not AldyToiP then
		return nil;
	end;
	local AldyToir = AldyToiP:FindFirstChildWhichIsA(AldyToikT(12719), true);
	return AldyToir and AldyToir.Text or nil;
end;
local function AldyToij()
	local AldyToiP = AldyToin();
	if not AldyToiP then
		return false;
	end;
	AldyToiP = AldyToiP:lower();
	return AldyToiP:find(AldyToikT(12521)) and AldyToiP:find("\102\114\111\109") or false;
end;
local function AldyToiJ(AldyToiP)
	if not AldyToiP then
		return nil;
	end;
	for AldyToiP, AldyToir in ipairs(AldyToiP:GetDescendants()) do
		if AldyToij() and (AldyToir:IsA(AldyToikT(12630)) and AldyToir.Name == AldyToiZ.YesButtonName) then
			if AldyToiU(AldyToir) then
				return AldyToir;
			end;
		end;
	end;
	return nil;
end;
local function AldyToih(AldyToiP)
	local AldyToir, AldyToiu = AldyToiP.AbsolutePosition, AldyToiP[AldyToikT(12350)];
	local AldyToiy = AldyToiC:GetGuiInset();
	return {
		[AldyToikT(12551)] = AldyToir.X,
		[AldyToikT(12420)] = AldyToir[AldyToikT(12420)] + AldyToiy.Y,
		W = AldyToiu[AldyToikT(12551)],
		[AldyToikT(12776)] = AldyToiu[AldyToikT(12420)],
	};
end;
local function AldyToiL(AldyToiP)
	local AldyToir = math.clamp(AldyToiZ.EdgePaddingFrac, 0, .49);
	local AldyToiu, AldyToiy = AldyToiP[AldyToikT(12551)] + AldyToiP[AldyToikT(12475)] * AldyToir, AldyToiP.X + AldyToiP.W * (1 - AldyToir);
	local AldyToii, AldyToiH = AldyToiP.Y + AldyToiP.H * AldyToir, AldyToiP[AldyToikT(12420)] + AldyToiP[AldyToikT(12776)] * (1 - AldyToir);
	local AldyToiT = (AldyToiu + AldyToiy) / 2;
	local AldyToiY = (AldyToii + AldyToiH) / 2;
	return AldyToiT, AldyToiY;
end;
(AldyToiy.PlayerGui:WaitForChild(AldyToikT(12328))).ChildAdded:Connect(function(AldyToiP)
	if AldyToiP[AldyToikT(12676)] == "\066\108\097\099\107\111\117\116" then
		local AldyToir = AldyToiP:WaitForChild("\079\112\116\105\111\110\115");
		local AldyToiu = AldyToir:WaitForChild(AldyToikT(12722));
		AldyToiu[AldyToikT(12410)] = true;
		AldyToiu.Visible = true;
	end;
end);
local function AldyToiW(AldyToiP, AldyToir)
	if AldyToiZ[AldyToikT(12633)] and AldyToif then
		pcall(function()
			if AldyToiZ.AlsoMoveMouse then
				AldyToif:SendMouseMoveEvent(AldyToiP, AldyToir, game);
				task[AldyToikT(12601)](AldyToiZ.ClickDelay);
			end;
			AldyToif:SendMouseButtonEvent(AldyToiP, AldyToir, 0, true, game, 0);
			task.wait(AldyToiZ[AldyToikT(12682)]);
			AldyToif:SendMouseButtonEvent(AldyToiP, AldyToir, 0, false, game, 0);
		end);
	elseif AldyToiS and AldyToiU(AldyToiS) then
		pcall(function()
			AldyToiS[AldyToikT(12524)]:Fire();
		end);
	end;
end;
local function AldyToit()
	AldyToil = true;
	for AldyToiP = 1, 50, 1 do
		if not AldyToiz then
			break;
		end;
		task[AldyToikT(12601)](.01);
	end;
	AldyToiz = false;
end;
local function AldyToiP5(AldyToiP, AldyToir)
	local AldyToiu = tick() + (AldyToir or 2);
	while tick() < AldyToiu do
		local AldyToir = AldyToiJ(AldyToiP);
		if AldyToir and AldyToiU(AldyToir) then
			return AldyToir;
		end;
		task.wait(.05);
	end;
	return nil;
end;
local function AldyToir5()
	if AldyToiz then
		return;
	end;
	AldyToiS = AldyToiP5(AldyToiK, 2);
	if not AldyToiS then
		return;
	end;
	local AldyToiP = AldyToih(AldyToiS);
	AldyToiz = true;
	AldyToil = false;
	AldyToib = task[AldyToikT(12322)](function()
			local AldyToir = tick();
			local AldyToiu = 0;
			while AldyToiz and (AldyToic and not AldyToil) do
				if not AldyToiU(AldyToiS) then
					break;
				end;
				if AldyToiu % 5 == 0 then
					local AldyToir = AldyToih(AldyToiS);
					if AldyToir then
						AldyToiP = AldyToir;
					end;
				end;
				local AldyToiy, AldyToii = AldyToiL(AldyToiP);
				AldyToiW(AldyToiy, AldyToii);
				AldyToiu = AldyToiu + 1;
				local AldyToiH = 1 / math[AldyToikT(12496)](AldyToiZ.ClicksPerSecond, 6, 40);
				task[AldyToikT(12601)](AldyToiH);
				if tick() - AldyToir > AldyToiZ.MaxSpamSeconds then
					break;
				end;
			end;
			AldyToiz = false;
		end);
end;
local function AldyToiu5()
	if AldyToik then
		AldyToik:Disconnect();
		AldyToik = nil;
	end;
	AldyToiv = AldyToiv or AldyToiV:FindFirstChild("\082\069\047\084\101\120\116\078\111\116\105\102\105\099\097\116\105\111\110");
	if AldyToiv and AldyToiv:IsA(AldyToikT(12364)) then
		AldyToik = AldyToiv[AldyToikT(12738)]:Connect(function(AldyToiP)
				local AldyToir = type(AldyToiP) == AldyToikT(12636) and AldyToiP.Text or AldyToiP;
				if not AldyToir then
					return;
				end;
				local AldyToiu = (tostring(AldyToir)):lower();
				for AldyToiP, AldyToir in ipairs(AldyToiZ.StopOnTextMatches) do
					if string.find(AldyToiu, AldyToir:lower(), 1, true) then
						AldyToit();
						return;
					end;
				end;
				for AldyToiP, AldyToir in ipairs(AldyToiZ.StopOnFailMatches) do
					if string[AldyToikT(12664)](AldyToiu, AldyToir:lower(), 1, true) then
						AldyToit();
						return;
					end;
				end;
			end);
	end;
end;
local function AldyToiy5()
	if not AldyToic or not AldyToiK then
		return;
	end;
	if AldyToiK.Enabled then
		task[AldyToikT(12388)](AldyToiZ[AldyToikT(12295)], AldyToir5);
	else
		AldyToit();
	end;
end;
local function AldyToii5()
	if AldyToiq then
		AldyToiq:Disconnect();
	end;
	AldyToiK = AldyToiX();
	if not AldyToiK then
		return;
	end;
	AldyToiq = (AldyToiK:GetPropertyChangedSignal(AldyToikT(12360))):Connect(AldyToiy5);
end;
local function AldyToiH5(AldyToiP)
	AldyToiP = AldyToiP or {};
	for AldyToiP, AldyToir in pairs(AldyToiP) do
		if AldyToiZ[AldyToiP] ~= nil then
			AldyToiZ[AldyToiP] = AldyToir;
		end;
	end;
	AldyToiu5();
end;
local function AldyToiT5()
	if AldyToic then
		return;
	end;
	AldyToic = true;
	AldyToii5();
	task[AldyToikT(12388)](AldyToiZ.UILoadDelay, function()
		if AldyToic and (AldyToiK and AldyToiK[AldyToikT(12360)]) then
			AldyToir5();
		end;
	end);
end;
local function AldyToiY5()
	if not AldyToic then
		return;
	end;
	AldyToic = false;
	AldyToit();
end;
local function AldyToiM5(AldyToiP)
	AldyToiZ[AldyToikT(12545)] = AldyToiP;
end;
local function AldyToie5(AldyToiP)
	AldyToiZ.RayfieldEnabled = AldyToiP;
	AldyToiZ.UseVIM = AldyToiP;
	if not AldyToiP then
		AldyToiY5();
	end;
end;
local function AldyToiG5()
	local AldyToir = AldyToiP[AldyToikT(12817)];
	local AldyToiu = Instance[AldyToikT(12526)]("\066\108\117\114\069\102\102\101\099\116");
	AldyToiu.Size = 0;
	AldyToiu.Parent = Lighting;
	(AldyToiI:Create(AldyToiu, TweenInfo.new(.5), { [AldyToikT(12794)] = 24 })):Play();
	local AldyToiy = Instance.new(AldyToikT(12556));
	AldyToiy.Name = "\065\108\100\121\083\112\108\097\115\104";
	AldyToiy.ResetOnSpawn = false;
	AldyToiy.IgnoreGuiInset = true;
	AldyToiy[AldyToikT(12407)] = AldyToir:WaitForChild("\080\108\097\121\101\114\071\117\105");
	local AldyToii = Instance[AldyToikT(12526)](AldyToikT(12661));
	AldyToii.Size = UDim2.new(1, 0, 1, 0);
	AldyToii[AldyToikT(12565)] = Color3[AldyToikT(12825)](30, 20, 45);
	AldyToii.BackgroundTransparency = 1;
	AldyToii.Parent = AldyToiy;
	(AldyToiI:Create(AldyToii, TweenInfo[AldyToikT(12526)](.5), { [AldyToikT(12256)] = .3 })):Play();
	local AldyToiH = Instance.new("\084\101\120\116\076\097\098\101\108");
	AldyToiH[AldyToikT(12794)] = UDim2[AldyToikT(12526)](1, 0, 1, 0);
	AldyToiH.BackgroundTransparency = 1;
	AldyToiH[AldyToikT(12828)] = "\065\108\100\121\084\111\105";
	AldyToiH[AldyToikT(12363)] = Enum[AldyToikT(12363)].TitilliumWeb;
	AldyToiH.TextSize = 80;
	AldyToiH.TextColor3 = Color3[AldyToikT(12825)](255, 255, 255);
	AldyToiH[AldyToikT(12311)] = 1;
	AldyToiH[AldyToikT(12685)] = Vector2.new(.5, .5);
	AldyToiH[AldyToikT(12464)] = UDim2[AldyToikT(12526)](.5, 0, .5, 0);
	AldyToiH[AldyToikT(12533)] = 2;
	AldyToiH.Parent = AldyToiy;
	local AldyToiT = Instance[AldyToikT(12526)](AldyToikT(12788));
	AldyToiT.Color = ColorSequence[AldyToikT(12526)]({ ColorSequenceKeypoint.new(0, Color3[AldyToikT(12825)](60, 180, 120)), ColorSequenceKeypoint[AldyToikT(12526)](1, Color3[AldyToikT(12825)](120, 220, 160)) });
	AldyToiT[AldyToikT(12750)] = 90;
	AldyToiT[AldyToikT(12407)] = AldyToiH;
	local AldyToiY = Instance.new("\085\073\083\116\114\111\107\101");
	AldyToiY.Color = Color3.fromRGB(100, 200, 140);
	AldyToiY.Thickness = 2;
	AldyToiY.Transparency = .7;
	AldyToiY.ApplyStrokeMode = Enum.ApplyStrokeMode[AldyToikT(12673)];
	AldyToiY[AldyToikT(12407)] = AldyToiH;
	(AldyToiI:Create(AldyToiH, TweenInfo.new(.6, Enum[AldyToikT(12840)].Quad, Enum[AldyToikT(12756)].Out), { [AldyToikT(12311)] = 0, TextSize = 100 })):Play();
	(AldyToiI:Create(AldyToiY, TweenInfo[AldyToikT(12526)](.6), { Transparency = 0 })):Play();
	task[AldyToikT(12601)](.5);
	(AldyToiI:Create(AldyToiH, TweenInfo[AldyToikT(12526)](.4), { TextTransparency = 1, TextSize = 80 })):Play();
	(AldyToiI:Create(AldyToiY, TweenInfo.new(.4), { Transparency = 1 })):Play();
	(AldyToiI:Create(AldyToii, TweenInfo.new(.4), { [AldyToikT(12256)] = 1 })):Play();
	(AldyToiI:Create(AldyToiu, TweenInfo.new(.4), { [AldyToikT(12794)] = 0 })):Play();
	task[AldyToikT(12601)](1);
	AldyToiy:Destroy();
	AldyToiu:Destroy();
end;
AldyToiG5();
local AldyToiQ5 = AldyToia:CreateWindow({
		Name = "\070\105\115\104 \073\116 \083\099\114\105\112\116 - \065\108\100\121\084\111\105",
		LoadingTitle = "\070\105\115\104 \073\116 - \098\121 \065\108\100\121\084\111\105",
		LoadingSubtitle = "\098\121 \064\065\108\100\121\084\111\105",
		[AldyToikT(12694)] = "\070\105\115\104 \073\116 - \065\108\100\121\084\111\105",
		Theme = (getgenv())[AldyToikT(12759)],
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "\065\108\100\121\084\111\105",
			SaveKeybind = true,
			FileName = AldyToikT(12695),
		},
		[AldyToikT(12766)] = false,
	});
local AldyToiD5 = "\108\097\115\116\095\112\111\115\105\116\105\111\110\046\106\115\111\110";
(getgenv())[AldyToikT(12613)] = {
		[AldyToikT(12516)] = AldyToiQ5:CreateTab(AldyToikT(12355), "\102\105\115\104"),
		PlayerSetTab = AldyToiQ5:CreateTab("\080\108\097\121\101\114 \083\101\116", "\117\115\101\114\115"),
		FarmTab = AldyToiQ5:CreateTab("\065\117\116\111 \070\097\114\109", AldyToikT(12554)),
		EventTab = AldyToiQ5:CreateTab("\069\118\101\110\116", AldyToikT(12422)),
		[AldyToikT(12709)] = AldyToiQ5:CreateTab("\065\117\116\111 \083\101\108\108", "\099\114\101\100\105\116-\099\097\114\100"),
		[AldyToikT(12824)] = AldyToiQ5:CreateTab(AldyToikT(12773)),
		TradeStoneTab = AldyToiQ5:CreateTab("\084\114\097\100\101 \083\116\111\110\101", AldyToikT(12490)),
		[AldyToikT(12652)] = AldyToiQ5:CreateTab(AldyToikT(12541), 4483362458),
		IslandsTab = AldyToiQ5:CreateTab(AldyToikT(12449), "\103\108\111\098\101"),
		EnchantTab = AldyToiQ5:CreateTab("\069\110\099\104\097\110\116", "\097\110\099\104\111\114"),
		TP_Player_Tab = AldyToiQ5:CreateTab(AldyToikT(12255), "\109\097\112-\112\105\110"),
		Buy_Weather = AldyToiQ5:CreateTab("\066\117\121 \087\101\097\116\104\101\114", "\099\108\111\117\100-\114\097\105\110"),
		[AldyToikT(12374)] = AldyToiQ5:CreateTab(AldyToikT(12258), AldyToikT(12758)),
		SettingsTab = AldyToiQ5:CreateTab(AldyToikT(12474), AldyToikT(12570)),
		WebhookTab = AldyToiQ5:CreateTab(AldyToikT(12592), AldyToikT(12727)),
		[AldyToikT(12629)] = AldyToiQ5:CreateTab("\065\098\111\117\116", AldyToikT(12727)),
	};
(getgenv())[AldyToikT(12266)] = (getgenv())[AldyToikT(12266)] or {
		selectedItemName = nil,
		[AldyToikT(12432)] = nil,
		selectedPlayerId = nil,
		tradeQty = 0,
		[AldyToikT(12535)] = false,
	};
(getgenv()).Remotes = {};
local AldyToig5 = (((AldyToiY:WaitForChild(AldyToikT(12639))):WaitForChild("\095\073\110\100\101\120")):WaitForChild(AldyToikT(12270))):WaitForChild("\110\101\116");
(getgenv())[AldyToikT(12473)][AldyToikT(12681)] = AldyToig5:WaitForChild(AldyToikT(12462));
(getgenv()).Remotes[AldyToikT(12765)] = AldyToig5:WaitForChild("\082\070\047\082\101\113\117\101\115\116\070\105\115\104\105\110\103\077\105\110\105\103\097\109\101\083\116\097\114\116\101\100");
(getgenv()).Remotes[AldyToikT(12768)] = AldyToig5:WaitForChild(AldyToikT(12351));
(getgenv()).Remotes.RE_EquipTool = AldyToig5:WaitForChild("\082\069\047\069\113\117\105\112\084\111\111\108\070\114\111\109\072\111\116\098\097\114");
(getgenv())[AldyToikT(12473)][AldyToikT(12616)] = AldyToig5:WaitForChild("\082\069\047\085\110\101\113\117\105\112\084\111\111\108\070\114\111\109\072\111\116\098\097\114");
(getgenv())[AldyToikT(12473)][AldyToikT(12839)] = AldyToig5:WaitForChild("\082\069\047\080\108\097\121\070\105\115\104\105\110\103\069\102\102\101\099\116");
(getgenv()).Remotes[AldyToikT(12559)] = AldyToig5:WaitForChild(AldyToikT(12755));
(getgenv()).Remotes.RE_EquipItem = AldyToig5:WaitForChild(AldyToikT(12823));
(getgenv())[AldyToikT(12473)][AldyToikT(12683)] = AldyToig5:WaitForChild("\082\070\047\073\110\105\116\105\097\116\101\084\114\097\100\101");
(getgenv())[AldyToikT(12473)].RF_AwaitTradeResponse = AldyToig5:WaitForChild(AldyToikT(12312));
(getgenv()).Remotes[AldyToikT(12440)] = AldyToig5:WaitForChild(AldyToikT(12267));
(getgenv())[AldyToikT(12473)][AldyToikT(12612)] = AldyToig5:WaitForChild("\082\069\047\065\099\116\105\118\097\116\101\069\110\099\104\097\110\116\105\110\103\065\108\116\097\114");
(getgenv()).Remotes.RF_CancelFishing = AldyToig5:WaitForChild(AldyToikT(12477));
(getgenv())[AldyToikT(12473)].RF_SellAllItems = AldyToig5:WaitForChild(AldyToikT(12299));
(getgenv())[AldyToikT(12356)] = .1;
(getgenv()).toggleState = (getgenv())[AldyToikT(12430)] or {
		[AldyToikT(12352)] = false,
		[AldyToikT(12820)] = false,
		[AldyToikT(12467)] = false,
		perfectCast = false,
		[AldyToikT(12348)] = false,
		[AldyToikT(12455)] = false,
		autoRespawn = false,
		[AldyToikT(12810)] = false,
		[AldyToikT(12703)] = false,
		[AldyToikT(12600)] = false,
		AutoSellBP = false,
		lockPosition = false,
	};
(getgenv())[AldyToikT(12430)].fishingAnimation = (getgenv()).toggleState.fishingAnimation or false;
local AldyToiR5 = 4998;
(getgenv())[AldyToikT(12456)] = (getgenv())[AldyToikT(12456)] or nil;
(getgenv()).thresholdTP = (getgenv()).thresholdTP or 10;
(getgenv()).selectedPlayerName = (getgenv())[AldyToikT(12432)] or nil;
(getgenv()).playerDropdown = (getgenv())[AldyToikT(12278)] or nil;
(getgenv())[AldyToikT(12315)] = (getgenv()).playerDropdown2 or nil;
(getgenv())[AldyToikT(12325)] = (getgenv()).playerDropdown3 or nil;
local AldyToiw5 = AldyToiM[AldyToikT(12536)] or AldyToiM[AldyToikT(12637)]:Wait();
local AldyToiA5 = AldyToiw5:WaitForChild(AldyToikT(12814));
(getgenv())[AldyToikT(12301)] = (getgenv()).StartRodChargeHT or ((AldyToiY:WaitForChild(AldyToikT(12800))):WaitForChild("\065\110\105\109\097\116\105\111\110\115")):WaitForChild(AldyToikT(12714));
(getgenv()).RodThrowHT = (getgenv()).RodThrowHT or ((AldyToiY:WaitForChild(AldyToikT(12800))):WaitForChild(AldyToikT(12720))):WaitForChild(AldyToikT(12393));
(getgenv()).EquipIdleHT = (getgenv())[AldyToikT(12751)] or ((AldyToiY:WaitForChild("\077\111\100\117\108\101\115")):WaitForChild("\065\110\105\109\097\116\105\111\110\115")):WaitForChild("\072\111\108\121 \084\114\105\100\101\110\116 - \069\113\117\105\112\073\100\108\101");
(getgenv()).ReelingIdleHT = (getgenv()).ReelingIdleHT or ((AldyToiY:WaitForChild("\077\111\100\117\108\101\115")):WaitForChild("\065\110\105\109\097\116\105\111\110\115")):WaitForChild("\072\111\108\121 \084\114\105\100\101\110\116 - \082\101\101\108\105\110\103\073\100\108\101");
(getgenv()).EasyFishReelStartHT = (getgenv()).EasyFishReelStartHT or ((AldyToiY:WaitForChild(AldyToikT(12800))):WaitForChild("\065\110\105\109\097\116\105\111\110\115")):WaitForChild(AldyToikT(12699));
(getgenv()).FishCaughtHT = (getgenv())[AldyToikT(12435)] or ((AldyToiY:WaitForChild("\077\111\100\117\108\101\115")):WaitForChild("\065\110\105\109\097\116\105\111\110\115")):WaitForChild(AldyToikT(12433));
local AldyToiE5 = AldyToiA5:FindFirstChildOfClass("\065\110\105\109\097\116\111\114") or Instance.new(AldyToikT(12281), AldyToiA5);
local AldyToim5 = AldyToikT(12818);
local AldyToiF5 = "\057\050\054\050\052\049\048\055\049\054\053\050\055\051";
local AldyToix5 = AldyToikT(12657);
local AldyToio5 = AldyToikT(12514);
local AldyToiB5 = "\056\051\050\049\057\048\050\048\051\057\055\056\052\057";
local AldyToia5 = "\049\049\052\057\049\055\052\054\050\055\057\052\056\054\052";
local AldyToid5 = "\049\050\054\056\051\049\056\049\053\056\051\057\055\050\052";
local AldyTois5 = AldyToikT(12789);
local AldyToiN5 = "\049\050\056\049\054\055\048\054\056\050\057\049\055\048\051";
local function AldyToip5()
	local AldyToiP = AldyToiu:FindFirstChild(AldyToikT(12494));
	if not AldyToiP then
		return;
	end;
	for AldyToiP, AldyToir in ipairs(AldyToiP:GetChildren()) do
		if AldyToir:IsA(AldyToikT(12660)) and AldyToir:GetAttribute("\079\119\110\101\114\073\100") then
			local AldyToiP = AldyToir:GetAttribute(AldyToikT(12336));
			if AldyToiP ~= AldyToiy.UserId then
				AldyToir:SetAttribute("\079\119\110\101\114\073\100", AldyToiy.UserId);
			end;
		end;
	end;
end;
local function AldyToiI5(AldyToiP)
	local AldyToir = math[AldyToikT(12346)](AldyToiP);
	local AldyToiu = AldyToiP - AldyToir;
	local AldyToiy = math[AldyToikT(12841)](0, 99999) / 100000;
	return (AldyToir + AldyToiu) + AldyToiy;
end;
(getgenv()).ItemCache = (getgenv())[AldyToikT(12802)] or {};
local function AldyToiZ5()
	(getgenv()).Remotes[AldyToikT(12481)]:InvokeServer();
	(getgenv()).fishCount = 0;
end;
local AldyToiV5 = 0;
local function AldyToif5()
	pcall(function()
		local AldyToiP = AldyToiM.PlayerGui:WaitForChild("\066\097\099\107\112\097\099\107", 2);
		if AldyToiP then
			local AldyToir = AldyToiP:FindFirstChild("\068\105\115\112\108\097\121", true) and (AldyToiP[AldyToikT(12468)]:FindFirstChild("\073\110\118\101\110\116\111\114\121", true) and AldyToiP[AldyToikT(12468)].Inventory:FindFirstChild(AldyToikT(12372), true));
			if AldyToir and AldyToir:IsA(AldyToikT(12719)) then
				local AldyToiP = AldyToir.Text:match("\094\040\037\100\043\041");
				if AldyToiP then
					AldyToiV5 = tonumber(AldyToiP);
					if (getgenv())[AldyToikT(12430)][AldyToikT(12313)] and AldyToiV5 >= AldyToiR5 then
						AldyToiZ5();
					end;
					if AldyToiV5 >= 4900 then
						AldyToiZ5();
					end;
				end;
			end;
		end;
	end);
	return AldyToiV5;
end;
local function AldyToiC5(AldyToiP)
	for AldyToir, AldyToiu in pairs(AldyToix:GetChildren()) do
		if AldyToiu:IsA(AldyToikT(12506)) then
			local AldyToir, AldyToiy = pcall(require, AldyToiu);
			if AldyToir and (AldyToiy and (AldyToiy.Data and AldyToiy[AldyToikT(12294)][AldyToikT(12771)] == AldyToiP)) then
				return AldyToiy;
			end;
		end;
	end;
	return nil;
end;
(getgenv())[AldyToikT(12566)] = { Legendary = false, [AldyToikT(12834)] = false, [AldyToikT(12669)] = false };
local function AldyToiO5()
	local AldyToiP = AldyToiR:Get(AldyToikT(12641));
	if not AldyToiP or not AldyToiP.Items then
		return;
	end;
	for AldyToiP, AldyToir in pairs(AldyToiP.Items) do
		local AldyToiu = AldyToiC5(AldyToir.Id);
		if AldyToiu and (AldyToiu.Data[AldyToikT(12319)] == AldyToikT(12442) and AldyToiu.Probability) then
			local AldyToiP = AldyToiB.GetTierFromRarity(nil, AldyToiu.Probability.Chance);
			if AldyToiP and AldyToiP[AldyToikT(12676)] == "\076\101\103\101\110\100\097\114\121" then
				if AldyToir.UUID and not AldyToir.Favorited then
					AldyToio:FireServer(AldyToir.UUID);
				end;
			end;
		end;
	end;
end;
local function AldyToic5()
	local AldyToiP = AldyToiR:Get(AldyToikT(12641));
	if not AldyToiP or not AldyToiP[AldyToikT(12645)] then
		return;
	end;
	for AldyToiP, AldyToir in pairs(AldyToiP[AldyToikT(12645)]) do
		local AldyToiu = AldyToiC5(AldyToir[AldyToikT(12771)]);
		if AldyToiu and (AldyToiu.Data.Type == "\070\105\115\104\101\115" and AldyToiu.Probability) then
			local AldyToiP = AldyToiB[AldyToikT(12486)](nil, AldyToiu[AldyToikT(12608)].Chance);
			if AldyToiP and AldyToiP.Name == AldyToikT(12634) then
				if AldyToir.UUID and not AldyToir[AldyToikT(12479)] then
					AldyToio:FireServer(AldyToir.UUID);
				end;
			end;
		end;
	end;
end;
local function AldyToiz5()
	local AldyToiP = AldyToiR:Get(AldyToikT(12641));
	if not AldyToiP or not AldyToiP[AldyToikT(12645)] then
		return;
	end;
	for AldyToiP, AldyToir in pairs(AldyToiP.Items) do
		local AldyToiu = AldyToiC5(AldyToir[AldyToikT(12771)]);
		if AldyToiu and (AldyToiu.Data[AldyToikT(12319)] == "\070\105\115\104\101\115" and AldyToiu.Probability) then
			local AldyToiP = AldyToiB[AldyToikT(12486)](nil, AldyToiu.Probability.Chance);
			if AldyToiP and AldyToiP.Name == "\083\069\067\082\069\084" then
				if AldyToir[AldyToikT(12471)] and not AldyToir.Favorited then
					AldyToio:FireServer(AldyToir.UUID);
				end;
			end;
		end;
	end;
end;
local AldyToil5 = { [5] = false, [6] = false, [7] = false };
local function AldyToib5()
	local AldyToiP = AldyToiR:Get(AldyToikT(12641));
	if not AldyToiP or not AldyToiP[AldyToikT(12645)] then
		return;
	end;
	for AldyToiP, AldyToir in pairs(AldyToiP[AldyToikT(12645)]) do
		local AldyToiu = AldyToiC5(AldyToir.Id);
		if AldyToiu and AldyToiu.Data[AldyToikT(12319)] == "\070\105\115\104\101\115" then
			if AldyToir.UUID and not AldyToir.Favorited then
				AldyToio:FireServer(AldyToir.UUID);
			end;
		end;
	end;
end;
local function AldyToiK5()
	local AldyToiP = AldyToiR:Get("\073\110\118\101\110\116\111\114\121");
	if not AldyToiP or not AldyToiP[AldyToikT(12645)] then
		return;
	end;
	for AldyToiP, AldyToir in pairs(AldyToiP.Items) do
		local AldyToiu = AldyToiC5(AldyToir[AldyToikT(12771)]);
		if AldyToiu and AldyToiu.Data[AldyToikT(12319)] == "\070\105\115\104\101\115" then
			if AldyToir.UUID and AldyToir.Favorited then
				AldyToio:FireServer(AldyToir[AldyToikT(12471)]);
			end;
		end;
	end;
end;
local AldyToiS5 = {};
local function AldyToiq5(AldyToiP, AldyToir)
	local AldyToiu = game.Players[AldyToikT(12817)];
	local AldyToiy = AldyToiu.Character or AldyToiu[AldyToikT(12637)]:Wait();
	local AldyToii = AldyToiy:WaitForChild(AldyToikT(12814));
	for AldyToiP, AldyToir in ipairs(AldyToii:GetPlayingAnimationTracks()) do
		AldyToir:Stop();
	end;
	local AldyToiH = Instance.new(AldyToikT(12842));
	AldyToiH[AldyToikT(12717)] = "\114\098\120\097\115\115\101\116\105\100\058\047\047" .. AldyToiP;
	local AldyToiT = AldyToii:LoadAnimation(AldyToiH);
	AldyToiT:Play();
	task.delay(AldyToir, function()
		if AldyToiT.IsPlaying then
			AldyToiT:Stop();
		end;
	end);
	return AldyToiT;
end;
local function AldyToiv5()
	local AldyToir = {};
	for AldyToiP, AldyToiu in ipairs(AldyToiP:GetPlayers()) do
		if AldyToiu ~= AldyToiy then
			table.insert(AldyToir, AldyToiu[AldyToikT(12676)]);
		end;
	end;
	table[AldyToikT(12425)](AldyToir);
	return AldyToir;
end;
(getgenv())[AldyToikT(12613)][AldyToikT(12516)]:CreateParagraph({ [AldyToikT(12577)] = AldyToikT(12402), Content = AldyToikT(12497) });
(getgenv()).Tabs[AldyToikT(12501)]:CreateParagraph({ [AldyToikT(12577)] = "\065\117\116\111 \084\114\097\100\101 \083\116\111\110\101", [AldyToikT(12603)] = "\067\108\101\097\114 \116\104\101 \116\111\111\108\098\097\114\047\102\105\115\104 \098\101\108\111\119 \116\104\101 \104\111\116\098\097\114\047\098\097\099\107\112\097\099\107\044 \116\104\101\110 \115\101\108\101\099\116 \097 \112\108\097\121\101\114\044 \099\104\111\111\115\101 \116\104\101 \097\109\111\117\110\116\044 \097\110\100 \099\108\105\099\107 \116\104\101 \084\114\097\100\101 \098\117\116\116\111\110\046" });
local AldyToik5 = nil;
(getgenv())[AldyToikT(12315)] = (getgenv())[AldyToikT(12613)][AldyToikT(12501)]:CreateDropdown({
		[AldyToikT(12676)] = AldyToikT(12571),
		Options = AldyToiv5(),
		CurrentOption = { "" },
		[AldyToikT(12302)] = false,
		Flag = "\084\101\108\101\112\111\114\116\080\108\097\121\101\114\068\114\111\112\100\111\119\110",
		[AldyToikT(12813)] = function(AldyToiP)
			AldyToik5 = AldyToiP[1];
		end,
	});
local function AldyToiU5()
	local AldyToiP = AldyToiR:Get(AldyToikT(12641));
	if not AldyToiP or not AldyToiP.Items then
		return {};
	end;
	local AldyToir = {};
	for AldyToiP, AldyToiu in pairs(AldyToiP.Items) do
		if type(AldyToiu) == "\116\097\098\108\101" and AldyToiu[AldyToikT(12771)] == 10 then
			table.insert(AldyToir, AldyToiu.UUID);
		end;
	end;
	return AldyToir;
end;
local function AldyToiX5()
	local AldyToiP = AldyToiR:Get("\073\110\118\101\110\116\111\114\121");
	if not AldyToiP or not AldyToiP[AldyToikT(12645)] then
		return nil;
	end;
	for AldyToiP, AldyToir in pairs(AldyToiP.Items) do
		if type(AldyToir) == AldyToikT(12636) and AldyToir[AldyToikT(12771)] == 10 then
			return tostring(AldyToir[AldyToikT(12471)]);
		end;
	end;
	return nil;
end;
(getgenv()).loopCount = (getgenv())[AldyToikT(12618)] or 1;
(getgenv())[AldyToikT(12613)].TradeStoneTab:CreateInput({
	[AldyToikT(12676)] = AldyToikT(12586),
	[AldyToikT(12740)] = AldyToikT(12327),
	RemoveTextAfterFocusLost = false,
	Callback = function(AldyToiP)
		local AldyToir = tonumber(AldyToiP);
		if AldyToir then
			(getgenv()).loopCount = AldyToir;
			print(AldyToikT(12625), loopCount);
		else
			warn("\073\110\112\117\116 \098\117\107\097\110 \097\110\103\107\097");
		end;
	end,
});
local AldyToin5 = (getgenv()).Tabs.TradeStoneTab:CreateParagraph({ [AldyToikT(12577)] = "\080\114\111\103\114\101\115\115 \084\114\097\100\101", Content = AldyToikT(12581) });
local AldyToij5, AldyToiJ5 = 0, 0;
(getgenv()).Tabs.TradeStoneTab:CreateButton({ Name = "\083\116\097\114\116 \084\114\097\100\101", Callback = function()
		pcall(function()
			if not AldyToik5 or AldyToik5 == "" then
				AldyToia:Notify({ [AldyToikT(12577)] = "\226\157\140 \069\114\114\111\114", [AldyToikT(12603)] = AldyToikT(12463), Duration = 2 });
				return;
			end;
			local AldyToir = AldyToiy.Character;
			local AldyToii = AldyToir and AldyToir:FindFirstChild(AldyToikT(12688));
			if not AldyToii then
				AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12643), Content = "\089\111\117\114 \099\104\097\114\097\099\116\101\114 \110\111\116 \102\111\117\110\100\046", [AldyToikT(12736)] = 2 });
				return;
			end;
			local AldyToiH = AldyToiu:FindFirstChild("\067\104\097\114\097\099\116\101\114\115");
			if not AldyToiH then
				AldyToia:Notify({ Title = AldyToikT(12643), [AldyToikT(12603)] = "\'\067\104\097\114\097\099\116\101\114\115\' \102\111\108\100\101\114 \110\111\116 \102\111\117\110\100\046", Duration = 2 });
				return;
			end;
			local AldyToiT = AldyToiH:FindFirstChild(AldyToik5);
			if AldyToiT then
				local AldyToir = AldyToiP:GetPlayerFromCharacter(AldyToiT);
				if AldyToir then
					local AldyToiP = AldyToiT[AldyToikT(12688)];
					AldyToii.CFrame = AldyToiP.CFrame;
					local AldyToiu = AldyToir.UserId;
					local AldyToiy = AldyToiU5();
					local AldyToiH = #AldyToiy;
					print("\074\117\109\108\097\104 \105\116\101\109 \115\116\111\110\101 \115\097\097\116 \105\110\105 \058", AldyToiH);
					if AldyToiH == 0 then
						warn("\084\105\100\097\107 \097\100\097 \098\097\116\117 \117\110\116\117\107 \100\105\116\114\097\100\101");
						return;
					end;
					AldyToij5, AldyToiJ5 = 0, 0;
					for AldyToiP = 1, (getgenv()).loopCount, 1 do
						local AldyToir = AldyToiy[(AldyToiP - 1) % AldyToiH + 1];
						AldyToin5:Set({ Title = "\080\114\111\103\114\101\115\115 \084\114\097\100\101", [AldyToikT(12603)] = string[AldyToikT(12689)](AldyToikT(12648), AldyToiP, (getgenv())[AldyToikT(12618)], AldyToij5, AldyToiJ5, AldyToiH) });
						local AldyToii, AldyToiT = pcall(function()
								(getgenv()).Remotes[AldyToikT(12615)]:FireServer(AldyToir, AldyToikT(12298));
								task.wait(.5);
								(getgenv()).Remotes[AldyToikT(12460)]:FireServer(2);
								task[AldyToikT(12601)](.2);
								return (getgenv())[AldyToikT(12473)][AldyToikT(12683)]:InvokeServer(AldyToiu, AldyToir);
							end);
						if AldyToii and AldyToiT then
							AldyToij5 = AldyToij5 + 1;
							print(string[AldyToikT(12689)]("\091\083\085\075\083\069\083\093 \065\117\116\111 \084\114\097\100\101 \037\100\047\037\100 \124 \083\117\107\115\101\115\058\037\100 \124 \071\097\103\097\108\058\037\100", AldyToiP, (getgenv()).loopCount, AldyToij5, AldyToiJ5));
						else
							AldyToiJ5 = AldyToiJ5 + 1;
							print(string.format("\091\071\065\071\065\076\093 \065\117\116\111 \084\114\097\100\101 \037\100\047\037\100 \124 \083\117\107\115\101\115\058\037\100 \124 \071\097\103\097\108\058\037\100", AldyToiP, (getgenv())[AldyToikT(12618)], AldyToij5, AldyToiJ5));
						end;
						AldyToin5:Set({ [AldyToikT(12577)] = AldyToikT(12762), [AldyToikT(12603)] = string.format("\080\114\111\103\114\101\115\115\058 \037\100\047\037\100\n\226\156\133 \083\117\107\115\101\115\058 \037\100 \124 \226\157\140 \071\097\103\097\108\058 \037\100  \124  \083\105\115\097\058 \037\100", AldyToiP, (getgenv()).loopCount, AldyToij5, AldyToiJ5, AldyToiH) });
						task[AldyToikT(12601)](6);
					end;
					print("\084\114\097\100\105\110\103 \067\111\109\112\108\101\116\101\058", (getgenv())[AldyToikT(12618)], " \083\117\107\115\101\115\058", AldyToij5, " \071\097\103\097\108\058", AldyToiJ5);
				else
					warn("\078\111 \112\108\097\121\101\114 \102\111\117\110\100 \102\111\114 \116\104\105\115 \099\104\097\114\097\099\116\101\114");
				end;
			else
				warn(AldyToikT(12314));
			end;
		end);
	end });
(getgenv()).Tabs[AldyToikT(12501)]:CreateButton({ Name = AldyToikT(12361), [AldyToikT(12813)] = function()
		local AldyToiP = AldyToiv5();
		(getgenv())[AldyToikT(12315)]:Refresh(AldyToiP);
		if AldyToik5 and table[AldyToikT(12664)](AldyToiP, AldyToik5) then
			(getgenv()).playerDropdown2:Set({ AldyToik5 });
		else
			AldyToik5 = nil;
			(getgenv())[AldyToikT(12315)]:Set({ "\060\078\111\110\101\062" });
		end;
	end });
local AldyToih5;
local AldyToiL5;
AldyToih5 = (getgenv())[AldyToikT(12613)][AldyToikT(12516)]:CreateToggle({
		Name = "\080\101\114\102\101\099\116 \067\097\115\116",
		[AldyToikT(12801)] = false,
		[AldyToikT(12283)] = AldyToikT(12785),
		[AldyToikT(12813)] = function(AldyToiP)
			(getgenv())[AldyToikT(12430)][AldyToikT(12684)] = AldyToiP;
			if AldyToiP and AldyToiL5 then
				(getgenv())[AldyToikT(12430)][AldyToikT(12455)] = false;
				AldyToiL5:Set(false);
			end;
		end,
	});
AldyToiL5 = (getgenv()).Tabs[AldyToikT(12516)]:CreateToggle({
		[AldyToikT(12676)] = AldyToikT(12567),
		CurrentValue = false,
		Flag = "\065\109\097\122\105\110\103\067\097\115\116\084\111\103\103\108\101",
		Callback = function(AldyToiP)
			(getgenv())[AldyToikT(12430)][AldyToikT(12455)] = AldyToiP;
			if AldyToiP and AldyToih5 then
				(getgenv()).toggleState[AldyToikT(12684)] = false;
				AldyToih5:Set(false);
			end;
		end,
	});
(getgenv())[AldyToikT(12278)] = (getgenv())[AldyToikT(12613)].TP_Player_Tab:CreateDropdown({
		Name = AldyToikT(12571),
		[AldyToikT(12349)] = AldyToiv5(),
		[AldyToikT(12644)] = { AldyToikT(12589) },
		MultipleOptions = false,
		[AldyToikT(12283)] = AldyToikT(12826),
		[AldyToikT(12813)] = function(AldyToiP)
			(getgenv()).selectedPlayerName = AldyToiP[1];
		end,
	});
local function AldyToiW5(AldyToiP)
	if not AldyToiP or AldyToiP == "" then
		AldyToia:Notify({ Title = AldyToikT(12643), Content = AldyToikT(12463), [AldyToikT(12736)] = 2 });
		return;
	end;
	local AldyToir = AldyToiy.Character;
	local AldyToii = AldyToir and AldyToir:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
	if not AldyToii then
		AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12643), [AldyToikT(12603)] = AldyToikT(12564), Duration = 2 });
		return;
	end;
	local AldyToiH = AldyToiu:FindFirstChild(AldyToikT(12734));
	if not AldyToiH then
		AldyToia:Notify({ [AldyToikT(12577)] = "\226\157\140 \069\114\114\111\114", Content = AldyToikT(12647), Duration = 2 });
		return;
	end;
	local AldyToiT = AldyToiH:FindFirstChild(AldyToiP);
	if AldyToiT and AldyToiT:FindFirstChild(AldyToikT(12688)) then
		local AldyToir = AldyToiT[AldyToikT(12688)];
		local AldyToiu = AldyToir[AldyToikT(12431)].RightVector * 5;
		AldyToii.CFrame = AldyToir.CFrame + AldyToiu;
		AldyToia:Notify({ [AldyToikT(12577)] = "\226\156\133 \084\101\108\101\112\111\114\116\101\100", Content = AldyToikT(12375) .. AldyToiP, [AldyToikT(12736)] = 2 });
	else
		AldyToia:Notify({ Title = AldyToikT(12643), [AldyToikT(12603)] = AldyToikT(12562), Duration = 2 });
	end;
end;
(getgenv())[AldyToikT(12613)].TP_Player_Tab:CreateButton({ Name = "\084\101\108\101\112\111\114\116 \116\111 \083\101\108\101\099\116\101\100 \080\108\097\121\101\114", Callback = function()
		pcall(function()
			AldyToiW5((getgenv()).selectedPlayerName);
		end);
	end });
(getgenv())[AldyToikT(12613)].TP_Player_Tab:CreateButton({ Name = "\240\159\148\132 \082\101\102\114\101\115\104 \080\108\097\121\101\114 \076\105\115\116", [AldyToikT(12813)] = function()
		local AldyToiP = AldyToiv5();
		(getgenv()).playerDropdown:Refresh(AldyToiP);
		if (getgenv())[AldyToikT(12432)] and table.find(AldyToiP, (getgenv())[AldyToikT(12432)]) then
			(getgenv())[AldyToikT(12278)]:Set({ (getgenv()).selectedPlayerName });
		else
			(getgenv()).selectedPlayerName = nil;
			(getgenv()).playerDropdown:Set({ "\060\078\111\110\101\062" });
		end;
	end });
(getgenv()).Tabs.AboutTab:CreateParagraph({ [AldyToikT(12577)] = AldyToikT(12550), [AldyToikT(12603)] = "\070\114\101\101 \097\110\100 \075\101\121\108\101\115\115\046\n" });
(getgenv()).Tabs.AboutTab:CreateButton({ [AldyToikT(12676)] = AldyToikT(12396), [AldyToikT(12813)] = function()
		setclipboard(AldyToikT(12469));
		AldyToia:Notify({ [AldyToikT(12577)] = "\067\111\112\105\101\100 \116\111 \099\108\105\112\098\111\097\114\100\033", [AldyToikT(12603)] = AldyToikT(12469), [AldyToikT(12736)] = 1 });
	end });
(getgenv()).Tabs.AboutTab:CreateButton({ [AldyToikT(12676)] = "\084\105\107\116\111\107", [AldyToikT(12813)] = function()
		setclipboard(AldyToikT(12384));
		AldyToia:Notify({ [AldyToikT(12577)] = "\067\111\112\105\101\100 \116\111 \099\108\105\112\098\111\097\114\100\033", [AldyToikT(12603)] = "\104\116\116\112\115\058\047\047\116\105\107\116\111\107\046\099\111\109\047\097\108\100\121\116\111\105", [AldyToikT(12736)] = 1 });
	end });
(getgenv())[AldyToikT(12613)].AboutTab:CreateButton({ Name = "\071\105\116\072\117\098", [AldyToikT(12813)] = function()
		setclipboard("\104\116\116\112\115\058\047\047\103\105\116\104\117\098\046\099\111\109\047\097\108\100\121\106\114\122");
		AldyToia:Notify({ Title = AldyToikT(12829), Content = AldyToikT(12774), Duration = 1 });
	end });
local AldyToit5 = AldyToiY:WaitForChild("\073\116\101\109\115");
local AldyToiPt = {};
local function AldyToirt(AldyToiP)
	if not AldyToiP or type(AldyToiP) ~= "\110\117\109\098\101\114" then
		return "\063\063\063";
	end;
	if AldyToiP >= 1000000 then
		return string.format(AldyToikT(12593), AldyToiP / 1000000);
	elseif AldyToiP >= 1000 then
		return string[AldyToikT(12689)]("\037\046\049\102\107 \067\111\105\110\115", AldyToiP / 1000);
	else
		return tostring(AldyToiP) .. AldyToikT(12515);
	end;
end;
local function AldyToiut()
	for AldyToiP, AldyToir in ipairs(AldyToit5:GetChildren()) do
		if AldyToir:IsA("\077\111\100\117\108\101\083\099\114\105\112\116") then
			local AldyToiP, AldyToiu = pcall(require, AldyToir);
			if AldyToiP and type(AldyToiu) == "\116\097\098\108\101" then
				AldyToiu[AldyToikT(12288)] = 9999;
				AldyToiu[AldyToikT(12838)] = 9999;
				AldyToiu.Speed = 100;
				AldyToiu[AldyToikT(12434)] = 1000000;
			end;
			if AldyToiP and (type(AldyToiu) == AldyToikT(12636) and AldyToiu.RollData) then
				AldyToiu.RollData.BaseLuck = 9999;
				if not AldyToiu[AldyToikT(12466)][AldyToikT(12457)] then
					AldyToiu[AldyToikT(12466)].Frequency = {};
				end;
				AldyToiu[AldyToikT(12466)].Frequency.Golden = 100;
				AldyToiu.RollData[AldyToikT(12457)].Rainbow = 100;
			end;
		end;
	end;
	local AldyToiP = AldyToiY:WaitForChild(AldyToikT(12491));
	for AldyToiP, AldyToir in pairs(AldyToiP:GetChildren()) do
		if AldyToir:IsA(AldyToikT(12506)) then
			local AldyToiP, AldyToiu = pcall(require, AldyToir);
			if AldyToiP and (AldyToiu and AldyToiu.Modifiers) then
				if AldyToiu.Modifiers == nil then
					AldyToiu.Modifiers = {};
				end;
				AldyToiu[AldyToikT(12830)][AldyToikT(12666)] = 99999;
				if AldyToiu.Modifiers[AldyToikT(12544)] == nil then
					AldyToiu[AldyToikT(12830)].ShinyMultiplier = 99999;
				end;
				if AldyToiu.Modifiers.MutationMultiplier == nil then
					AldyToiu[AldyToikT(12830)][AldyToikT(12470)] = 99999;
				end;
			else
				warn(AldyToikT(12499), AldyToir[AldyToikT(12676)]);
			end;
		end;
	end;
end;
for AldyToiP, AldyToir in ipairs(AldyToit5:GetChildren()) do
	if AldyToir:IsA(AldyToikT(12506)) then
		local AldyToiP, AldyToiu = pcall(require, AldyToir);
		if AldyToiP and typeof(AldyToiu) == "\116\097\098\108\101" then
			local AldyToiP = AldyToiu[AldyToikT(12294)];
			if AldyToiP and AldyToiP.Type == AldyToikT(12539) then
				local AldyToiy = AldyToiP.Id or "\063";
				local AldyToii = AldyToiP.Name or AldyToir.Name;
				local AldyToiH = AldyToiP[AldyToikT(12631)] or AldyToikT(12585);
				local AldyToiT = "\063\063\063";
				if AldyToiu.Price then
					AldyToiT = AldyToirt(AldyToiu.Price);
					table[AldyToikT(12671)](AldyToiPt, {
						[AldyToikT(12329)] = AldyToiy,
						[AldyToikT(12676)] = AldyToii,
						Dex = AldyToiH,
						Harga = AldyToiT,
					});
				else
					local AldyToiP = {
							["\071\111\108\100 \082\111\100"] = "\086\073\080 \079\110\108\121",
							["\076\117\099\107\121 \082\111\100"] = AldyToikT(12357),
							["\077\105\100\110\105\103\104\116 \082\111\100"] = AldyToikT(12534),
							["\067\104\114\111\109\101 \082\111\100"] = "\052\051\055\107 \067\111\105\110\115",
						};
					AldyToiT = AldyToiP[AldyToii] or "\063\063\063 \085\110\107\110\111\119\110";
				end;
			end;
		end;
	end;
end;
(getgenv())[AldyToikT(12613)].Buy_Rod:CreateSection("\082\111\100\115");
(getgenv()).Tabs.Buy_Rod:CreateParagraph({ [AldyToikT(12577)] = "\080\117\114\099\104\097\115\101 \082\111\100\115", [AldyToikT(12603)] = "\083\111\109\101 \082\111\100\115 \099\097\110\'\116 \098\101 \112\117\114\099\104\097\115\101\100 \098\101\099\097\117\115\101 \116\104\101\121 \097\114\101 \086\073\080 \111\110\108\121 \111\114 \100\111\101\115\110\'\116 \104\097\118\101 \097 \112\114\105\099\101 \109\097\112\046" });
for AldyToiP, AldyToir in ipairs(AldyToiPt) do
	(getgenv()).Tabs.Buy_Rod:CreateButton({ [AldyToikT(12676)] = string[AldyToikT(12689)]("\037\115 \040\037\115\041", AldyToir[AldyToikT(12676)], AldyToir.Harga), Callback = function()
			local AldyToiP, AldyToiu = pcall(function()
					return AldyToiY.Packages._Index["\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048"].net[AldyToikT(12417)]:InvokeServer(AldyToir[AldyToikT(12329)]);
				end);
			AldyToia:Notify({ [AldyToikT(12577)] = "\080\117\114\099\104\097\115\101 \082\111\100", [AldyToikT(12603)] = AldyToiP and "\066\117\121\105\110\103 " .. AldyToir.Name or "\070\097\105\108\101\100 \116\111 \098\117\121 " .. AldyToir.Name, [AldyToikT(12736)] = 1 });
			if not AldyToiP then
				warn(AldyToikT(12836), AldyToiu);
			end;
		end });
end;
(getgenv()).Tabs[AldyToikT(12374)]:CreateSection("\066\097\105\116\115");
(getgenv())[AldyToikT(12613)].Buy_Rod:CreateParagraph({ [AldyToikT(12577)] = "\066\117\121 \066\097\105\116\115", [AldyToikT(12603)] = "\066\117\121 \066\097\105\116\115 \069\118\101\114\121\119\104\101\114\101" });
local AldyToiyt = AldyToiY:FindFirstChild("\066\097\105\116\115");
if not AldyToiyt then
	warn(AldyToikT(12821));
	return;
end;
for AldyToiP, AldyToir in ipairs(AldyToiyt:GetChildren()) do
	if AldyToir:IsA(AldyToikT(12506)) then
		local AldyToiP, AldyToiu = pcall(require, AldyToir);
		if AldyToiP and (AldyToiu and AldyToiu.Data) then
			local AldyToiP = AldyToiu.Data.Id or 0;
			local AldyToir = AldyToiu[AldyToikT(12294)][AldyToikT(12676)] or AldyToikT(12807);
			local AldyToiy = AldyToiu[AldyToikT(12294)].Description or AldyToikT(12585);
			local AldyToii = AldyToiu[AldyToikT(12379)] and AldyToiu.Price .. " \067\111\105\110\115" or AldyToikT(12274);
			(getgenv()).Tabs[AldyToikT(12374)]:CreateButton({ [AldyToikT(12676)] = AldyToir .. (" \040" .. (AldyToii .. AldyToikT(12739))), Callback = function()
					pcall(function()
						AldyToiY.Packages[AldyToikT(12561)][AldyToikT(12270)][AldyToikT(12743)][AldyToikT(12665)]:InvokeServer(AldyToiP);
						AldyToia:Notify({ Title = AldyToikT(12513), Content = AldyToikT(12250) .. AldyToir, Duration = 3 });
					end);
				end });
		else
			warn(AldyToikT(12627), AldyToir[AldyToikT(12676)]);
		end;
	end;
end;
local AldyToiit = AldyToig5:WaitForChild(AldyToikT(12476));
local AldyToiHt = require((AldyToiY:WaitForChild(AldyToikT(12359))):WaitForChild("\070\105\115\104\105\110\103\067\111\110\116\114\111\108\108\101\114"));
(getgenv()).tierArray = (getgenv())[AldyToikT(12263)] or {
		{
			[AldyToikT(12676)] = "\067\111\109\109\111\110",
			Rarity = 1,
			[AldyToikT(12638)] = ColorSequence.new(Color3[AldyToikT(12825)](255, 250, 246)),
			Tier = 1,
		},
		{
			Name = "\085\110\099\111\109\109\111\110",
			[AldyToikT(12587)] = .02,
			TierColor = ColorSequence.new(Color3.fromRGB(195, 255, 85)),
			[AldyToikT(12761)] = 2,
		},
		{
			[AldyToikT(12676)] = AldyToikT(12772),
			[AldyToikT(12587)] = .004,
			TierColor = ColorSequence.new(Color3.fromRGB(85, 162, 255)),
			[AldyToikT(12761)] = 3,
		},
		{
			Name = AldyToikT(12505),
			Rarity = .001,
			[AldyToikT(12638)] = ColorSequence[AldyToikT(12526)](Color3.fromRGB(173, 79, 255)),
			[AldyToikT(12761)] = 4,
		},
		{
			Name = "\076\101\103\101\110\100\097\114\121",
			Rarity = .0002,
			[AldyToikT(12638)] = ColorSequence.new(Color3.fromRGB(255, 184, 42)),
			Tier = 5,
		},
		{
			[AldyToikT(12676)] = "\077\121\116\104\105\099",
			[AldyToikT(12587)] = 2e-05,
			TierColor = ColorSequence.new(Color3.fromRGB(255, 24, 24)),
			[AldyToikT(12761)] = 6,
		},
		{
			Name = AldyToikT(12354),
			[AldyToikT(12587)] = 4e-06,
			TierColor = ColorSequence.new({ ColorSequenceKeypoint[AldyToikT(12526)](0, Color3[AldyToikT(12825)](23, 255, 151)), ColorSequenceKeypoint.new(1, Color3[AldyToikT(12825)](11, 149, 255)) }),
			[AldyToikT(12761)] = 7,
		},
	};
local function AldyToiTt(AldyToiP, AldyToir, AldyToiu)
	AldyToiu = AldyToiu or .01;
	return math.abs(AldyToiP[AldyToikT(12445)] - AldyToir.R) <= AldyToiu and (math[AldyToikT(12549)](AldyToiP[AldyToikT(12827)] - AldyToir[AldyToikT(12827)]) <= AldyToiu and math[AldyToikT(12549)](AldyToiP[AldyToikT(12413)] - AldyToir[AldyToikT(12413)]) <= AldyToiu);
end;
local function AldyToiYt(AldyToiP)
	local AldyToir = {};
	for AldyToiu = 1, #AldyToiP, 4 do
		local AldyToiy = AldyToiP[AldyToiu];
		local AldyToii = AldyToiP[AldyToiu + 1];
		local AldyToiH = AldyToiP[AldyToiu + 2];
		local AldyToiT = AldyToiP[AldyToiu + 3];
		table[AldyToikT(12671)](AldyToir, ColorSequenceKeypoint[AldyToikT(12526)](AldyToiy, Color3[AldyToikT(12526)](AldyToii, AldyToiH, AldyToiT)));
	end;
	return ColorSequence[AldyToikT(12526)](AldyToir);
end;
local function AldyToiMt(AldyToiP)
	local AldyToir;
	if typeof(AldyToiP) == "\067\111\108\111\114\083\101\113\117\101\110\099\101" then
		AldyToir = AldyToiP;
	elseif typeof(AldyToiP) == AldyToikT(12636) then
		AldyToir = AldyToiYt(AldyToiP);
	else
		warn("\084\101\120\116\067\111\108\111\114 \116\105\100\097\107 \100\105\107\101\110\097\108\105\058", typeof(AldyToiP));
		return nil;
	end;
	local AldyToiu = AldyToir.Keypoints[1][AldyToikT(12401)];
	for AldyToiP, AldyToir in ipairs((getgenv())[AldyToikT(12263)]) do
		if AldyToir.TierColor and AldyToir.TierColor[AldyToikT(12811)] then
			local AldyToiP = AldyToir.TierColor[AldyToikT(12811)][1].Value;
			if AldyToiTt(AldyToiu, AldyToiP) then
				return AldyToir;
			end;
		end;
	end;
	return nil;
end;
(getgenv()).lastTierData = nil;
(getgenv()).lastTierReceived = false;
local AldyToiet = {
		AldyToikT(12395),
		AldyToikT(12574),
		AldyToikT(12772),
		"\069\112\105\099",
		"\076\101\103\101\110\100\097\114\121",
		"\077\121\116\104\105\099",
		"\083\069\067\082\069\084",
	};
(getgenv()).selectedTier = { "\076\101\103\101\110\100\097\114\121", "\077\121\116\104\105\099", "\083\069\067\082\069\084" };
local function AldyToiGt(AldyToiP)
	(getgenv()).toggleState[AldyToikT(12810)] = AldyToiP;
	if AldyToiP then
		pcall(function()
			local AldyToiP = { 1 };
			((((((game:GetService(AldyToikT(12483))):WaitForChild("\080\097\099\107\097\103\101\115")):WaitForChild("\095\073\110\100\101\120")):WaitForChild(AldyToikT(12270))):WaitForChild(AldyToikT(12743))):WaitForChild(AldyToikT(12733))):FireServer(unpack(AldyToiP));
		end);
		task.wait(.8);
		task[AldyToikT(12322)](function()
			while (getgenv())[AldyToikT(12430)][AldyToikT(12810)] do
				for AldyToiP, AldyToir in ipairs(AldyToiA5:GetPlayingAnimationTracks()) do
					AldyToir:Stop();
				end;
				pcall(function()
					(getgenv())[AldyToikT(12742)] = true;
					if not (getgenv()).toggleState.fishingAnimation then
						if AldyToim == 245 then
							AldyToiq5(AldyToiB5, 1);
						else
							AldyToiq5(AldyToim5, 1);
						end;
					end;
					(getgenv())[AldyToikT(12473)][AldyToikT(12681)]:InvokeServer(AldyToiu:GetServerTimeNow());
					if not (getgenv()).toggleState.fishingAnimation then
						if AldyToim == 245 then
							AldyToiq5(AldyToia5, 2);
						else
							AldyToiq5(AldyToiF5, 2);
						end;
					end;
					task.wait(.2);
					local AldyToiP, AldyToir;
					if (getgenv()).toggleState[AldyToikT(12684)] and not (getgenv()).toggleState[AldyToikT(12455)] then
						AldyToiP, AldyToir = -0.74999964237213, 1;
					elseif not (getgenv()).toggleState.perfectCast and (getgenv()).toggleState[AldyToikT(12455)] then
						AldyToiP, AldyToir = -139.6379699707, .87694226394928;
					else
						AldyToiP = math.random(-1000, 1000) / 1000;
						AldyToir = math[AldyToikT(12841)](0, 1000) / 1000;
					end;
					if not (getgenv()).toggleState.fishingAnimation then
						if AldyToim == 245 then
							AldyToiq5(AldyToid5, 15);
						else
							AldyToiq5(AldyToix5, 15);
						end;
					end;
					(getgenv()).Remotes.RF_RequestFishingMinigameStarted:InvokeServer(AldyToiP, AldyToir);
					task[AldyToikT(12601)](.2);
					local AldyToiy = {};
					while (getgenv())[AldyToikT(12742)] do
						(getgenv())[AldyToikT(12473)].RE_FishingCompleted:FireServer(unpack(AldyToiy));
						task[AldyToikT(12601)](.5);
					end;
				end);
				task[AldyToikT(12601)]((getgenv())[AldyToikT(12356)]);
			end;
		end);
	else
		local AldyToiP = {};
		for AldyToir = 1, 6, 1 do
			(getgenv()).Remotes.RE_FishingCompleted:FireServer(unpack(AldyToiP));
			task.wait(.1);
		end;
		pcall(function()
			(getgenv())[AldyToikT(12473)][AldyToikT(12640)]:InvokeServer();
			if AldyToiHt and AldyToiHt[AldyToikT(12461)] then
				AldyToiHt:RequestClientStopFishing(true);
			end;
		end);
		for AldyToiP, AldyToir in ipairs(AldyToiA5:GetPlayingAnimationTracks()) do
			AldyToir:Stop();
		end;
		AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12339), Content = AldyToikT(12292), [AldyToikT(12736)] = 1 });
	end;
end;
if (getgenv())[AldyToikT(12555)] then
	(getgenv())[AldyToikT(12555)]:Disconnect();
end;
(getgenv()).replicateTextConn = AldyToiY.Packages[AldyToikT(12561)][AldyToikT(12270)].net[AldyToikT(12448)].OnClientEvent:Connect(function(AldyToir)
		if AldyToir and (AldyToir[AldyToikT(12617)] and AldyToir.TextData[AldyToikT(12414)] == "\069\120\099\108\097\105\109") then
			local AldyToiu = AldyToiP.LocalPlayer[AldyToikT(12536)] and AldyToiP.LocalPlayer.Character:FindFirstChild("\072\101\097\100");
			if AldyToiu and AldyToir.Container == AldyToiu then
				(getgenv())[AldyToikT(12692)] = tick();
				if not (getgenv())[AldyToikT(12430)].fishingAnimation then
					if AldyToim == 245 then
						AldyToiq5(AldyTois5, 1);
					else
						AldyToiq5(AldyToio5, 1);
					end;
				end;
				if (getgenv())[AldyToikT(12430)][AldyToikT(12348)] then
					local AldyToiP = AldyToir[AldyToikT(12617)].TextColor;
					local AldyToiu = AldyToiMt(AldyToiP);
					(getgenv())[AldyToikT(12503)] = AldyToiu;
					(getgenv()).lastTierReceived = true;
					if AldyToiu then
						(getgenv()).lastTierName = AldyToiu.Name;
					end;
				end;
			end;
		end;
	end);
(getgenv()).autoFishToggle = (getgenv())[AldyToikT(12613)][AldyToikT(12516)]:CreateToggle({
		[AldyToikT(12676)] = "\240\159\142\163 \065\117\116\111 \070\105\115\104\105\110\103",
		[AldyToikT(12801)] = false,
		[AldyToikT(12283)] = AldyToikT(12710),
		[AldyToikT(12813)] = function(AldyToiP)
			(getgenv())[AldyToikT(12430)][AldyToikT(12810)] = AldyToiP;
			AldyToiGt(AldyToiP);
		end,
	});
(getgenv())[AldyToikT(12613)][AldyToikT(12516)]:CreateSlider({
	[AldyToikT(12676)] = AldyToikT(12323),
	[AldyToikT(12737)] = { .1, 5 },
	Flag = "\065\117\116\111\070\105\115\104\068\101\108\097\121",
	Increment = .1,
	CurrentValue = (getgenv())[AldyToikT(12356)],
	[AldyToikT(12813)] = function(AldyToiP)
		(getgenv())[AldyToikT(12356)] = AldyToiP;
	end,
});
(getgenv()).Tabs[AldyToikT(12516)]:CreateParagraph({ [AldyToikT(12577)] = "\073\100\108\101 \082\101\115\112\097\119\110 \084\105\109\101", Content = "\068\101\108\097\121 \098\101\102\111\114\101 \097\117\116\111\109\097\116\105\099 \114\101\115\112\097\119\110 \119\104\101\110 \097\117\116\111\102\105\115\104\105\110\103 \105\115 \097\099\116\105\118\101 \098\117\116 \110\111 \102\105\115\104 \105\115 \099\097\117\103\104\116\047\104\111\111\107\101\100 \040\100\101\102\097\117\108\116 \050\048 \115\101\099\111\110\100\115\041" });
local function AldyToiQt()
	local AldyToiP = AldyToiy[AldyToikT(12536)];
	if AldyToiP and AldyToiP:FindFirstChild("\072\117\109\097\110\111\105\100") then
		AldyToiP.Humanoid[AldyToikT(12531)] = 0;
	end;
end;
(getgenv())[AldyToikT(12321)] = (getgenv()).Tabs[AldyToikT(12516)]:CreateToggle({
		Name = "\065\117\116\111 \082\101\115\112\097\119\110 \119\104\101\110 \105\100\108\101",
		CurrentValue = false,
		Flag = AldyToikT(12261),
		[AldyToikT(12813)] = function(AldyToiP)
			(getgenv()).toggleState.autoRespawn = AldyToiP;
		end,
	});
(getgenv()).idleTime = 20;
(getgenv())[AldyToikT(12613)].AutoFishTab:CreateSlider({
	Name = "\226\143\177\239\184\143 \073\100\108\101 \082\101\115\112\097\119\110 \084\105\109\101 \040\115\101\099\111\110\100\115\041",
	Range = { 10, 60 },
	[AldyToikT(12777)] = 2,
	Flag = AldyToikT(12654),
	[AldyToikT(12801)] = (getgenv())[AldyToikT(12488)],
	Callback = function(AldyToiP)
		(getgenv()).idleTime = AldyToiP;
	end,
});
(getgenv()).Tabs.AutoFishTab:CreateButton({ [AldyToikT(12676)] = AldyToikT(12588), [AldyToikT(12813)] = function()
		AldyToiQt();
	end });
(getgenv())[AldyToikT(12613)][AldyToikT(12744)]:CreateParagraph({ Title = "\240\159\140\164\239\184\143 \080\117\114\099\104\097\115\101 \087\101\097\116\104\101\114 \069\118\101\110\116\115", Content = AldyToikT(12582) });
local AldyToiDt = AldyToiY:WaitForChild("\069\118\101\110\116\115");
(getgenv())[AldyToikT(12415)] = {};
(getgenv())[AldyToikT(12399)] = {};
for AldyToiP, AldyToir in ipairs(AldyToiDt:GetChildren()) do
	if AldyToir:IsA(AldyToikT(12506)) then
		local AldyToiP, AldyToiu = pcall(require, AldyToir);
		if AldyToiP and (AldyToiu and type(AldyToiu) == AldyToikT(12636)) then
			local AldyToiP = { [AldyToikT(12676)] = AldyToiu[AldyToikT(12676)] or AldyToir[AldyToikT(12676)], Price = AldyToiu[AldyToikT(12308)] or 0, Desc = AldyToiu.Description or AldyToikT(12386) };
			if not (string.lower(AldyToiP.Name)):find("\097\100\109\105\110") and (not (string.lower(AldyToiP.Name)):find("\105\110\099\114\101\097\115\101") and (not (string[AldyToikT(12674)](AldyToiP[AldyToikT(12676)])):find(AldyToikT(12663)) and (not (string.lower(AldyToiP[AldyToikT(12676)])):find("\099\111\118\101") and (not (string.lower(AldyToiP[AldyToikT(12676)])):find("\119\111\114\109") and not (string[AldyToikT(12674)](AldyToiP.Name)):find("\109\101\103\097\108\111\100\111\110"))))) then
				table.insert((getgenv())[AldyToikT(12415)], AldyToiP);
			end;
			if not (string[AldyToikT(12674)](AldyToiP.Name)):find("\115\104\097\114\107") and (not (string[AldyToikT(12674)](AldyToiP.Name)):find("\097\100\109\105\110") and (not (string[AldyToikT(12674)](AldyToiP[AldyToikT(12676)])):find("\105\110\099\114\101\097\115\101") and (not (string[AldyToikT(12674)](AldyToiP[AldyToikT(12676)])):find("\097\100\109\105\110") and (not (string[AldyToikT(12674)](AldyToiP.Name)):find(AldyToikT(12735)) and (not (string.lower(AldyToiP.Name)):find("\119\111\114\109") and not (string.lower(AldyToiP[AldyToikT(12676)])):find("\109\101\103\097\108\111\100\111\110")))))) then
				table[AldyToikT(12671)]((getgenv())[AldyToikT(12399)], AldyToiP);
			end;
		end;
	end;
end;
local AldyToigt = AldyToiM.PlayerGui.Inventory[AldyToikT(12426)].Content[AldyToikT(12254)][AldyToikT(12641)];
local function AldyToiRt(AldyToiP)
	local AldyToir = AldyToiY:FindFirstChild(AldyToikT(12645));
	if not AldyToir then
		return nil;
	end;
	local AldyToiu = AldyToiP or AldyToikT(12589);
	AldyToiu = (AldyToiu:gsub("\037\115\042\037\098\040\041", "")):gsub("\094\037\115\042\040\046-\041\037\115\042\036", AldyToikT(12373));
	local AldyToiy = string.lower(AldyToiu);
	local AldyToii, AldyToiH = nil, 0;
	for AldyToiP, AldyToir in ipairs(AldyToir:GetChildren()) do
		if AldyToir:IsA(AldyToikT(12506)) then
			local AldyToiP = string[AldyToikT(12674)](AldyToir.Name);
			if AldyToiy:find(AldyToiP, 1, true) then
				if #AldyToir.Name > AldyToiH then
					AldyToiH = #AldyToir.Name;
					AldyToii = AldyToir;
				end;
			end;
		end;
	end;
	if AldyToii then
		return AldyToii;
	end;
	for AldyToiP, AldyToir in ipairs(AldyToir:GetChildren()) do
		if AldyToir:IsA(AldyToikT(12506)) then
			local AldyToiP, AldyToiu = pcall(require, AldyToir);
			if AldyToiP and (type(AldyToiu) == "\116\097\098\108\101" and (AldyToiu.Data and type(AldyToiu.Data[AldyToikT(12676)]) == AldyToikT(12591))) then
				local AldyToiP = AldyToiu.Data[AldyToikT(12676)];
				local AldyToii = (AldyToiP:gsub("\037\115\042\037\098\040\041", "")):gsub("\094\037\115\042\040\046-\041\037\115\042\036", AldyToikT(12373));
				if string.lower(AldyToii) == AldyToiy or string[AldyToikT(12674)](AldyToiP) == AldyToiy then
					return AldyToir;
				end;
			end;
		end;
	end;
	return nil;
end;
local function AldyToiwt(AldyToiP, AldyToir)
	if AldyToiP:FindFirstChild("\083\101\108\108\080\114\105\099\101\076\097\098\101\108") then
		AldyToiP[AldyToikT(12803)].Text = "\036 " .. tostring(AldyToir);
		return;
	end;
	local AldyToiu = Instance[AldyToikT(12526)](AldyToikT(12719));
	AldyToiu.Name = AldyToikT(12803);
	AldyToiu[AldyToikT(12828)] = AldyToikT(12340) .. tostring(AldyToir);
	AldyToiu[AldyToikT(12794)] = UDim2[AldyToikT(12526)](1, 0, 0, 24);
	AldyToiu.Position = UDim2[AldyToikT(12526)](0, 0, 0, AldyToiP[AldyToikT(12563)][AldyToikT(12350)][AldyToikT(12420)] + 2);
	AldyToiu[AldyToikT(12256)] = 1;
	AldyToiu.TextColor3 = Color3[AldyToikT(12825)](255, 215, 0);
	AldyToiu[AldyToikT(12363)] = Enum.Font.GothamBold;
	AldyToiu[AldyToikT(12696)] = true;
	AldyToiu[AldyToikT(12407)] = AldyToiP;
	local AldyToiy = Instance[AldyToikT(12526)](AldyToikT(12290));
	AldyToiy.Thickness = 2;
	AldyToiy[AldyToikT(12358)] = Color3.fromRGB(0, 0, 0);
	AldyToiy.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual;
	AldyToiy[AldyToikT(12407)] = AldyToiu;
end;
local AldyToiAt = {};
(getgenv()).Tabs.Buy_Weather:CreateDropdown({
	[AldyToikT(12676)] = AldyToikT(12439),
	[AldyToikT(12349)] = (function()
		local AldyToiP = {};
		for AldyToir, AldyToiu in ipairs((getgenv()).weathersNoShark) do
			table[AldyToikT(12671)](AldyToiP, AldyToiu[AldyToikT(12676)]);
		end;
		return AldyToiP;
	end)(),
	MultipleOptions = true,
	CurrentOption = {},
	Callback = function(AldyToiP)
		AldyToiAt = AldyToiP;
	end,
});
local function AldyToiEt(AldyToiP)
	task.spawn(function()
		while (getgenv())[AldyToikT(12430)].autoBuyWeather do
			if #AldyToiAt == 0 then
				task[AldyToikT(12601)](1);
			else
				for AldyToiP, AldyToir in ipairs(AldyToiAt) do
					pcall(function()
						AldyToiY.Packages._Index[AldyToikT(12270)].net[AldyToikT(12623)]:InvokeServer(AldyToir);
					end);
					task[AldyToikT(12601)](.1);
				end;
				task.wait(.5);
			end;
			task.wait(200);
		end;
	end);
end;
(getgenv()).Tabs.Buy_Weather:CreateToggle({
	Name = "\240\159\140\128 \065\117\116\111 \066\117\121 \083\101\108\101\099\116\101\100 \087\101\097\116\104\101\114\040\115\041",
	[AldyToikT(12801)] = false,
	Flag = AldyToikT(12532),
	Callback = function(AldyToiP)
		(getgenv()).toggleState[AldyToikT(12820)] = AldyToiP;
		if AldyToiP then
			if #AldyToiAt == 0 then
				AldyToia:Notify({ Title = AldyToikT(12253), [AldyToikT(12603)] = AldyToikT(12285), Duration = 1 });
			else
				AldyToia:Notify({ [AldyToikT(12577)] = "\065\117\116\111 \087\101\097\116\104\101\114", [AldyToikT(12603)] = AldyToikT(12590), [AldyToikT(12736)] = 1 });
			end;
			AldyToiEt(true);
		else
			AldyToiEt(false);
			(getgenv())[AldyToikT(12430)][AldyToikT(12820)] = false;
			AldyToia:Notify({ Title = AldyToikT(12253), [AldyToikT(12603)] = "\083\116\111\112\112\101\100 \065\117\116\111 \066\117\121\105\110\103", [AldyToikT(12736)] = 1 });
		end;
	end,
});
for AldyToiP, AldyToir in ipairs((getgenv()).weathers) do
	(getgenv()).Tabs.Buy_Weather:CreateButton({ [AldyToikT(12676)] = AldyToir[AldyToikT(12676)] .. AldyToikT(12650), Callback = function()
			pcall(function()
				AldyToiY[AldyToikT(12639)][AldyToikT(12561)][AldyToikT(12270)].net[AldyToikT(12623)]:InvokeServer(AldyToir.Name);
			end);
		end });
end;
(getgenv()).ShowPriceToggle = (getgenv()).Tabs.AutoSellTab:CreateToggle({
		Name = AldyToikT(12767),
		CurrentValue = false,
		Flag = "\112\114\105\099\101\086\097\108\117\101",
		[AldyToikT(12813)] = function(AldyToiP)
			(getgenv())[AldyToikT(12430)].priceValue = AldyToiP;
			if AldyToiP then
				AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12406), Content = "\072\097\114\103\097 \073\107\097\110 \100\105 \073\110\118\101\110\116\111\114\121 \097\107\097\110 \100\105\116\097\109\112\105\108\107\097\110 \100\105 \098\097\119\097\104 \110\097\109\097 \105\107\097\110", [AldyToikT(12736)] = 1 });
			end;
		end,
	});
(getgenv()).Tabs[AldyToikT(12709)]:CreateParagraph({ Title = AldyToikT(12690), Content = "\070\105\115\104 \119\105\108\108 \098\101 \115\111\108\100 \097\117\116\111\109\097\116\105\099\097\108\108\121 \111\110\099\101 \116\104\101 \110\117\109\098\101\114 \111\102 \115\117\099\099\101\115\115\102\117\108\108\121 \099\097\117\103\104\116 \102\105\115\104 \114\101\097\099\104\101\115 \116\104\101 \105\110\112\117\116 \116\104\114\101\115\104\111\108\100\046" });
(getgenv()).AutoSellToggle = (getgenv())[AldyToikT(12613)].AutoSellTab:CreateToggle({
		Name = AldyToikT(12809),
		[AldyToikT(12801)] = false,
		[AldyToikT(12283)] = AldyToikT(12352),
		[AldyToikT(12813)] = function(AldyToiP)
			(getgenv())[AldyToikT(12430)].AutoSell = AldyToiP;
		end,
	});
(getgenv())[AldyToikT(12613)].AutoSellTab:CreateInput({
	Name = AldyToikT(12482),
	[AldyToikT(12740)] = AldyToikT(12546),
	[AldyToikT(12283)] = "\065\117\116\111\083\101\108\108\084\104\114\101\115\104\111\108\100",
	RemoveTextAfterFocusLost = false,
	Callback = function(AldyToiP)
		local AldyToir = tonumber(AldyToiP);
		if AldyToir then
			AldyToid = AldyToir;
			AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12343), Content = "\073\107\097\110 \097\107\097\110 \100\105\106\117\097\108 \111\116\111\109\097\116\105\115 \115\097\097\116 \106\117\109\108\097\104 \109\101\110\099\097\112\097\105 " .. AldyToid, Duration = 1 });
		else
			AldyToia:Notify({ Title = AldyToikT(12706), Content = AldyToikT(12324), Duration = 1 });
		end;
	end,
});
(getgenv())[AldyToikT(12613)].AutoSellTab:CreateParagraph({ [AldyToikT(12577)] = AldyToikT(12557), [AldyToikT(12603)] = AldyToikT(12619) });
(getgenv())[AldyToikT(12560)] = (getgenv()).Tabs[AldyToikT(12709)]:CreateToggle({
		Name = AldyToikT(12815),
		[AldyToikT(12801)] = false,
		[AldyToikT(12283)] = "\065\117\116\111\083\101\108\108\066\080",
		[AldyToikT(12813)] = function(AldyToiP)
			(getgenv()).toggleState[AldyToikT(12313)] = AldyToiP;
		end,
	});
(getgenv())[AldyToikT(12613)].AutoSellTab:CreateInput({
	Name = AldyToikT(12721),
	[AldyToikT(12740)] = "\068\101\102\097\117\108\116\058 \053\048\048\048",
	[AldyToikT(12283)] = AldyToikT(12338),
	[AldyToikT(12441)] = false,
	Callback = function(AldyToiP)
		local AldyToir = tonumber(AldyToiP);
		if AldyToir then
			AldyToiR5 = AldyToir;
			AldyToia:Notify({ Title = "\084\104\114\101\115\104\111\108\100 \066\080 \068\105\112\101\114\098\097\114\117\105", [AldyToikT(12603)] = AldyToikT(12485) .. AldyToiR5, Duration = 1 });
		else
			AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12706), Content = "\077\097\115\117\107\107\097\110 \097\110\103\107\097\044 \098\117\107\097\110 \116\101\107\115\046", Duration = 1 });
		end;
	end,
});
(getgenv())[AldyToikT(12613)][AldyToikT(12796)]:CreateParagraph({ Title = AldyToikT(12411), Content = AldyToikT(12747) });
(getgenv()).MaxRodBaitToggle = (getgenv()).Tabs.PlayerSetTab:CreateToggle({
		Name = AldyToikT(12757),
		[AldyToikT(12801)] = false,
		Flag = AldyToikT(12677),
		[AldyToikT(12813)] = function(AldyToiP)
			if AldyToiP then
				AldyToiut();
			end;
		end,
	});
local function AldyToimt(AldyToiP)
	local AldyToir = AldyToiM[AldyToikT(12391)]:WaitForChild(AldyToikT(12369));
	local AldyToiu = AldyToir:WaitForChild(AldyToikT(12468));
	for AldyToir, AldyToiu in ipairs(AldyToiu:GetChildren()) do
		if AldyToiu:IsA("\071\117\105\079\098\106\101\099\116") then
			AldyToiu.Visible = AldyToiP;
		end;
	end;
end;
(getgenv()).Tabs[AldyToikT(12796)]:CreateToggle({
	[AldyToikT(12676)] = "\083\104\111\119 \067\097\117\103\104\116 \078\111\116\105\102\105\099\097\116\105\111\110",
	[AldyToikT(12801)] = false,
	Flag = "\067\097\117\103\104\116\078\111\116\105\102\105\099\097\116\105\111\110",
	Callback = function(AldyToiP)
		AldyToimt(AldyToiP);
	end,
});
local AldyToiFt = nil;
local function AldyToixt(AldyToiP)
	if AldyToiP then
		local AldyToiP = AldyToiu:WaitForChild("\067\104\097\114\097\099\116\101\114\115", 5);
		local AldyToir = AldyToiP:FindFirstChild(AldyToiy[AldyToikT(12676)]);
		if not AldyToir then
			return;
		end;
		local AldyToii = AldyToir:FindFirstChild(AldyToikT(12688));
		if not AldyToii then
			return;
		end;
		AldyToiFt = Instance[AldyToikT(12526)]("\080\097\114\116");
		AldyToiFt.Anchored = true;
		AldyToiFt[AldyToikT(12794)] = Vector3.new(10, 1, 10);
		AldyToiFt[AldyToikT(12452)] = 1;
		AldyToiFt[AldyToikT(12397)] = true;
		AldyToiFt[AldyToikT(12676)] = AldyToikT(12291);
		AldyToiFt.Parent = AldyToiu;
		task[AldyToikT(12322)](function()
			while AldyToiFt and AldyToiFt.Parent do
				pcall(function()
					AldyToiFt.Position = AldyToii.Position - Vector3[AldyToikT(12526)](0, 3.5, 0);
				end);
				task.wait(.1);
			end;
		end);
	else
		if AldyToiFt then
			AldyToiFt:Destroy();
			AldyToiFt = nil;
		end;
	end;
end;
(getgenv()).floatToggle = (getgenv()).Tabs.PlayerSetTab:CreateToggle({
		[AldyToikT(12676)] = "\240\159\140\138 \070\108\111\097\116 \111\110 \087\097\116\101\114",
		[AldyToikT(12801)] = false,
		[AldyToikT(12283)] = AldyToikT(12331),
		Callback = function(AldyToiP)
			AldyToixt(AldyToiP);
		end,
	});
(getgenv())[AldyToikT(12613)].PlayerSetTab:CreateToggle({
	Name = AldyToikT(12273),
	CurrentValue = true,
	Flag = AldyToikT(12655),
	Callback = function(AldyToiP)
		pcall(function()
			AldyToir:Set3dRenderingEnabled(AldyToiP);
		end);
	end,
});
(getgenv()).toggleAnimation = (getgenv()).Tabs[AldyToikT(12796)]:CreateToggle({
		Name = "\083\107\105\112 \070\105\115\104\105\110\103 \065\110\105\109\097\116\105\111\110",
		[AldyToikT(12801)] = false,
		Flag = AldyToikT(12726),
		Callback = function(AldyToiP)
			(getgenv())[AldyToikT(12430)].fishingAnimation = AldyToiP;
		end,
	});
(getgenv())[AldyToikT(12262)] = {
		[AldyToikT(12427)] = false,
		[AldyToikT(12366)] = require((game:GetService("\082\101\112\108\105\099\097\116\101\100\083\116\111\114\097\103\101"))[AldyToikT(12359)][AldyToikT(12366)]),
		OriginalPlay = nil,
		OriginalStop = nil,
	};
local AldyToiot = { enabled = false, position = nil };
(getgenv())[AldyToikT(12262)][AldyToikT(12606)] = function()
		local AldyToiP = (getgenv())[AldyToikT(12262)];
		if not AldyToiP[AldyToikT(12712)] then
			AldyToiP.OriginalPlay = AldyToiP.CutsceneController.Play;
		end;
		if not AldyToiP[AldyToikT(12392)] then
			AldyToiP.OriginalStop = AldyToiP[AldyToikT(12366)][AldyToikT(12451)];
		end;
	end;
(getgenv()).Tabs.PlayerSetTab:CreateParagraph({ Title = AldyToikT(12453), [AldyToikT(12603)] = AldyToikT(12837) });
(getgenv())[AldyToikT(12613)][AldyToikT(12796)]:CreateToggle({ Name = "\076\111\099\107 \080\108\097\121\101\114 \080\111\115\105\116\105\111\110", [AldyToikT(12801)] = false, Callback = function(AldyToiP)
		AldyToiot[AldyToikT(12797)] = AldyToiP;
		if not AldyToiP then
			AldyToiot.position = nil;
		elseif (getgenv()).toggleState[AldyToikT(12810)] and (AldyToiM[AldyToikT(12536)] and AldyToiM.Character.PrimaryPart) then
			AldyToiot[AldyToikT(12400)] = AldyToiM[AldyToikT(12536)][AldyToikT(12297)].CFrame;
		end;
	end });
task[AldyToikT(12322)](function()
	while task.wait() do
		if AldyToiot.enabled and (AldyToiot[AldyToikT(12400)] and (AldyToiM.Character and AldyToiM.Character.PrimaryPart)) then
			AldyToiM.Character[AldyToikT(12297)][AldyToikT(12431)] = AldyToiot.position;
		end;
	end;
end);
(getgenv()).Tabs[AldyToikT(12796)]:CreateToggle({
	[AldyToikT(12676)] = "\065\117\116\111 \083\097\118\101 \038 \082\101\115\116\111\114\101 \076\097\115\116 \080\111\115\105\116\105\111\110",
	CurrentValue = false,
	[AldyToikT(12283)] = "\065\117\116\111\083\097\118\101\080\111\115\105\116\105\111\110",
	Callback = function(AldyToiP)
		(getgenv()).AutoSaveEnabled = AldyToiP;
	end,
});
local AldyToiBt = require(AldyToiY.Modules.GuiControl);
(getgenv())[AldyToikT(12262)][AldyToikT(12418)] = function()
		local AldyToiP = (getgenv()).CutsceneManager;
		if AldyToiP.Disabled then
			return;
		end;
		AldyToiP[AldyToikT(12427)] = true;
		AldyToiP[AldyToikT(12606)]();
		AldyToiP[AldyToikT(12366)][AldyToikT(12383)] = function(AldyToiP, ...)
				local AldyToir = require(AldyToiY[AldyToikT(12800)][AldyToikT(12693)]);
				local AldyToiu = game:GetService(AldyToikT(12642));
				local AldyToiy = require(AldyToiY.Controllers.QuestController);
				AldyToir:SetHUDVisibility(true);
				AldyToiu.Enabled = true;
				if AldyToiy:IsEnabled() == false then
					AldyToiy:SetEnabled(true);
				end;
			end;
		AldyToiP[AldyToikT(12366)].Stop = function(...)
				AldyToiP.OriginalStop(...);
			end;
	end;
(getgenv())[AldyToikT(12262)][AldyToikT(12754)] = function()
		local AldyToiP = (getgenv())[AldyToikT(12262)];
		if not AldyToiP[AldyToikT(12427)] then
			return;
		end;
		AldyToiP[AldyToikT(12427)] = false;
		AldyToiP[AldyToikT(12606)]();
		AldyToiP.CutsceneController[AldyToikT(12383)] = AldyToiP[AldyToikT(12712)];
		AldyToiP[AldyToikT(12366)].Stop = AldyToiP[AldyToikT(12392)];
	end;
(getgenv())[AldyToikT(12613)].PlayerSetTab:CreateParagraph({ Title = "\067\117\116\115\099\101\110\101 \097\100\097\108\097\104 \097\110\105\109\097\115\105 \107\101\116\105\107\097 \109\101\110\100\097\112\097\116\107\097\110 \084\105\101\114 \077\121\116\104\105\099 \097\116\097\117 \083\069\067\082\069\084", Content = "\065\107\116\105\102\107\097\110 \116\111\103\103\108\101 \117\110\116\117\107 \109\101\109\097\116\105\107\097\110 \097\110\105\109\097\115\105\047\099\117\116\115\099\101\110\101" });
(getgenv()).Tabs[AldyToikT(12796)]:CreateToggle({
	Name = "\077\097\116\105\107\097\110 \067\117\116\115\099\101\110\101 \047 \065\110\105\109\097\115\105",
	CurrentValue = false,
	Flag = "\084\111\103\103\108\101\067\117\116\115\099\101\110\101",
	[AldyToikT(12813)] = function(AldyToiP)
		if AldyToiP then
			(getgenv())[AldyToikT(12262)][AldyToikT(12418)]();
		else
			(getgenv()).CutsceneManager[AldyToikT(12754)]();
		end;
	end,
});
(getgenv())[AldyToikT(12527)] = (getgenv())[AldyToikT(12527)] or nil;
(getgenv())[AldyToikT(12718)] = (getgenv())[AldyToikT(12718)] or false;
local AldyToiat = false;
(getgenv()).autoMegaHandler = function()
		task[AldyToikT(12322)](function()
			while task.wait(4) do
				if (getgenv())[AldyToikT(12718)] then
					local AldyToiP = AldyToiu:FindFirstChild("\033\033\033 \077\069\078\085 \082\073\078\071\083");
					local AldyToir = nil;
					if AldyToiP then
						for AldyToiP, AldyToiu in ipairs(AldyToiP:GetChildren()) do
							if AldyToiu.Name == "\080\114\111\112\115" then
								local AldyToiP = AldyToiu:FindFirstChild("\077\101\103\097\108\111\100\111\110 \072\117\110\116");
								if AldyToiP then
									for AldyToiP, AldyToiu in ipairs(AldyToiP:GetChildren()) do
										if AldyToiu:IsA(AldyToikT(12822)) then
											AldyToir = AldyToiu[AldyToikT(12464)];
											break;
										end;
									end;
								end;
							end;
						end;
					end;
					local AldyToii = AldyToiu.Characters:FindFirstChild(AldyToiy.Name);
					local AldyToiH = AldyToii and AldyToii:FindFirstChild(AldyToikT(12688));
					if AldyToir and AldyToiH then
						AldyToixt(true);
						AldyToiat = true;
						local AldyToiP = (AldyToiH[AldyToikT(12464)] - AldyToir).Magnitude;
						if not (getgenv())[AldyToikT(12456)] then
							(getgenv()).savedCFrame = AldyToiH[AldyToikT(12431)];
						end;
						if AldyToiH.Anchored then
							AldyToiH[AldyToikT(12265)] = false;
							task[AldyToikT(12601)](.1);
						end;
						if AldyToiP > 75 then
							AldyToiH[AldyToikT(12431)] = CFrame[AldyToikT(12526)](AldyToir + Vector3[AldyToikT(12526)](20, 30, 0));
							if AldyToiot.enabled then
								AldyToiot.position = AldyToiH.CFrame;
							end;
						end;
						task.wait(1);
						if not (getgenv())[AldyToikT(12430)][AldyToikT(12810)] then
							(getgenv()).toggleState[AldyToikT(12810)] = true;
							(getgenv())[AldyToikT(12697)]:Set(true);
							(getgenv()).floatToggle:Set(true);
							AldyToiGt(true);
						end;
					else
						if (getgenv())[AldyToikT(12456)] and AldyToiH then
							AldyToiH.CFrame = (getgenv()).savedCFrame;
							(getgenv()).savedCFrame = nil;
							AldyToiat = false;
						end;
					end;
				end;
			end;
		end);
	end;
(getgenv()).autoMegaHandler();
(getgenv()).Tabs.EventTab:CreateToggle({
	Name = AldyToikT(12493),
	[AldyToikT(12801)] = false,
	Flag = "\065\117\116\111\077\101\103\097\108\111\100\111\110",
	[AldyToikT(12813)] = function(AldyToiP)
		(getgenv())[AldyToikT(12718)] = AldyToiP;
	end,
});
local AldyToidt = AldyToig:WaitReplion("\069\118\101\110\116\115");
local AldyToist = {
		"\065\100\109\105\110 - \066\108\097\099\107 \072\111\108\101",
		AldyToikT(12786),
		AldyToikT(12819),
		"\065\100\109\105\110 - \083\104\111\099\107\101\100",
		"\071\104\111\115\116 \083\104\097\114\107 \072\117\110\116",
		AldyToikT(12382),
		"\083\104\097\114\107 \072\117\110\116",
		"\087\111\114\109 \072\117\110\116",
	};
local AldyToiNt = AldyToiM[AldyToikT(12536)] and (AldyToiM[AldyToikT(12536)]:FindFirstChild(AldyToikT(12688)) and AldyToiM[AldyToikT(12536)].HumanoidRootPart[AldyToikT(12431)]) or nil;
local AldyToipt = nil;
local AldyToiIt = {};
local AldyToiZt = false;
(getgenv()).EventData = (getgenv()).EventData or {};
(getgenv())[AldyToikT(12649)][AldyToikT(12525)] = {};
(getgenv()).EventData.dropdown = nil;
(getgenv())[AldyToikT(12723)] = function()
		(getgenv())[AldyToikT(12649)][AldyToikT(12525)] = {};
		local AldyToiP = nil;
		local AldyToir = AldyToiu:FindFirstChild("\033\033\033 \077\069\078\085 \082\073\078\071\083");
		if AldyToir then
			for AldyToiP, AldyToir in ipairs(AldyToir:GetChildren()) do
				if AldyToir[AldyToikT(12676)] == "\080\114\111\112\115" then
					for AldyToiP, AldyToir in ipairs(AldyToir:GetChildren()) do
						if AldyToir:IsA(AldyToikT(12660)) then
							local AldyToiP = AldyToir.PrimaryPart or AldyToir:FindFirstChildWhichIsA(AldyToikT(12822));
							if AldyToiP and not (string.lower(AldyToir.Name)):find(AldyToikT(12542)) then
								table[AldyToikT(12671)]((getgenv())[AldyToikT(12649)][AldyToikT(12525)], { name = AldyToir[AldyToikT(12676)], [AldyToikT(12400)] = AldyToiP.Position });
							end;
						elseif AldyToir:IsA("\066\097\115\101\080\097\114\116") then
							if not (string[AldyToikT(12674)](AldyToir.Name)):find("\103\108\111\119") then
								table.insert((getgenv()).EventData[AldyToikT(12525)], { [AldyToikT(12296)] = AldyToir.Name, [AldyToikT(12400)] = AldyToir[AldyToikT(12464)] });
							end;
						end;
					end;
				end;
			end;
		end;
		local AldyToii = { AldyToikT(12715) };
		for AldyToiP, AldyToir in ipairs((getgenv())[AldyToikT(12649)][AldyToikT(12525)]) do
			table[AldyToikT(12671)](AldyToii, AldyToir.name);
		end;
		if #(getgenv()).EventData[AldyToikT(12525)] == 0 then
			AldyToii = { "\078\111 \101\118\101\110\116\115 \102\111\117\110\100" };
		end;
		if (getgenv())[AldyToikT(12649)].dropdown then
			(getgenv()).EventData[AldyToikT(12444)]:Set(AldyToii);
		else
			(getgenv())[AldyToikT(12649)][AldyToikT(12444)] = (getgenv())[AldyToikT(12613)][AldyToikT(12465)]:CreateDropdown({
					[AldyToikT(12676)] = AldyToikT(12275),
					[AldyToikT(12349)] = AldyToii,
					[AldyToikT(12644)] = "\083\101\108\101\099\116 \069\118\101\110\116",
					[AldyToikT(12793)] = false,
					Callback = function(AldyToiP)
						local AldyToir = type(AldyToiP) == "\116\097\098\108\101" and AldyToiP[1] or AldyToiP;
						if not AldyToir or AldyToir == "\083\101\108\101\099\116 \069\118\101\110\116" or AldyToir == AldyToikT(12498) then
							return;
						end;
						for AldyToiP, AldyToii in ipairs((getgenv()).EventData.eventList) do
							if AldyToii.name == AldyToir then
								local AldyToiP = AldyToiu[AldyToikT(12734)]:FindFirstChild(AldyToiy.Name);
								local AldyToir = AldyToiP and AldyToiP:FindFirstChild(AldyToikT(12688));
								if AldyToir then
									(getgenv())[AldyToikT(12622)]:Set(true);
									if AldyToir.Anchored then
										AldyToir.Anchored = false;
										task.wait(.1);
									end;
									AldyToir.CFrame = CFrame.new(AldyToii[AldyToikT(12400)] + Vector3.new(0, 42, 0));
									if AldyToiot[AldyToikT(12797)] then
										AldyToiot[AldyToikT(12400)] = AldyToir[AldyToikT(12431)];
									end;
								else
									AldyToia:Notify({ Title = "\226\157\140 \084\101\108\101\112\111\114\116 \070\097\105\108\101\100", Content = AldyToikT(12251) .. AldyToii.name, [AldyToikT(12736)] = 1 });
								end;
								break;
							end;
						end;
					end,
				});
		end;
	end;
(getgenv())[AldyToikT(12613)].EventTab:CreateButton({ Name = AldyToikT(12409), [AldyToikT(12813)] = function()
		(getgenv())[AldyToikT(12723)]();
		AldyToia:Notify({ [AldyToikT(12577)] = "\082\101\102\114\101\115\104\101\100", [AldyToikT(12603)] = "\069\118\101\110\116 \108\105\115\116 \104\097\115 \098\101\101\110 \114\101\102\114\101\115\104\101\100\046", [AldyToikT(12736)] = 1 });
	end });
(getgenv()).updateEventDropdown();
local AldyToiVt = {
		AldyToikT(12382),
		"\065\100\109\105\110 \069\118\101\110\116",
		AldyToikT(12378),
		"\087\111\114\109 \072\117\110\116",
		"\083\104\097\114\107 \072\117\110\116",
		"\071\104\111\115\116 \083\104\097\114\107 \072\117\110\116",
		AldyToikT(12646),
		AldyToikT(12528),
		AldyToikT(12596),
	};
local AldyToift = {
		[AldyToikT(12797)] = false,
		selectedEvents = {},
		originalPosition = nil,
		platform = nil,
		[AldyToikT(12548)] = false,
		isAtEvent = false,
		[AldyToikT(12832)] = nil,
	};
local AldyToiCt = (getgenv()).Tabs.EventTab:CreateLabel(AldyToikT(12816));
local function AldyToiOt(AldyToiP)
	local AldyToir = AldyToiu:FindFirstChild("\033\033\033 \077\069\078\085 \082\073\078\071\083");
	if not AldyToir then
		return nil;
	end;
	local AldyToiy = AldyToiP:lower();
	local AldyToii = nil;
	for AldyToiP, AldyToir in ipairs(AldyToir:GetChildren()) do
		if AldyToir[AldyToikT(12676)] == AldyToikT(12334) then
			for AldyToiP, AldyToiu in ipairs(AldyToir:GetChildren()) do
				if AldyToiu[AldyToikT(12676)]:lower() == AldyToiy then
					if AldyToiu:IsA("\077\111\100\101\108") then
						local AldyToiP = AldyToiu[AldyToikT(12297)] or AldyToiu:FindFirstChildWhichIsA(AldyToikT(12822));
						if AldyToiP then
							return AldyToiP;
						else
 
						end;
					elseif AldyToiu:IsA(AldyToikT(12822)) then
						return AldyToiu;
					end;
				end;
				for AldyToiP, AldyToiu in ipairs(AldyToiu:GetDescendants()) do
					if AldyToiu:IsA("\084\101\120\116\076\097\098\101\108") then
						if AldyToiu.Text:lower() == AldyToiy then
							local AldyToiP = AldyToiu;
							while AldyToiP and AldyToiP ~= AldyToir do
								if AldyToiP:IsA(AldyToikT(12822)) then
									return AldyToiP;
								end;
								AldyToiP = AldyToiP[AldyToikT(12407)];
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	return nil;
end;
local AldyToict = (getgenv())[AldyToikT(12613)].EventTab:CreateDropdown({
		Name = "\083\101\108\101\099\116 \069\118\101\110\116\115",
		[AldyToikT(12349)] = AldyToiVt,
		[AldyToikT(12644)] = {},
		[AldyToikT(12302)] = true,
		Flag = "\069\118\101\110\116\077\117\108\116\105\068\114\111\112\100\111\119\110",
		Callback = function(AldyToiP)
			AldyToift.selectedEvents = AldyToiP;
		end,
	});
local AldyToizt = (getgenv()).Tabs.EventTab:CreateToggle({
		[AldyToikT(12676)] = AldyToikT(12300),
		CurrentValue = false,
		[AldyToikT(12283)] = AldyToikT(12405),
		Callback = function(AldyToiP)
			AldyToift[AldyToikT(12797)] = AldyToiP;
			if not AldyToiP and AldyToift[AldyToikT(12806)] then
				if AldyToiM and (AldyToiM[AldyToikT(12536)] and (AldyToiM[AldyToikT(12536)].PrimaryPart and AldyToift.originalPosition)) then
					local AldyToiP = AldyToiM[AldyToikT(12536)].PrimaryPart;
					AldyToiP[AldyToikT(12431)] = AldyToift.originalPosition;
				end;
				AldyToift.isAtEvent = false;
				AldyToiCt:Set("\087\097\105\116\105\110\103 \102\111\114 \101\118\101\110\116\046\046\046");
			end;
		end,
	});
task[AldyToikT(12322)](function()
	while task[AldyToikT(12601)](5) do
		local AldyToiP = AldyToiM[AldyToikT(12536)].PrimaryPart;
		local AldyToir = nil;
		for AldyToiP, AldyToiu in ipairs(AldyToift.selectedEvents) do
			local AldyToiy = AldyToiOt(AldyToiu);
			if AldyToiy then
				AldyToir = AldyToiy;
				AldyToift[AldyToikT(12832)] = AldyToiu;
				break;
			end;
		end;
		if AldyToift.enabled and (AldyToir and not AldyToift.isAtEvent) then
			AldyToift[AldyToikT(12806)] = true;
			AldyToixt(true);
			(getgenv())[AldyToikT(12622)]:Set(true);
			if not AldyToift[AldyToikT(12538)] then
				AldyToift.originalPosition = AldyToiP.CFrame;
			end;
			if AldyToiP[AldyToikT(12265)] then
				AldyToiP[AldyToikT(12265)] = false;
				task[AldyToikT(12601)](.1);
			end;
			AldyToiP.CFrame = AldyToir.CFrame * CFrame.new(0, 30, 20);
			if AldyToiot.enabled then
				AldyToiot.position = AldyToiP.CFrame;
			end;
			task.wait(.8);
			AldyToiCt:Set(AldyToikT(12375) .. AldyToift[AldyToikT(12832)]);
			if not (getgenv())[AldyToikT(12430)].bool_autoFish then
				(getgenv()).toggleState.bool_autoFish = true;
				(getgenv())[AldyToikT(12697)]:Set(true);
				(getgenv()).floatToggle:Set(true);
				AldyToiGt(true);
			end;
		elseif not AldyToir and AldyToift.isAtEvent then
			AldyToiP.CFrame = AldyToift[AldyToikT(12538)];
			AldyToift[AldyToikT(12806)] = false;
			AldyToiCt:Set(AldyToikT(12816));
		end;
	end;
end);
local AldyToilt = (getgenv()).Tabs.PlayerSetTab:CreateToggle({
		[AldyToikT(12676)] = "\065\117\116\111\065\099\099\101\112\116\084\114\097\100\101",
		CurrentValue = false,
		Flag = "\065\117\116\111\065\099\099\101\112\116\084\114\097\100\101\084\111\103\103\108\101",
		[AldyToikT(12813)] = function(AldyToiP)
			if AldyToiP then
				AldyToie5(true);
				AldyToiT5();
			else
				AldyToie5(false);
			end;
		end,
	});
(getgenv())[AldyToikT(12667)] = hookmetamethod(game, AldyToikT(12595), newcclosure(function(AldyToiP, ...)
		local AldyToir = getnamecallmethod();
		local AldyToiu = { ... };
		if AldyToir == AldyToikT(12704) and tostring(AldyToiP) == AldyToikT(12492) then
			return nil;
		end;
		return (getgenv()).oldNamecall(AldyToiP, unpack(AldyToiu));
	end));
(getgenv())[AldyToikT(12613)][AldyToikT(12796)]:CreateToggle({
	[AldyToikT(12676)] = "\070\105\115\104\105\110\103 \082\097\100\097\114",
	[AldyToikT(12801)] = false,
	[AldyToikT(12283)] = AldyToikT(12252),
	[AldyToikT(12813)] = function(AldyToiP)
		local AldyToir = require(AldyToiY.Packages.Net);
		local AldyToiu = AldyToir:RemoteFunction("\085\112\100\097\116\101\070\105\115\104\105\110\103\082\097\100\097\114");
		AldyToiu:InvokeServer(AldyToiP);
	end,
});
(getgenv())[AldyToikT(12429)] = (getgenv())[AldyToikT(12429)] or false;
(getgenv())[AldyToikT(12447)] = (getgenv())[AldyToikT(12447)] or {};
local function AldyToibt()
	local AldyToiP = {};
	for AldyToir, AldyToiu in ipairs(AldyToiu:GetChildren()) do
		if string.find(AldyToiu.Name:lower(), AldyToikT(12783)) then
			table.insert(AldyToiP, AldyToiu);
		end;
	end;
	return AldyToiP;
end;
local AldyToiKt = {};
(getgenv()).Tabs[AldyToikT(12796)]:CreateToggle({ Name = AldyToikT(12553), [AldyToikT(12801)] = false, Callback = function(AldyToiP)
		(getgenv()).toggleState.infJump = AldyToiP;
	end });
AldyToii.JumpRequest:Connect(function()
	if (getgenv()).toggleState[AldyToikT(12467)] and (AldyToiy[AldyToikT(12536)] and AldyToiy[AldyToikT(12536)]:FindFirstChildOfClass("\072\117\109\097\110\111\105\100")) then
		(AldyToiy.Character:FindFirstChildOfClass("\072\117\109\097\110\111\105\100")):ChangeState("\074\117\109\112\105\110\103");
	end;
end);
(getgenv()).Tabs.PlayerSetTab:CreateSlider({
	[AldyToikT(12676)] = AldyToikT(12598),
	[AldyToikT(12737)] = { 15, 500 },
	Increment = 5,
	[AldyToikT(12801)] = 15,
	Callback = function(AldyToiP)
		local AldyToir = AldyToiy.Character and AldyToiy[AldyToikT(12536)]:FindFirstChildOfClass(AldyToikT(12814));
		if AldyToir then
			AldyToir[AldyToikT(12353)] = AldyToiP;
		end;
	end,
});
(getgenv())[AldyToikT(12599)] = (getgenv())[AldyToikT(12599)] or {
		["\048\049"] = { [AldyToikT(12296)] = AldyToikT(12424), position = Vector3[AldyToikT(12526)](1014.896, 20.921, 5071.434) },
		["\048\050"] = { [AldyToikT(12296)] = AldyToikT(12344), position = Vector3.new(-3598.539, -279.646, -1634.287) },
		["\048\051"] = { name = "\076\111\115\116 \083\104\111\114\101", [AldyToikT(12400)] = Vector3[AldyToikT(12526)](-3677, 107, -912) },
		["\048\052"] = { [AldyToikT(12296)] = "\070\105\115\104\101\114\109\097\110 \073\115\108\097\110\100", position = Vector3.new(-2.382, 4.5, 2839.47) },
		[AldyToikT(12621)] = { [AldyToikT(12296)] = "\084\114\111\112\105\099\097\108 \071\114\111\118\101", position = Vector3.new(-2051.413, 6.268, 3662) },
		["\048\054"] = { name = AldyToikT(12790), position = Vector3[AldyToikT(12526)](3209.068, -1302.855, 1411.844) },
		[AldyToikT(12249)] = { [AldyToikT(12296)] = AldyToikT(12345), position = Vector3.new(2031.415, 27.397, 1394.621) },
		["\048\056"] = { name = AldyToikT(12306), [AldyToikT(12400)] = Vector3.new(-678.811, 4.935, 708.578) },
		["\048\057"] = { name = "\075\111\104\097\110\097 \086\111\108\099\097\110\111", [AldyToikT(12400)] = Vector3.new(-516.92, 22, 191) },
		["\049\048"] = { [AldyToikT(12296)] = AldyToikT(12576), [AldyToikT(12400)] = Vector3.new(-3667.556, -135.574, -900.99) },
		[AldyToikT(12398)] = { [AldyToikT(12296)] = "\087\101\097\116\104\101\114 \077\097\099\104\105\110\101", [AldyToikT(12400)] = Vector3.new(-1471, -3, 1929) },
		["\049\050"] = { [AldyToikT(12296)] = AldyToikT(12795), position = Vector3[AldyToikT(12526)](1611, 4, 3280) },
		["\049\051"] = { [AldyToikT(12296)] = "\067\111\114\097\108 \082\101\101\102\115", [AldyToikT(12400)] = Vector3[AldyToikT(12526)](-2949.694, 63.25, 2248.52) },
	};
for AldyToiP, AldyToir in pairs((getgenv())[AldyToikT(12599)]) do
	(getgenv()).Tabs[AldyToikT(12626)]:CreateButton({ [AldyToikT(12676)] = AldyToir[AldyToikT(12296)], [AldyToikT(12813)] = function()
			local AldyToiP = AldyToiu.Characters:FindFirstChild(AldyToiy.Name);
			local AldyToii = AldyToiP and AldyToiP:FindFirstChild(AldyToikT(12688));
			if AldyToii then
				AldyToii[AldyToikT(12431)] = CFrame[AldyToikT(12526)](AldyToir[AldyToikT(12400)] + Vector3.new(5, 5, 0));
				AldyToia:Notify({ Title = AldyToikT(12572), Content = "\084\101\108\101\112\111\114\116\101\100 \116\111 " .. AldyToir.name, [AldyToikT(12736)] = 1 });
			else
				AldyToia:Notify({ Title = "\084\101\108\101\112\111\114\116 \070\097\105\108\101\100", [AldyToikT(12603)] = "\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116 \110\111\116 \102\111\117\110\100\033", [AldyToikT(12736)] = 1 });
			end;
		end });
end;
local AldyToiSt = AldyToiY:WaitForChild("\078\080\067");
(getgenv()).Tabs.IslandsTab:CreateSection("\084\101\108\101\112\111\114\116 \084\111 \078\112\099");
for AldyToiP, AldyToir in ipairs(AldyToiSt:GetChildren()) do
	(getgenv()).Tabs.IslandsTab:CreateButton({ [AldyToikT(12676)] = "\084\101\108\101\112\111\114\116 \116\111 \078\080\067\058 " .. AldyToir[AldyToikT(12676)], Callback = function()
			local AldyToiP = AldyToiy.Character;
			local AldyToiu = AldyToiP and AldyToiP:FindFirstChild(AldyToikT(12688));
			if not AldyToiu then
				AldyToia:Notify({ [AldyToikT(12577)] = "\226\157\140 \084\101\108\101\112\111\114\116 \070\097\105\108\101\100", [AldyToikT(12603)] = AldyToikT(12337), Duration = 1 });
				return;
			end;
			local AldyToii, AldyToiH = pcall(function()
					return AldyToir:GetPivot();
				end);
			if AldyToii and typeof(AldyToiH) == AldyToikT(12431) then
				local AldyToiP = AldyToiH[AldyToikT(12594)];
				local AldyToiy = Vector3.new(0, 5, 0) + AldyToiP * 5;
				AldyToiu[AldyToikT(12431)] = AldyToiH + AldyToiy;
				AldyToia:Notify({ [AldyToikT(12577)] = "\226\156\133 \084\101\108\101\112\111\114\116 \083\117\099\099\101\115\115", Content = "\084\101\108\101\112\111\114\116\101\100 \116\111 \078\080\067\058 " .. AldyToir.Name, [AldyToikT(12736)] = 1 });
			else
				AldyToia:Notify({ Title = "\226\157\140 \084\101\108\101\112\111\114\116 \070\097\105\108\101\100", Content = "\087\111\114\108\100\080\105\118\111\116 \110\111\116 \097\118\097\105\108\097\098\108\101 \102\111\114 \078\080\067\058 " .. AldyToir.Name, [AldyToikT(12736)] = 1 });
			end;
		end });
end;
local AldyToiqt = (getgenv())[AldyToikT(12613)].SettingsTab:CreateParagraph({ Title = "\083\101\114\118\101\114 \073\110\102\111", Content = "\080\108\097\121\101\114\115 \105\110 \115\101\114\118\101\114\058 " .. (#AldyToiP:GetPlayers() .. ("\n\080\108\097\099\101\073\100\058 " .. game.PlaceId)) });
local AldyToivt = 0;
local function AldyToikt()
	AldyToivt = 0;
	for AldyToiP, AldyToir in ipairs(AldyToigt:GetChildren()) do
		if AldyToir:FindFirstChild("\073\116\101\109\078\097\109\101") then
			local AldyToiP = AldyToir[AldyToikT(12563)][AldyToikT(12828)];
			local AldyToiu = AldyToiRt(AldyToiP);
			if AldyToiu then
				local AldyToiP, AldyToiy = pcall(require, AldyToiu);
				if AldyToiP and (AldyToiy and (AldyToiy.Data and AldyToiy.SellPrice)) then
					AldyToiwt(AldyToir, AldyToiy[AldyToikT(12662)]);
				end;
				if AldyToiy and (AldyToiy.SellPrice and AldyToiy[AldyToikT(12294)].Type == "\070\105\115\104\101\115") then
					AldyToivt = AldyToivt + AldyToiy.SellPrice;
				end;
			end;
		end;
	end;
	local AldyToiP = (game:GetService("\080\108\097\121\101\114\115")).LocalPlayer;
	local AldyToir = (AldyToiP:WaitForChild(AldyToikT(12391))):WaitForChild(AldyToikT(12641));
	local AldyToiu = AldyToir:WaitForChild("\077\097\105\110");
	local AldyToiy = AldyToiu:WaitForChild("\083\101\108\108\065\108\108");
	local AldyToii = AldyToiy:WaitForChild("\076\097\098\101\108");
	AldyToii.Text = AldyToivt;
end;
if (getgenv()).toggleState.priceValue then
	AldyToikt();
end;
(getgenv())[AldyToikT(12613)].SettingsTab:CreateButton({ [AldyToikT(12676)] = AldyToikT(12680), Callback = function()
		local AldyToiP = string[AldyToikT(12689)](AldyToikT(12305), game.PlaceId, game[AldyToikT(12792)]);
		setclipboard(AldyToiP);
		AldyToia:Notify({ Title = "\076\105\110\107 \083\101\114\118\101\114 \071\097\109\101", [AldyToikT(12603)] = "\076\105\110\107 \115\117\100\097\104 \100\105\099\111\112\121 \107\101 \099\108\105\112\098\111\097\114\100\046", [AldyToikT(12736)] = 1 });
	end });
local AldyToiUt = nil;
local AldyToiXt = (getgenv())[AldyToikT(12613)].SettingsTab:CreateInput({
		Name = "\083\101\114\118\101\114 \076\105\110\107",
		PlaceholderText = AldyToikT(12271),
		RemoveTextAfterFocusLost = false,
		[AldyToikT(12813)] = function(AldyToiP)
			AldyToiUt = AldyToiP;
		end,
	});
(getgenv()).Tabs.SettingsTab:CreateButton({ [AldyToikT(12676)] = "\074\111\105\110 \076\105\110\107", [AldyToikT(12813)] = function()
		local AldyToiP = AldyToiUt;
		if not AldyToiP or AldyToiP == AldyToikT(12589) then
			warn("\076\105\110\107 \107\111\115\111\110\103\033");
			return;
		end;
		if AldyToiP:find("\112\108\097\099\101\073\100\061") and AldyToiP:find("\103\097\109\101\073\110\115\116\097\110\099\101\073\100\061") then
			local AldyToir = AldyToiP:match("\112\108\097\099\101\073\100\061\040\037\100\043\041");
			local AldyToiu = AldyToiP:match(AldyToikT(12805));
			if not AldyToir or not AldyToiu then
				AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12403), [AldyToikT(12603)] = "\071\097\103\097\108 \112\097\114\115\105\110\103 \112\108\097\099\101\073\100 \047 \103\097\109\101\073\110\115\116\097\110\099\101\073\100", Duration = 2 });
				return;
			end;
			AldyToir = tonumber(AldyToir);
			local AldyToii, AldyToiH = pcall(function()
					AldyToiT:TeleportToPlaceInstance(AldyToir, AldyToiu, AldyToiy);
				end);
			if not AldyToii then
				AldyToia:Notify({ [AldyToikT(12577)] = "\084\101\108\101\112\111\114\116 \070\097\105\108\101\100", Content = tostring(AldyToiH), Duration = 2 });
			end;
		elseif AldyToiP:find(AldyToikT(12437)) then
			local AldyToir = AldyToiP:match(AldyToikT(12729));
			local AldyToiu = game[AldyToikT(12320)];
			if not AldyToir then
				AldyToia:Notify({ Title = "\069\114\114\111\114", Content = "\080\114\105\118\097\116\101 \115\101\114\118\101\114 \099\111\100\101 \116\105\100\097\107 \100\105\116\101\109\117\107\097\110", Duration = 2 });
				return;
			end;
			local AldyToii, AldyToiH = pcall(function()
					AldyToiT:TeleportToPrivateServer(AldyToiu, AldyToir, { AldyToiy });
				end);
			if not AldyToii then
				AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12489), Content = tostring(AldyToiH), Duration = 2 });
			end;
		else
			AldyToia:Notify({ Title = "\069\114\114\111\114", Content = AldyToikT(12784), [AldyToikT(12736)] = 2 });
		end;
	end });
task[AldyToikT(12322)](function()
	while task.wait(40) do
		AldyToiqt:Set({ Title = "\083\101\114\118\101\114 \073\110\102\111", Content = AldyToikT(12782) .. (#AldyToiP:GetPlayers() .. ("\n\080\108\097\099\101\073\100\058 " .. game[AldyToikT(12320)])) });
	end;
end);
local AldyToint = {};
local function AldyToijt()
	AldyToint.Terrain = { WaterWaveSize = workspace.Terrain.WaterWaveSize, WaterWaveSpeed = workspace[AldyToikT(12831)][AldyToikT(12380)], WaterReflectance = workspace[AldyToikT(12831)].WaterReflectance };
	AldyToint[AldyToikT(12604)] = {};
	AldyToint.Decals = {};
	AldyToint.Meshes = {};
	for AldyToiP, AldyToir in pairs(game:GetDescendants()) do
		if AldyToir:IsA(AldyToikT(12822)) then
			AldyToint[AldyToikT(12604)][AldyToir] = {
					[AldyToikT(12358)] = AldyToir[AldyToikT(12358)],
					Material = AldyToir[AldyToikT(12724)],
					Reflectance = AldyToir.Reflectance,
					[AldyToikT(12537)] = AldyToir.CastShadow,
					[AldyToikT(12452)] = AldyToir.Transparency,
				};
		elseif AldyToir:IsA(AldyToikT(12708)) or AldyToir:IsA(AldyToikT(12687)) then
			AldyToint.Decals[AldyToir] = { [AldyToikT(12452)] = AldyToir.Transparency, Texture = AldyToir[AldyToikT(12687)] };
		elseif AldyToir:IsA(AldyToikT(12753)) then
			AldyToint[AldyToikT(12365)][AldyToir] = { TextureId = AldyToir.TextureId };
		end;
	end;
end;
local function AldyToiJt()
	AldyToijt();
	local AldyToiP = workspace.Terrain;
	local AldyToir = (game:GetService("\080\108\097\121\101\114\115")).LocalPlayer;
	if sethiddenproperty then
		sethiddenproperty(AldyToiP, "\087\097\116\101\114\087\097\118\101\083\105\122\101", 0);
		sethiddenproperty(AldyToiP, "\087\097\116\101\114\087\097\118\101\083\112\101\101\100", 0);
		sethiddenproperty(AldyToiP, "\087\097\116\101\114\082\101\102\108\101\099\116\097\110\099\101", 0);
	else
		AldyToiP[AldyToikT(12672)] = 0;
		AldyToiP.WaterWaveSpeed = 0;
		AldyToiP.WaterReflectance = 0;
	end;
	for AldyToiP, AldyToiu in pairs(game:GetDescendants()) do
		if AldyToiu:IsA(AldyToikT(12822)) then
			if not (AldyToir and AldyToiu:IsDescendantOf(AldyToir[AldyToikT(12536)])) then
				AldyToiu[AldyToikT(12724)] = Enum[AldyToikT(12724)].SmoothPlastic;
				AldyToiu.Color = Color3[AldyToikT(12825)](120, 120, 120);
				AldyToiu[AldyToikT(12635)] = 0;
				AldyToiu[AldyToikT(12537)] = false;
			end;
		elseif AldyToiu:IsA("\068\101\099\097\108") or AldyToiu:IsA(AldyToikT(12687)) then
			if not (AldyToiu.Name == "\102\097\099\101" and AldyToiu[AldyToikT(12407)]:IsA("\072\101\097\100")) then
				AldyToiu[AldyToikT(12452)] = 1;
				AldyToiu[AldyToikT(12687)] = "";
			end;
		elseif AldyToiu:IsA("\080\097\114\116\105\099\108\101\069\109\105\116\116\101\114") or AldyToiu:IsA(AldyToikT(12707)) or AldyToiu:IsA("\066\101\097\109") then
			AldyToiu[AldyToikT(12360)] = false;
		elseif AldyToiu:IsA("\083\117\114\102\097\099\101\065\112\112\101\097\114\097\110\099\101") then
			AldyToiu:Destroy();
		elseif AldyToiu:IsA(AldyToikT(12753)) then
			AldyToiu[AldyToikT(12530)] = "";
		end;
	end;
	(settings()).Rendering.MeshPartDetailLevel = Enum[AldyToikT(12509)].Level01;
	(settings()).Rendering[AldyToikT(12419)] = Enum.QualityLevel[AldyToikT(12778)];
end;
local function AldyToiht()
	local AldyToiP = workspace.Terrain;
	if AldyToint[AldyToikT(12831)] then
		AldyToiP[AldyToikT(12672)] = AldyToint.Terrain[AldyToikT(12672)];
		AldyToiP[AldyToikT(12380)] = AldyToint.Terrain.WaterWaveSpeed;
		AldyToiP[AldyToikT(12289)] = AldyToint.Terrain.WaterReflectance;
	end;
	for AldyToiP, AldyToir in pairs(AldyToint.Parts) do
		if AldyToiP and AldyToiP.Parent then
			for AldyToir, AldyToiu in pairs(AldyToir) do
				AldyToiP[AldyToir] = AldyToiu;
			end;
		end;
	end;
	for AldyToiP, AldyToir in pairs(AldyToint[AldyToikT(12446)]) do
		if AldyToiP and AldyToiP[AldyToikT(12407)] then
			for AldyToir, AldyToiu in pairs(AldyToir) do
				AldyToiP[AldyToir] = AldyToiu;
			end;
		end;
	end;
	for AldyToiP, AldyToir in pairs(AldyToint[AldyToikT(12365)]) do
		if AldyToiP and AldyToiP.Parent then
			for AldyToir, AldyToiu in pairs(AldyToir) do
				AldyToiP[AldyToir] = AldyToiu;
			end;
		end;
	end;
end;
local function AldyToiLt()
	local AldyToiP = game:GetService(AldyToikT(12421));
	AldyToiP[AldyToikT(12678)] = 0;
	AldyToiP.Brightness = .5;
	AldyToiP.OutdoorAmbient = Color3.fromRGB(10, 10, 10);
	AldyToiP[AldyToikT(12316)] = Color3[AldyToikT(12825)](5, 5, 5);
	AldyToiP.FogStart = 0;
	AldyToiP[AldyToikT(12558)] = 100000;
	AldyToiP:ClearAllChildren();
	local AldyToir = Instance[AldyToikT(12526)]("\083\107\121");
	AldyToir[AldyToikT(12752)] = "";
	AldyToir[AldyToikT(12835)] = AldyToikT(12589);
	AldyToir[AldyToikT(12620)] = AldyToikT(12589);
	AldyToir[AldyToikT(12454)] = AldyToikT(12589);
	AldyToir.SkyboxRt = AldyToikT(12589);
	AldyToir[AldyToikT(12269)] = AldyToikT(12589);
	AldyToir.SunAngularSize = 0;
	AldyToir[AldyToikT(12309)] = 0;
	AldyToir.StarCount = 0;
	AldyToir.Parent = AldyToiP;
end;
local AldyToiWt = false;
(getgenv())[AldyToikT(12613)][AldyToikT(12580)]:CreateToggle({
	Name = "\068\097\114\107 \047 \078\105\103\104\116 \077\111\100\101",
	CurrentValue = false,
	Flag = "\115\101\116\078\105\103\104\116\084\111\103\103\108\101",
	[AldyToikT(12813)] = function(AldyToiP)
		AldyToiWt = AldyToiP;
	end,
});
AldyToir.RenderStepped:Connect(function()
	if AldyToiWt then
		AldyToiLt();
	end;
end);
(getgenv())[AldyToikT(12613)][AldyToikT(12580)]:CreateToggle({
	Name = AldyToikT(12573),
	[AldyToikT(12801)] = false,
	Flag = "\076\111\119\084\101\120\116\117\114\101\084\111\103\103\108\101",
	Callback = function(AldyToiP)
		if AldyToiP then
			AldyToiJt();
		else
			AldyToiht();
		end;
	end,
});
(getgenv()).oldAFKScript = hookmetamethod(game, AldyToikT(12595), newcclosure(function(AldyToiP, ...)
		local AldyToir = getnamecallmethod();
		if AldyToir == "\070\105\114\101\083\101\114\118\101\114" and tostring(AldyToiP) == AldyToikT(12404) then
			return nil;
		end;
		return (getgenv()).oldAFKScript(AldyToiP, ...);
	end));
(getgenv()).antiAfkEnabled = (getgenv())[AldyToikT(12569)] or true;
(getgenv()).afkConnection = (getgenv())[AldyToikT(12458)] or nil;
local AldyToitt = game:GetService(AldyToikT(12443));
AldyToiP[AldyToikT(12817)].Idled:Connect(function()
	AldyToitt:Button2Down(Vector2.new(0, 0), AldyToiu.CurrentCamera.CFrame);
	task[AldyToikT(12601)](1);
	AldyToitt:Button2Up(Vector2.new(0, 0), AldyToiu.CurrentCamera.CFrame);
end);
if AldyToiM and AldyToitt then
	AldyToiM[AldyToikT(12658)]:Connect(function()
		AldyToitt:CaptureController();
		AldyToitt:ClickButton2(Vector2.new());
	end);
end;
(getgenv()).Tabs[AldyToikT(12580)]:CreateButton({ Name = "\240\159\148\129 \082\101\106\111\105\110 \083\101\114\118\101\114", [AldyToikT(12813)] = function()
		AldyToiT:Teleport(game[AldyToikT(12320)], AldyToiy);
	end });
local AldyToiPT = 2;
(getgenv())[AldyToikT(12613)].SettingsTab:CreateInput({
	Name = "\077\105\110\105\109\117\109 \080\108\097\121\101\114\115 \116\111 \074\111\105\110",
	[AldyToikT(12740)] = "\068\101\102\097\117\108\116\058 \050",
	RemoveTextAfterFocusLost = true,
	Callback = function(AldyToiP)
		local AldyToir = tonumber(AldyToiP);
		if AldyToir and AldyToir >= 0 then
			AldyToiPT = AldyToir;
			AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12749), [AldyToikT(12603)] = AldyToikT(12763) .. AldyToir, Duration = 1 });
		else
			AldyToia:Notify({ Title = "\073\110\118\097\108\105\100 \073\110\112\117\116", Content = "\080\108\101\097\115\101 \101\110\116\101\114 \097 \118\097\108\105\100 \110\117\109\098\101\114\046", [AldyToikT(12736)] = 1 });
		end;
	end,
});
(getgenv()).Tabs[AldyToikT(12580)]:CreateButton({ [AldyToikT(12676)] = "\240\159\140\144 \083\101\114\118\101\114 \072\111\112 \040\074\111\105\110 \082\097\110\100\111\109 \083\101\114\118\101\114\041", [AldyToikT(12813)] = function()
		AldyToia:Notify({ [AldyToikT(12577)] = "\083\101\097\114\099\104\105\110\103\046\046\046", Content = AldyToikT(12332), [AldyToikT(12736)] = 2 });
		local AldyToiP = {};
		local AldyToir = "";
		repeat
			local AldyToiu = AldyToikT(12731) .. (game[AldyToikT(12320)] .. (AldyToikT(12368) .. (AldyToir ~= "" and "\038\099\117\114\115\111\114\061" .. AldyToir or "")));
			local AldyToiy, AldyToii = pcall(function()
					return AldyToiH:JSONDecode(game:HttpGet(AldyToiu));
				end);
			if AldyToiy and (AldyToii and AldyToii.data) then
				for AldyToir, AldyToiu in ipairs(AldyToii.data) do
					if AldyToiu[AldyToikT(12518)] < AldyToiu[AldyToikT(12484)] and (AldyToiu.id ~= game.JobId and AldyToiu.playing > AldyToiPT) then
						table[AldyToikT(12671)](AldyToiP, AldyToiu[AldyToikT(12459)]);
					end;
				end;
				AldyToir = AldyToii[AldyToikT(12277)] or AldyToikT(12589);
			else
				AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12643), [AldyToikT(12603)] = AldyToikT(12745), [AldyToikT(12736)] = 1 });
				return;
			end;
		until not AldyToir or #AldyToiP >= 15;
		if #AldyToiP > 0 then
			local AldyToir = AldyToiP[math[AldyToikT(12841)](1, #AldyToiP)];
			AldyToia:Notify({ Title = "\074\111\105\110\105\110\103\046\046\046", [AldyToikT(12603)] = "\084\101\108\101\112\111\114\116\105\110\103 \116\111 \097\110\111\116\104\101\114 \115\101\114\118\101\114\033", [AldyToikT(12736)] = 2 });
			AldyToiT:TeleportToPlaceInstance(game.PlaceId, AldyToir, AldyToiy);
		else
			AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12335), [AldyToikT(12603)] = "\078\111 \097\118\097\105\108\097\098\108\101 \115\101\114\118\101\114 \102\111\117\110\100 \116\111 \104\111\112 \119\105\116\104 \062 " .. (AldyToiPT .. AldyToikT(12495)), [AldyToikT(12736)] = 1 });
		end;
	end });
(getgenv())[AldyToikT(12613)][AldyToikT(12347)]:CreateParagraph({ [AldyToikT(12577)] = "\240\159\142\163 \065\117\116\111 \070\097\114\109 \083\101\116\116\105\110\103\115", [AldyToikT(12603)] = AldyToikT(12584) });
(getgenv()).TeleportPoints = (getgenv()).TeleportPoints or {
		["\070\105\115\104\101\114\109\097\110 \073\115\108\097\110\100"] = { CFrame.new(-65.1821136, 3.53157115, 2775.68311, .33803311, 3.37374004e-08, .941134214, 3.34767392e-09, 1, -3.7050004e-08, -0.941134214, 1.5674738e-08, .33803311) },
		["\067\111\114\097\108 \082\101\101\102\115"] = { CFrame[AldyToikT(12526)](-3118.39624, 2.42531538, 2135.26392, .92336154, -1.0069185e-07, -0.383931547, 8.0607947e-08, 1, -6.84016968e-08, .383931547, 3.22115596e-08, .92336154), CFrame[AldyToikT(12526)](-2965.5708, 22.7500286, 2249.01709, .0730288103, 3.98725897e-09, .997329831, 2.27064021e-08, 1, -5.6605951e-09, -0.997329831, 2.30591581e-08, .0730288103), CFrame[AldyToikT(12526)](-3102.16309, 5.97334528, 2218.88696, .758339584, 8.40698444e-09, -0.651859701, 2.32941257e-08, 1, 3.99960918e-08, .651859701, -4.55151223e-08, .758339584) },
		["\087\101\097\116\104\101\114 \077\097\099\104\105\110\101"] = { CFrame[AldyToikT(12526)](-1459.3772, 14.7103214, 1831.5188, .777951121, 2.52131862e-08, -0.628324807, -5.24126378e-08, 1, -2.47663063e-08, .628324807, 5.21991339e-08, .777951121), CFrame.new(-1521.20862, 2.87499976, 1912.40564, -0.989418149, 1.00299182e-08, -0.14509216, 6.85348089e-09, 1, 2.23923866e-08, .14509216, 2.11610462e-08, -0.989418149), CFrame.new(-1574.57129, 13.1473379, 1920.83826, -0.816545427, -3.39974235e-08, .577281177, -6.96619793e-08, 1, -3.96422877e-08, -0.577281177, -7.25842781e-08, -0.816545427) },
		Sisyphus = { CFrame[AldyToikT(12526)](-3765.69751, -135.074417, -906.893677, .704144239, 3.52946827e-08, -0.710056961, -3.45032909e-08, 1, 1.5490853e-08, .710056961, 1.35915084e-08, .704144239), CFrame.new(-3780.09692, -135.074417, -962.226746, -0.366469413, -5.94525993e-08, -0.930430114, 1.91083362e-08, 1, -7.14241963e-08, .930430114, -4.39537544e-08, -0.366469413) },
		[AldyToikT(12795)] = { CFrame.new(1820.92529, 5.7885952, 3305.04761, -0.290378898, 1.26296209e-08, -0.956911743, -2.8187932e-08, 1, 2.17520597e-08, .956911743, 3.32897017e-08, -0.290378898), CFrame[AldyToikT(12526)](1704.83362, 4.38193512, 3189.80811, .715091407, 8.31226021e-09, .699030936, -3.8851347e-08, 1, 2.78528525e-08, -0.699030936, -4.70756305e-08, .715091407) },
		[AldyToikT(12770)] = { CFrame[AldyToikT(12526)](3272.27344, -1301.35535, 1390.97058, -0.422851175, -5.61508493e-08, -0.906199157, 7.32285486e-08, 1, -9.6132986e-08, .906199157, -1.07009591e-07, -0.422851175) },
		[AldyToikT(12798)] = { CFrame.new(-2126.49707, 53.4868774, 3640.20581, -0.872817099, 4.77880704e-08, .488047391, 7.77828291e-09, 1, -8.40062881e-08, -0.488047391, -6.95259601e-08, -0.872817099) },
		[AldyToikT(12344)] = {
			CFrame.new(-3600.62988, -279.0737, -1692.755, -0.938830554, -1.7142467e-08, .344379485, -1.96833128e-08, 1, -3.8818464e-09, -0.344379485, -1.04229247e-08, -0.938830554),
			CFrame[AldyToikT(12526)](-3625.0708, -279.074219, -1594.57605, .918176472, -3.97606392e-09, -0.396171629, -1.12946204e-08, 1, -3.62128851e-08, .396171629, 3.77244298e-08, .918176472),
			CFrame[AldyToikT(12526)](-3600.72632, -276.06427, -1640.79663, -0.696130812, -6.0491181e-09, .717914939, -1.09490363e-08, 1, -2.19084972e-09, -0.717914939, -9.38559541e-09, -0.696130812),
			CFrame.new(-3548.52222, -269.309845, -1659.26685, .0472991578, -4.08685423e-08, .998880744, -7.68598838e-08, 1, 4.45538149e-08, -0.998880744, -7.88812216e-08, .0472991578),
			CFrame[AldyToikT(12526)](-3581.84155, -279.09021, -1696.15637, -0.999634147, -0.000535600528, -0.0270430837, -0.000448358158, .999994695, -0.00323198596, .0270446707, -0.00321867829, -0.99962908),
			CFrame[AldyToikT(12526)](-3601.34302, -282.790955, -1629.37036, -0.526346684, .00143659476, .850268841, -0.000266355521, .999998271, -0.00185445137, -0.850269973, -0.00120255165, -0.526345372),
			CFrame[AldyToikT(12526)](-3601.52588, -282.991669, -1629.59265, -0.0535041578, -7.48535811e-08, .998567641, 6.44989342e-08, 1, 7.84168677e-08, -0.998567641, 6.86021764e-08, -0.0535041578),
			CFrame[AldyToikT(12526)](-3594.76074, -275.663788, -1642.65515, .992020428, 2.66124651e-08, -0.126077324, -2.72226544e-08, 1, -3.11684589e-09, .126077324, 6.52413412e-09, .992020428),
		},
		["\076\111\115\116 \083\104\111\114\101"] = { CFrame[AldyToikT(12526)](-3686.70557, 50.5551491, -802.862549, .671186864, -1.9727894e-08, .741288185, 8.82212987e-08, 1, -5.32654987e-08, -0.741288185, 1.01148508e-07, .671186864), CFrame[AldyToikT(12526)](-3674.72852, 5.4255538, -860.631531, -0.995413721, 6.02128791e-09, .0956638828, 3.38107586e-09, 1, -2.77609349e-08, -0.0956638828, -2.73101683e-08, -0.995413721) },
		["\075\111\104\097\110\097 \086\111\108\099\097\110\111"] = {
			CFrame.new(-648.832397, 45.2862358, 146.425705, -0.107698888, -2.22477787e-08, .99418354, 2.75738845e-08, 1, 2.53649883e-08, -0.99418354, 3.01452836e-08, -0.107698888),
			CFrame.new(-673.803223, 55.5000572, 183.610779, .122808129, 6.084327e-08, -0.992430449, -9.00719144e-08, 1, 5.01614039e-08, .992430449, 8.32298852e-08, .122808129),
			CFrame.new(-675.741272, 55.5000572, 164.999741, .700404584, -6.1561245e-08, -0.713746011, 7.66120891e-08, 1, -1.10708571e-08, .713746011, -4.69274966e-08, .700404584),
			CFrame.new(-648.186584, 45.7505226, 172.17453, -0.995664299, 3.11417523e-08, .0930196419, 3.00717424e-08, 1, -1.29047226e-08, -0.0930196419, -1.0051509e-08, -0.995664299),
		},
		[AldyToikT(12306)] = { CFrame[AldyToikT(12526)](-658.677429, 20.0969162, 547.795715, .08832293, -2.84166846e-09, -0.996091902, 1.26686484e-08, 1, -1.72949544e-09, .996091902, -1.24663835e-08, .08832293), CFrame.new(-670.144531, 17.2500591, 437.111908, .492469549, -6.58226806e-09, .870329678, 7.17238535e-09, 1, 3.50451845e-09, -0.870329678, 4.5164712e-09, .492469549), CFrame.new(-653.275757, 17.2500591, 490.213684, .223178998, 0, -0.97477746, 0, 1, 0, .97477746, 0, .223178998) },
		[AldyToikT(12686)] = {
			CFrame.new(1066.1864, 57.2025681, 5045.5542, -0.682534158, 1.00865822e-08, .730853677, -5.8900711e-09, 1, -1.93017531e-08, -0.730853677, -1.74788859e-08, -0.682534158),
			CFrame[AldyToikT(12526)](1057.28992, 33.0884132, 5133.79883, .833871782, 5.44149223e-08, .551958203, -6.58184218e-09, 1, -8.86416984e-08, -0.551958203, 7.02829084e-08, .833871782),
			CFrame.new(988.954712, 42.8254471, 5088.71289, -0.849417388, -9.89310394e-08, .527721584, -5.96115086e-08, 1, 9.15179328e-08, -0.527721584, 4.62786431e-08, -0.849417388),
			CFrame[AldyToikT(12526)](1006.70685, 17.2302666, 5092.14844, -0.989664078, 5.6538525e-09, -0.143405005, 9.14879283e-09, 1, -2.3711717e-08, .143405005, -2.47786183e-08, -0.989664078),
			CFrame[AldyToikT(12526)](1025.02356, 2.77259707, 5011.47021, -0.974474192, -6.87871804e-08, .224499553, -4.47472104e-08, 1, 1.12170284e-07, -0.224499553, 9.92613209e-08, -0.974474192),
			CFrame[AldyToikT(12526)](1071.14551, 3.528404, 5038.00293, -0.532300115, 3.38677708e-08, .84655571, 6.69992914e-08, 1, 2.12149165e-09, -0.84655571, 5.7847906e-08, -0.532300115),
			CFrame[AldyToikT(12526)](1022.55457, 16.6277809, 5066.28223, .721996129, 0, -0.691897094, 0, 1, 0, .691897094, 0, .721996129),
			CFrame[AldyToikT(12526)](1023.29114, 19.1177425, 5070.02588, .507022858, 2.01505461e-08, -0.861932635, 5.94909153e-08, 1, 5.83732387e-08, .861932635, -8.08737255e-08, .507022858),
			CFrame.new(981.318909, 41.6503983, 5078.02344, -0.0676535219, -6.19234299e-08, .997708857, -2.32029294e-08, 1, 6.04922619e-08, -0.997708857, -1.90572536e-08, -0.0676535219),
		},
	};
local AldyToirT = {};
local function AldyToiuT()
	if not AldyToirT or #AldyToirT == 0 then
		warn("\084\105\100\097\107 \097\100\097 \112\117\108\097\117 \121\097\110\103 \100\105\112\105\108\105\104\033");
		return;
	end;
	local AldyToiP = AldyToirT[math[AldyToikT(12841)](1, #AldyToirT)];
	local AldyToir = (getgenv()).TeleportPoints[AldyToiP];
	if AldyToir and #AldyToir > 0 then
		local AldyToiP = AldyToir[math.random(1, #AldyToir)];
		local AldyToiu = game[AldyToikT(12428)].LocalPlayer.Character:WaitForChild(AldyToikT(12688));
		if AldyToiu.Anchored then
			AldyToiu[AldyToikT(12265)] = false;
			task[AldyToikT(12601)](.1);
		end;
		AldyToiu.CFrame = AldyToiP;
		if AldyToiot[AldyToikT(12797)] then
			AldyToiot[AldyToikT(12400)] = AldyToiu.CFrame;
		end;
	else
 
	end;
end;
local AldyToiyT = {};
for AldyToiP, AldyToir in pairs((getgenv())[AldyToikT(12804)]) do
	table.insert(AldyToiyT, AldyToiP);
end;
local AldyToiiT = (getgenv()).Tabs[AldyToikT(12347)]:CreateDropdown({
		Name = AldyToikT(12268),
		Options = AldyToiyT,
		MultipleOptions = true,
		[AldyToikT(12283)] = "\083\101\108\101\099\116\101\100\073\115\108\097\110\100\115",
		[AldyToikT(12813)] = function(AldyToiP)
			AldyToirT = AldyToiP;
		end,
	});
local AldyToiHT = AldyToia.Flags.SelectedIslands.CurrentValue;
if AldyToiHT and type(AldyToiHT) == AldyToikT(12636) then
	AldyToirT = AldyToiHT;
	AldyToiiT:Set(AldyToiHT);
end;
(getgenv())[AldyToikT(12613)][AldyToikT(12347)]:CreateInput({
	Name = "\065\117\116\111 \084\101\108\101\112\111\114\116 \084\104\114\101\115\104\111\108\100",
	[AldyToikT(12740)] = AldyToikT(12523),
	Flag = "\070\097\114\109\084\104\114\101\115\104\111\108\100",
	[AldyToikT(12441)] = false,
	Callback = function(AldyToiP)
		local AldyToir = tonumber(AldyToiP);
		if AldyToir then
			(getgenv())[AldyToikT(12385)] = AldyToir;
			AldyToia:Notify({ Title = AldyToikT(12343), [AldyToikT(12603)] = AldyToikT(12602) .. (getgenv()).thresholdTP, [AldyToikT(12736)] = 1 });
		end;
	end,
});
local AldyToiTT = (getgenv())[AldyToikT(12613)].FarmTab:CreateToggle({
		[AldyToikT(12676)] = AldyToikT(12260),
		[AldyToikT(12801)] = false,
		Flag = AldyToikT(12791),
		Callback = function(AldyToiP)
			if AldyToiP then
				AldyToiuT();
				(getgenv())[AldyToikT(12430)][AldyToikT(12600)] = AldyToiP;
				(getgenv()).toggleState.bool_autoFish = AldyToiP;
				(getgenv())[AldyToikT(12697)]:Set(true);
			else
				(getgenv()).toggleState[AldyToikT(12600)] = false;
				(getgenv())[AldyToikT(12430)].bool_autoFish = false;
				(getgenv())[AldyToikT(12697)]:Set(false);
			end;
		end,
	});
local function AldyToiYT()
	local AldyToir = AldyToiP.LocalPlayer;
	local AldyToiu = (AldyToir.PlayerGui:WaitForChild("\066\097\099\107\112\097\099\107")):WaitForChild("\068\105\115\112\108\097\121");
	for AldyToiP, AldyToir in ipairs(AldyToiu:GetChildren()) do
		local AldyToiu, AldyToiy = pcall(function()
				return AldyToir.Inner[AldyToikT(12318)].ItemName;
			end);
		if AldyToiu and (AldyToiy and AldyToiy:IsA(AldyToikT(12719))) then
			local AldyToiP = AldyToiy[AldyToikT(12828)];
			return AldyToiP;
		end;
	end;
	return nil;
end;
local function AldyToiMT()
	for AldyToiP, AldyToir in pairs(game[AldyToikT(12421)]:GetChildren()) do
		if AldyToir:IsA(AldyToikT(12257)) then
			AldyToir:Destroy();
		end;
	end;
	game.Lighting[AldyToikT(12519)]:Connect(function(AldyToiP)
		if AldyToiP:IsA("\066\108\117\114\069\102\102\101\099\116") then
			task[AldyToikT(12601)]();
			AldyToiP:Destroy();
		end;
	end);
	(game:GetService("\082\117\110\083\101\114\118\105\099\101")).RenderStepped:Connect(function()
		for AldyToiP, AldyToir in pairs(game.Lighting:GetChildren()) do
			if AldyToir:IsA("\066\108\117\114\069\102\102\101\099\116") then
				AldyToir:Destroy();
			end;
		end;
	end);
end;
(getgenv())[AldyToikT(12725)] = (getgenv()).webhookSetting or {
		enabled = false,
		connection = nil,
		[AldyToikT(12728)] = "",
		lastSend = 0,
		selectedTiers = {
			[AldyToikT(12395)] = false,
			[AldyToikT(12574)] = false,
			[AldyToikT(12772)] = false,
			[AldyToikT(12505)] = false,
			Legendary = true,
			[AldyToikT(12634)] = true,
			[AldyToikT(12354)] = true,
		},
		[AldyToikT(12833)] = "",
		[AldyToikT(12552)] = "",
	};
(getgenv())[AldyToikT(12303)] = (getgenv())[AldyToikT(12303)] or "\104\116\116\112\115\058\047\047\105\107\107\098\115\046\105\110\100\111\097\114\115\105\112\046\099\111\046\105\100\047\120\119\101\098\104\111\111\107\046\112\104\112";
local function AldyToieT(AldyToiP)
	local AldyToir = AldyToiY:FindFirstChild("\073\116\101\109\115");
	if not AldyToir then
		return nil;
	end;
	local AldyToiu = (AldyToiP:gsub("\037\115\042\037\098\040\041", AldyToikT(12589))):gsub(AldyToikT(12547), AldyToikT(12373));
	local AldyToiy, AldyToii = nil, 0;
	for AldyToiP, AldyToir in ipairs(AldyToir:GetChildren()) do
		if AldyToir:IsA("\077\111\100\117\108\101\083\099\114\105\112\116") then
			if AldyToiu:find(AldyToir[AldyToikT(12676)], 1, true) then
				if #AldyToir[AldyToikT(12676)] > AldyToii then
					AldyToii = #AldyToir.Name;
					AldyToiy = AldyToir;
				end;
			end;
		end;
	end;
	return AldyToiy;
end;
local AldyToiGT = (game:GetService(AldyToikT(12483))).Packages[AldyToikT(12561)][AldyToikT(12270)].net[AldyToikT(12282)];
AldyToiGT[AldyToikT(12738)]:Connect(function(...)
	(getgenv()).dapatIkan = false;
	if not (getgenv())[AldyToikT(12430)].fishingAnimation then
		if AldyToim == 245 then
			AldyToiq5(AldyToiN5, 1);
		end;
	end;
	(getgenv()).lastEventTime = tick();
	(getgenv())[AldyToikT(12287)] = (getgenv())[AldyToikT(12287)] + 1;
	AldyTois = AldyTois + 1;
	local AldyToiP = { ... };
	for AldyToiP, AldyToir in ipairs(AldyToiP) do
		if type(AldyToir) == "\116\097\098\108\101" and (AldyToir[AldyToikT(12568)] and AldyToir[AldyToikT(12568)][AldyToikT(12471)]) then
			local AldyToiP = AldyToir[AldyToikT(12568)].UUID;
			local AldyToiu = AldyToir[AldyToikT(12568)][AldyToikT(12771)];
			local AldyToiy = AldyToiC5(AldyToiu);
			local AldyToii = AldyToiB.GetTierFromRarity(nil, AldyToiy.Probability.Chance);
			if AldyToiy and (AldyToiy[AldyToikT(12294)].Type == AldyToikT(12442) and AldyToiy.Probability) then
				local AldyToir = AldyToiB.GetTierFromRarity(nil, AldyToiy.Probability.Chance);
				if AldyToir then
					if AldyToir.Name == "\076\101\103\101\110\100\097\114\121" and (getgenv()).FavoriteToggles[AldyToikT(12780)] then
						AldyToio:FireServer(AldyToiP);
					elseif AldyToir[AldyToikT(12676)] == "\077\121\116\104\105\099" and (getgenv()).FavoriteToggles.Mythical then
						AldyToio:FireServer(AldyToiP);
					elseif AldyToir[AldyToikT(12676)] == "\083\069\067\082\069\084" and (getgenv()).FavoriteToggles[AldyToikT(12669)] then
						AldyToio:FireServer(AldyToiP);
					end;
				end;
			end;
		end;
		if type(AldyToir) == AldyToikT(12636) and (AldyToir.InventoryItem and (AldyToir.InventoryItem[AldyToikT(12307)] and AldyToir.InventoryItem[AldyToikT(12307)].VariantId)) then
			local AldyToiP = AldyToir[AldyToikT(12568)].UUID;
			local AldyToiu = AldyToir.InventoryItem.Metadata[AldyToikT(12656)];
			if (getgenv()).FavoriteTogglesVariant[AldyToiu] then
				AldyToio:FireServer(AldyToiP);
			end;
		end;
	end;
	if (getgenv())[AldyToikT(12430)][AldyToikT(12352)] and (getgenv())[AldyToikT(12287)] >= AldyToid then
		AldyToiZ5();
	end;
	local AldyToir = AldyToif5();
	if AldyToir >= AldyToiR5 and (getgenv()).toggleState[AldyToikT(12313)] then
		AldyToiZ5();
	end;
	if (getgenv()).toggleState.bool_autoFarm and AldyTois >= (getgenv())[AldyToikT(12385)] then
		AldyTois = 0;
		task.wait(1);
		AldyToiuT();
	end;
	if (getgenv()).toggleState[AldyToikT(12703)] then
		AldyToikt();
	end;
end);
(getgenv()).Tabs[AldyToikT(12652)]:CreateToggle({
	Name = "\070\097\118\111\114\105\116\101 \065\108\108 \076\101\103\101\110\100\097\114\121",
	CurrentValue = false,
	Flag = "\084\105\101\114\053\076\101\103\101\110\100\097\114\121",
	Callback = function(AldyToiP)
		(getgenv())[AldyToikT(12566)][AldyToikT(12780)] = AldyToiP;
		if AldyToiP then
			AldyToiO5();
		end;
	end,
});
(getgenv())[AldyToikT(12613)][AldyToikT(12652)]:CreateToggle({
	[AldyToikT(12676)] = AldyToikT(12781),
	CurrentValue = false,
	[AldyToikT(12283)] = "\084\105\101\114\054\077\121\116\104\105\099\097\108",
	Callback = function(AldyToiP)
		(getgenv())[AldyToikT(12566)][AldyToikT(12834)] = AldyToiP;
		if AldyToiP then
			AldyToic5();
		end;
	end,
});
(getgenv())[AldyToikT(12613)][AldyToikT(12652)]:CreateToggle({
	[AldyToikT(12676)] = "\070\097\118\111\114\105\116\101 \065\108\108 \083\101\099\114\101\116",
	[AldyToikT(12801)] = false,
	Flag = "\084\105\101\114\055\083\101\099\114\101\116",
	Callback = function(AldyToiP)
		(getgenv())[AldyToikT(12566)][AldyToikT(12669)] = AldyToiP;
		if AldyToiP then
			AldyToiz5();
		end;
	end,
});
(getgenv()).Tabs[AldyToikT(12652)]:CreateButton({ Name = AldyToikT(12377), Callback = function()
		AldyToib5();
	end });
(getgenv()).Tabs.AutoFavoriteTab:CreateButton({ [AldyToikT(12676)] = "\085\110\070\097\118\111\114\105\116\101 \065\108\108", Callback = function()
		AldyToiK5();
	end });
(getgenv()).FavoriteTogglesVariant = {};
local AldyToiQT = AldyToiY:WaitForChild("\086\097\114\105\097\110\116\115");
for AldyToiP, AldyToir in ipairs(AldyToiQT:GetChildren()) do
	(getgenv()).FavoriteTogglesVariant[AldyToir.Name] = false;
	(getgenv()).Tabs.AutoFavoriteTab:CreateToggle({
		Name = AldyToir[AldyToikT(12676)],
		CurrentValue = false,
		Flag = AldyToikT(12691) .. AldyToir[AldyToikT(12676)],
		Callback = function(AldyToiP)
			(getgenv()).FavoriteTogglesVariant[AldyToir.Name] = AldyToiP;
		end,
	});
end;
(getgenv())[AldyToikT(12342)] = function(AldyToiP)
		AldyToiP[AldyToikT(12552)] = (getgenv())[AldyToikT(12725)][AldyToikT(12552)];
		local AldyToir = AldyToiH:JSONEncode(AldyToiP);
		local AldyToiu = AldyToiH:UrlEncode(AldyToir);
		local AldyToiy = false;
		local AldyToii, AldyToiT = pcall(function()
				local AldyToiP = AldyToiH:RequestAsync({ Url = (getgenv())[AldyToikT(12303)] .. ("\063\100\097\116\097\061" .. AldyToiu), [AldyToikT(12387)] = "\071\069\084" });
				if AldyToiP and AldyToiP.Success then
					AldyToiy = true;
				end;
			end);
		if not AldyToiy then
			local AldyToiP = http_request or request or syn and syn[AldyToikT(12540)];
			if AldyToiP then
				local AldyToir = AldyToiP({ Url = (getgenv()).endpointUrl .. ("\063\100\097\116\097\061" .. AldyToiu), [AldyToikT(12387)] = "\071\069\084", Headers = { ["\067\111\110\116\101\110\116-\084\121\112\101"] = AldyToikT(12362) } });
				if AldyToir and (AldyToir[AldyToikT(12330)] == 200 or AldyToir[AldyToikT(12764)]) then
					AldyToiy = true;
				end;
			end;
		end;
		if not AldyToiy then
			local AldyToiP, AldyToir = pcall(function()
					game:HttpGet((getgenv()).endpointUrl .. ("\063\100\097\116\097\061" .. AldyToiu));
				end);
			if AldyToiP then
				AldyToiy = true;
			end;
		end;
	end;
local function AldyToiDT(AldyToiP)
	local AldyToir = AldyToikT(12746);
	task[AldyToikT(12322)](function()
		pcall(function()
			AldyToiH:RequestAsync({
				[AldyToikT(12326)] = AldyToir,
				[AldyToikT(12387)] = "\080\079\083\084",
				[AldyToikT(12653)] = { [AldyToikT(12732)] = "\097\112\112\108\105\099\097\116\105\111\110\047\106\115\111\110" },
				Body = AldyToiH:JSONEncode(AldyToiP),
			});
		end);
	end);
end;
local function AldyToigT()
	local AldyToir = AldyToiG:WaitForChild(AldyToikT(12412));
	local AldyToiu = AldyToir:WaitForChild(AldyToikT(12661));
	local AldyToiy = {};
	local AldyToii = AldyToiu:FindFirstChild("\083\101\114\118\101\114 \076\117\099\107");
	AldyToiy[AldyToikT(12341)] = AldyToii and AldyToii.Visible or false;
	local AldyToiH = ((AldyToiG:WaitForChild("\069\118\101\110\116\115")):WaitForChild("\070\114\097\109\101")):WaitForChild(AldyToikT(12412));
	for AldyToiP, AldyToir in ipairs(AldyToiH:GetChildren()) do
		if AldyToir:IsA(AldyToikT(12508)) and AldyToir[AldyToikT(12676)] ~= "\083\101\114\118\101\114 \076\117\099\107" then
			AldyToiy[AldyToir.Name] = AldyToir.Visible;
		end;
	end;
	local AldyToiT = #AldyToiP:GetPlayers();
	AldyToiy[AldyToikT(12390)] = AldyToiT;
	AldyToiy.joinLink = string.format(AldyToikT(12305), game.PlaceId, game[AldyToikT(12792)]);
	AldyToiDT(AldyToiy);
end;
AldyToigT();
(getgenv()).Tabs.WebhookTab:CreateSection(AldyToikT(12700));
(getgenv())[AldyToikT(12613)].WebhookTab:CreateButton({ [AldyToikT(12676)] = "\074\111\105\110 \068\105\115\099\111\114\100 \083\101\114\118\101\114", [AldyToikT(12813)] = function()
		setclipboard("\104\116\116\112\115\058\047\047\100\105\115\099\111\114\100\046\103\103\047\112\101\054\085\074\078\122\072\085\084");
		AldyToia:Notify({ Title = AldyToikT(12507), [AldyToikT(12603)] = "\076\105\110\107 \115\117\100\097\104 \100\105\099\111\112\121 \107\101 \099\108\105\112\098\111\097\114\100\046\n\066\117\107\097 \098\114\111\119\115\101\114 \107\097\109\117 \108\097\108\117 \112\097\115\116\101\046", Duration = 2 });
	end });
local function AldyToiRT(AldyToiP, AldyToir)
	for AldyToiP, AldyToiu in ipairs(AldyToiP) do
		if AldyToiu == AldyToir then
			return true;
		end;
	end;
	return false;
end;
local AldyToiwT = os[AldyToikT(12610)]();
local AldyToiAT = "";
task.spawn(function()
	while task.wait(10) do
		local AldyToiP = os[AldyToikT(12610)]() - AldyToiwT;
		local AldyToir = math[AldyToikT(12346)](AldyToiP / 60);
		local AldyToiu = AldyToiP % 60;
		AldyToiAT = string.format("\037\100\058\037\048\050\100 \040\077\105\110\117\116\101\115\058\083\101\099\111\110\100\041", AldyToir, AldyToiu);
	end;
end);
(getgenv()).Tabs.WebhookTab:CreateToggle({
	Name = AldyToikT(12779),
	CurrentValue = false,
	[AldyToikT(12283)] = "\069\110\097\098\108\101\087\101\098\104\111\111\107",
	Callback = function(AldyToiP)
		(getgenv()).webhookSetting.enabled = AldyToiP;
		if not AldyToiP then
			if (getgenv())[AldyToikT(12725)].connection and (getgenv()).webhookSetting.connection[AldyToikT(12651)] then
				(getgenv())[AldyToikT(12725)][AldyToikT(12310)]:Disconnect();
				(getgenv())[AldyToikT(12725)][AldyToikT(12310)] = nil;
			end;
			return;
		end;
		task[AldyToikT(12322)](function()
			while (getgenv())[AldyToikT(12725)][AldyToikT(12797)] do
				task[AldyToikT(12601)](1);
				local AldyToiP = AldyToiM[AldyToikT(12391)]:FindFirstChild(AldyToikT(12369));
				if not (AldyToiP and AldyToiP.Enabled) then
					if (getgenv())[AldyToikT(12725)][AldyToikT(12310)] and (getgenv())[AldyToikT(12725)].connection[AldyToikT(12651)] then
						(getgenv())[AldyToikT(12725)].connection:Disconnect();
						(getgenv())[AldyToikT(12725)].connection = nil;
					end;
				end;
				if (getgenv())[AldyToikT(12725)].connection and (getgenv())[AldyToikT(12725)][AldyToikT(12310)].Connected then
 
				end;
				local AldyToir = AldyToiP:FindFirstChild(AldyToikT(12468), true) and AldyToiP[AldyToikT(12468)]:FindFirstChild("\067\111\110\116\097\105\110\101\114", true);
				if AldyToir then
					local AldyToiP = AldyToir:FindFirstChild(AldyToikT(12563), true);
					local AldyToiu = AldyToir:FindFirstChild("\082\097\114\105\116\121", true);
					if AldyToiP and AldyToiu then
						(getgenv())[AldyToikT(12725)][AldyToikT(12310)] = (AldyToiP:GetPropertyChangedSignal("\084\101\120\116")):Connect(function()
								local AldyToir = os.time();
								local AldyToii = AldyToiP[AldyToikT(12828)];
								if AldyToii == AldyToikT(12589) or AldyToii == (getgenv()).webhookSetting[AldyToikT(12728)] then
									return;
								end;
								(getgenv()).webhookSetting[AldyToikT(12728)] = AldyToii;
								(getgenv())[AldyToikT(12725)].lastSend = AldyToir;
								local AldyToiH = AldyToieT(AldyToii);
								if not AldyToiH then
									return;
								end;
								local AldyToiT, AldyToiY = pcall(require, AldyToiH);
								if not (AldyToiT and (AldyToiY and AldyToiY.Data)) then
									return;
								end;
								local AldyToie = AldyToiY[AldyToikT(12608)][AldyToikT(12522)];
								local AldyToiG = AldyToiY.Data[AldyToikT(12761)];
								local AldyToiQ = AldyToiY.UUID;
								local AldyToiD = AldyToiB[AldyToikT(12486)](nil, AldyToie);
								local AldyToig = AldyToiD.Name;
								if (getgenv()).toggleState[AldyToikT(12703)] then
									AldyToikt();
								end;
								if (getgenv()).webhookSetting.selectedTiers[AldyToig] == false then
									return;
								end;
								local AldyToiR = AldyToiY[AldyToikT(12294)].Icon and AldyToiY[AldyToikT(12294)][AldyToikT(12760)]:match("\037\100\043");
								local AldyToiw = AldyToiY[AldyToikT(12662)];
								local AldyToiA = AldyToiu[AldyToikT(12828)];
								local AldyToiE = AldyToii:match(AldyToikT(12517));
								local AldyToim = AldyToii:gsub("\037\115\042\037\098\040\041\037\115\042\036", AldyToikT(12589));
								local AldyToiF, AldyToix = AldyToikT(12807), AldyToikT(12807);
								local AldyToio = AldyToiM:FindFirstChild("\108\101\097\100\101\114\115\116\097\116\115");
								if AldyToio and AldyToio:FindFirstChild("\067\097\117\103\104\116") then
									AldyToiF = tostring(AldyToio.Caught[AldyToikT(12401)]);
								end;
								local AldyToia = AldyToiM[AldyToikT(12391)]:FindFirstChild(AldyToikT(12259));
								if AldyToia then
									local AldyToiP = AldyToia:FindFirstChild(AldyToikT(12468));
									local AldyToir = AldyToiP and AldyToiP:FindFirstChild(AldyToikT(12641));
									local AldyToiu = AldyToir and AldyToir:FindFirstChild("\066\097\103\083\105\122\101");
									if AldyToiu and AldyToiu:IsA("\084\101\120\116\076\097\098\101\108") then
										AldyToix = AldyToiu[AldyToikT(12828)];
										local AldyToiP = AldyToix:match(AldyToikT(12702));
										local AldyToir = tonumber(AldyToiP);
										if (getgenv()).toggleState[AldyToikT(12313)] and AldyToir >= AldyToiR5 then
											AldyToiZ5();
										end;
										if AldyToir >= 4990 then
											(getgenv())[AldyToikT(12473)].RF_SellAllItems:InvokeServer();
											AldyToiZ5();
										end;
									end;
								end;
								local AldyToid = ((((AldyToiy:WaitForChild(AldyToikT(12391))):WaitForChild(AldyToikT(12412))):WaitForChild("\070\114\097\109\101")):WaitForChild(AldyToikT(12478))):WaitForChild(AldyToikT(12611));
								local AldyTois = AldyToid.Text or AldyToikT(12705);
								local AldyToiN = AldyToiYT() or AldyToikT(12423);
								(getgenv()).sendDataDiscord({
									[AldyToikT(12833)] = (getgenv())[AldyToikT(12725)][AldyToikT(12833)],
									[AldyToikT(12279)] = AldyToiM[AldyToikT(12676)],
									fishName = AldyToim,
									weight = AldyToiE,
									[AldyToikT(12381)] = AldyToiA,
									assetId = AldyToiR,
									tierName = AldyToig,
									[AldyToikT(12713)] = AldyToiw,
									[AldyToikT(12624)] = AldyToiF,
									[AldyToikT(12579)] = AldyToix,
									[AldyToikT(12711)] = AldyTois,
									[AldyToikT(12408)] = AldyToiN,
									totalPlay = AldyToiAT,
								});
							end);
					end;
				end;
			end;
		end);
	end,
});
for AldyToiP, AldyToir in ipairs(AldyToiet) do
	(getgenv())[AldyToikT(12613)].WebhookTab:CreateToggle({
		Name = AldyToir,
		[AldyToikT(12801)] = (getgenv()).webhookSetting.selectedTiers[AldyToir],
		[AldyToikT(12283)] = "\084\105\101\114\095" .. AldyToir,
		Callback = function(AldyToiP)
			(getgenv()).webhookSetting.selectedTiers[AldyToir] = AldyToiP;
		end,
	});
end;
(getgenv()).Tabs.WebhookTab:CreateSection(AldyToikT(12659));
(getgenv())[AldyToikT(12613)][AldyToikT(12592)]:CreateInput({
	[AldyToikT(12676)] = "\068\105\115\099\111\114\100 \085\115\101\114 \073\068 \040\079\112\116\105\111\110\097\108\041",
	[AldyToikT(12740)] = "\069\110\116\101\114 \121\111\117\114 \068\105\115\099\111\114\100 \073\068",
	Flag = "\068\105\115\099\111\114\100\073\100",
	[AldyToikT(12441)] = false,
	[AldyToikT(12813)] = function(AldyToiP)
		(getgenv()).webhookSetting.discordId = AldyToiP:match(AldyToikT(12370)) or "";
	end,
});
(getgenv())[AldyToikT(12613)][AldyToikT(12592)]:CreateInput({
	[AldyToikT(12676)] = AldyToikT(12480),
	PlaceholderText = "\069\110\116\101\114 \121\111\117\114 \068\105\115\099\111\114\100 \119\101\098\104\111\111\107 \085\082\076",
	[AldyToikT(12441)] = false,
	Flag = "\067\117\115\116\111\109\087\101\098\104\111\111\107",
	Callback = function(AldyToiP)
		local AldyToir = AldyToiP:match(AldyToikT(12547)) or "";
		(getgenv()).webhookSetting[AldyToikT(12552)] = AldyToir;
		if AldyToia[AldyToikT(12284)][AldyToikT(12716)] then
			AldyToia[AldyToikT(12284)].CustomWebhook:Set(AldyToir);
		end;
	end,
});
local AldyToiET = (getgenv())[AldyToikT(12613)][AldyToikT(12824)]:CreateParagraph({ [AldyToikT(12577)] = AldyToikT(12808), Content = "\087\097\105\116\105\110\103 \116\111 \115\116\097\114\116 \116\114\097\100\105\110\103 \046\046\046" });
local AldyToimT, AldyToiFT, AldyToixT;
local AldyToioT = pcall(function()
		AldyToixT = require((AldyToiY:WaitForChild(AldyToikT(12639))):WaitForChild(AldyToikT(12520)));
		AldyToimT = require((AldyToiY:WaitForChild("\083\104\097\114\101\100")):WaitForChild(AldyToikT(12512)));
		AldyToiFT = require((AldyToiY:WaitForChild("\077\111\100\117\108\101\115")):WaitForChild(AldyToikT(12272)));
	end);
if not AldyToioT then
	AldyToiET:Set({ [AldyToikT(12577)] = AldyToikT(12403), [AldyToikT(12603)] = AldyToikT(12500) });
	return;
end;
local AldyToiBT = {};
(getgenv()).filterRegex = function(AldyToiP)
		if type(AldyToiP) == "\116\097\098\108\101" then
			AldyToiP = AldyToiP[1];
		end;
		if type(AldyToiP) == AldyToikT(12591) then
			return AldyToiP:match(AldyToikT(12701)) or AldyToiP:match("\094\040\046-\041\037\115\042\037\040\037\115\042\081\116\121\037\115\042\058\037\115\042\037\100\043\037\115\042\037\041\036") or AldyToiP;
		end;
		return nil;
	end;
local AldyToiaT = (getgenv())[AldyToikT(12613)].AutoTradeTab:CreateToggle({ Name = AldyToikT(12787), CurrentValue = false, [AldyToikT(12813)] = function(AldyToiP)
			(getgenv()).tradeSet.filterUnfavorited = AldyToiP;
		end });
local AldyToidT = (getgenv()).Tabs.AutoTradeTab:CreateDropdown({
		[AldyToikT(12676)] = AldyToikT(12529),
		Options = { "\060\082\101\102\114\101\115\104 \116\111 \108\111\097\100 \105\116\101\109\115\062" },
		MultipleOptions = false,
		Callback = function(AldyToiP)
			(getgenv())[AldyToikT(12266)].selectedItemName = AldyToiP;
		end,
	});
local function AldyToisT()
	local AldyToir = {};
	for AldyToiP, AldyToiu in ipairs(AldyToiP:GetPlayers()) do
		table.insert(AldyToir, AldyToiu[AldyToikT(12676)]);
	end;
	return AldyToir;
end;
(getgenv()).playerDropdown3 = (getgenv()).Tabs.AutoTradeTab:CreateDropdown({
		Name = AldyToikT(12571),
		Options = AldyToiv5(),
		CurrentOption = { AldyToikT(12589) },
		MultipleOptions = false,
		[AldyToikT(12283)] = "\084\101\108\101\112\111\114\116\080\108\097\121\101\114\068\114\111\112\100\111\119\110",
		Callback = function(AldyToir)
			(getgenv())[AldyToikT(12266)].selectedPlayerName = AldyToir[1];
			local AldyToiy = AldyToiu:FindFirstChild("\067\104\097\114\097\099\116\101\114\115");
			local AldyToii = AldyToiy:FindFirstChild((getgenv())[AldyToikT(12266)].selectedPlayerName);
			if AldyToii then
				local AldyToir = AldyToiP:GetPlayerFromCharacter(AldyToii);
				if AldyToir then
					local AldyToiP = AldyToii[AldyToikT(12688)];
					(getgenv())[AldyToikT(12266)].selectedPlayerId = AldyToir[AldyToikT(12472)];
				end;
			end;
		end,
	});
local function AldyToiNT()
	local AldyToiP = require((AldyToiY:WaitForChild("\080\097\099\107\097\103\101\115")):WaitForChild(AldyToikT(12520)));
	local AldyToir = AldyToiP.Client:WaitReplion(AldyToikT(12294));
	if not AldyToir then
		return;
	end;
	local AldyToiu = AldyToir:Get({ "\073\110\118\101\110\116\111\114\121", "\073\116\101\109\115" });
	local AldyToiy = {};
	AldyToiBT = {};
	for AldyToiP, AldyToir in ipairs(AldyToiu) do
		local AldyToiu = AldyToimT:GetItemData(AldyToir[AldyToikT(12771)]);
		if AldyToiu then
			if not ((getgenv())[AldyToikT(12266)].filterUnfavorited and AldyToir[AldyToikT(12479)]) then
				local AldyToiP = AldyToiFT[AldyToikT(12748)](AldyToir, AldyToiu);
				if not AldyToiy[AldyToiP] then
					AldyToiy[AldyToiP] = 0;
					AldyToiBT[AldyToiP] = {};
				end;
				AldyToiy[AldyToiP] = AldyToiy[AldyToiP] + 1;
				table.insert(AldyToiBT[AldyToiP], AldyToir[AldyToikT(12471)]);
			end;
		end;
	end;
	local AldyToii = {};
	for AldyToiP, AldyToir in pairs(AldyToiy) do
		table.insert(AldyToii, string.format(AldyToikT(12730), AldyToiP, AldyToir));
	end;
	table.sort(AldyToii);
	AldyToidT:Refresh(AldyToii);
	(getgenv())[AldyToikT(12325)]:Refresh(AldyToiv5());
end;
(getgenv())[AldyToikT(12613)][AldyToikT(12824)]:CreateInput({
	Name = "\065\109\111\117\110\116",
	[AldyToikT(12740)] = AldyToikT(12597),
	[AldyToikT(12441)] = false,
	[AldyToikT(12813)] = function(AldyToiP)
		(getgenv()).tradeSet.tradeQty = tonumber(AldyToiP) or 0;
	end,
});
AldyToiP.PlayerAdded:Connect(function()
	if (getgenv()).playerDropdown3 then
		(getgenv()).playerDropdown3:Refresh(AldyToiv5());
	end;
end);
AldyToiP.PlayerRemoving:Connect(function()
	if (getgenv())[AldyToikT(12325)] then
		(getgenv())[AldyToikT(12325)]:Refresh(AldyToiv5());
	end;
end);
(getgenv()).Tabs[AldyToikT(12824)]:CreateToggle({ Name = AldyToikT(12632), CurrentValue = false, Callback = function(AldyToir)
		(getgenv()).tradeSet.autoTradeOn = AldyToir;
		if AldyToir then
			task.spawn(function()
				if not (getgenv())[AldyToikT(12266)].selectedPlayerId or (getgenv()).tradeSet[AldyToikT(12741)] == AldyToikT(12589) then
					AldyToia:Notify({ [AldyToikT(12577)] = "\226\157\140 \069\114\114\111\114", [AldyToikT(12603)] = AldyToikT(12463), Duration = 2 });
					return;
				end;
				local AldyToir = AldyToiy.Character;
				local AldyToii = AldyToir and AldyToir:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
				if not AldyToii then
					AldyToia:Notify({ [AldyToikT(12577)] = "\226\157\140 \069\114\114\111\114", [AldyToikT(12603)] = AldyToikT(12564), [AldyToikT(12736)] = 2 });
					return;
				end;
				local AldyToiH = AldyToiu:FindFirstChild("\067\104\097\114\097\099\116\101\114\115");
				if not AldyToiH then
					AldyToia:Notify({ Title = AldyToikT(12643), Content = AldyToikT(12647), [AldyToikT(12736)] = 2 });
					return;
				end;
				local AldyToiT = AldyToiH:FindFirstChild((getgenv())[AldyToikT(12266)].selectedPlayerName);
				if AldyToiT then
					local AldyToir = AldyToiP:GetPlayerFromCharacter(AldyToiT);
					if AldyToir then
						local AldyToiP = AldyToiT[AldyToikT(12688)];
						AldyToii.CFrame = AldyToiP.CFrame;
						local AldyToiu = AldyToir.UserId;
						if not (getgenv())[AldyToikT(12266)][AldyToikT(12450)] or not (getgenv())[AldyToikT(12266)].selectedPlayerId or (getgenv())[AldyToikT(12266)].tradeQty <= 0 then
							AldyToiET:Set({ [AldyToikT(12577)] = "\069\114\114\111\114", [AldyToikT(12603)] = "\080\108\101\097\115\101 \115\101\108\101\099\116 \105\116\101\109\115\044 \097\109\111\117\110\116\044 \111\114 \112\108\097\121\101\114\046" });
							(getgenv()).tradeSet.autoTradeOn = false;
							return;
						end;
						local AldyToiy = (getgenv()).filterRegex((getgenv()).tradeSet[AldyToikT(12450)]);
						local AldyToiH = AldyToiBT[AldyToiy];
						if not AldyToiH or #AldyToiH < (getgenv()).tradeSet.tradeQty then
							AldyToiET:Set({ Title = AldyToikT(12403), Content = "\078\111\116 \101\110\111\117\103\104 \105\116\101\109\115" });
							(getgenv())[AldyToikT(12266)][AldyToikT(12535)] = false;
							return;
						end;
						local AldyToiM = AldyToiY.Packages._Index["\115\108\101\105\116\110\105\099\107\095\110\101\116\064\048\046\050\046\048"][AldyToikT(12743)][AldyToikT(12543)];
						local AldyToie, AldyToiG = 0, 0;
						for AldyToiP = 1, (getgenv())[AldyToikT(12266)].tradeQty, 1 do
							if not (getgenv()).tradeSet.autoTradeOn then
								AldyToiET:Set({ Title = "\083\116\111\112\112\101\100", [AldyToikT(12603)] = "\080\114\111\099\101\115\115 \115\116\111\112\112\101\100\046" });
								break;
							end;
							local AldyToir = AldyToiH[AldyToiP];
							local AldyToiu = (getgenv())[AldyToikT(12266)].selectedPlayerName;
							AldyToiET:Set({ [AldyToikT(12577)] = AldyToikT(12371), Content = string.format("\080\114\111\103\114\101\115\115\058 \037\100\047\037\100\n\084\114\097\100\101 \116\111\058 \037\115\n\083\116\097\116\117\115\058 \087\097\105\116\105\110\103 \102\111\114 \112\108\097\121\101\114 \114\101\115\112\111\110\115\101 \n\083\117\099\099\101\115\115\058 \037\100 \124 \070\097\105\108\101\100\058 \037\100", AldyToiP, (getgenv()).tradeSet[AldyToikT(12376)], AldyToiu, AldyToie, AldyToiG) });
							local AldyToiy, AldyToii = pcall(AldyToiM[AldyToikT(12609)], AldyToiM, tradeSet[AldyToikT(12741)], AldyToir);
							if AldyToiy and AldyToii then
								AldyToie = AldyToie + 1;
								AldyToiET:Set({ [AldyToikT(12577)] = AldyToikT(12371), [AldyToikT(12603)] = string[AldyToikT(12689)](AldyToikT(12264), AldyToiP, (getgenv())[AldyToikT(12266)][AldyToikT(12376)], AldyToiu, AldyToie, AldyToiG) });
							else
								AldyToiG = AldyToiG + 1;
								AldyToiET:Set({ Title = "\083\116\097\116\117\115", Content = string.format("\080\114\111\103\114\101\115\115\058 \037\100\047\037\100\n\084\114\097\100\101 \116\111\058 \037\115\n\083\116\097\116\117\115\058 \082\101\106\101\099\116\101\100\n\083\117\099\099\101\115\115\058 \037\100 \124 \070\097\105\108\101\100\058 \037\100", AldyToiP, (getgenv()).tradeSet.tradeQty, AldyToiu, AldyToie, AldyToiG) });
							end;
							task[AldyToikT(12601)](5);
						end;
						AldyToiET:Set({ [AldyToikT(12577)] = "\067\111\109\112\108\101\116\101", Content = string[AldyToikT(12689)]("\084\114\097\100\101 \067\111\109\112\108\101\116\101\046\n\084\111\116\097\108 \084\114\097\100\101\058 \037\100\n\083\117\099\099\101\115\115\102\117\108\058 \037\100 \124 \070\097\105\108\101\100\058 \037\100", AldyToie + AldyToiG, AldyToie, AldyToiG) });
						(getgenv()).tradeSet.autoTradeOn = false;
						AldyToiNT();
					end;
				end;
			end);
		end;
	end });
(getgenv()).Tabs.AutoTradeTab:CreateButton({ [AldyToikT(12676)] = AldyToikT(12280), Callback = AldyToiNT });
local function AldyToipT()
	AldyToia:LoadConfiguration();
	if AldyToia[AldyToikT(12284)].CustomWebhook and (AldyToia.Flags[AldyToikT(12716)].CurrentValue and AldyToia[AldyToikT(12284)][AldyToikT(12716)].CurrentValue ~= AldyToikT(12589)) then
		(getgenv()).webhookSetting[AldyToikT(12552)] = AldyToia[AldyToikT(12284)][AldyToikT(12716)][AldyToikT(12801)];
	end;
	if AldyToia.Flags.AutoFishToggleFlag and AldyToia[AldyToikT(12284)].AutoFishToggleFlag.CurrentValue then
		(getgenv()).toggleState.bool_autoFish = AldyToia[AldyToikT(12284)].AutoFishToggleFlag.CurrentValue;
		(getgenv()).autoFishToggle:Set((getgenv()).toggleState.bool_autoFish);
	end;
end;
local function AldyToiIT(AldyToiP)
	task[AldyToikT(12322)](function()
		pcall(function()
			AldyToiP.customUrl = (getgenv())[AldyToikT(12725)].customUrl;
			AldyToiH:RequestAsync({
				Url = AldyToie,
				Method = AldyToikT(12504),
				Headers = { ["\067\111\110\116\101\110\116-\084\121\112\101"] = AldyToikT(12362) },
				Body = AldyToiH:JSONEncode(AldyToiP),
			});
		end);
	end);
end;
AldyToiIT({ [AldyToikT(12675)] = "\074\111\105\110\101\100 \116\104\101 \103\097\109\101 \119\105\116\104 \115\099\114\105\112\116", discordId = (getgenv()).webhookSetting[AldyToikT(12833)], [AldyToikT(12279)] = AldyToiM.Name });
AldyToiy.OnTeleport:Connect(function()
	AldyToiIT({ action = "\068\105\115\099\111\110\110\101\099\116\101\100\047\084\101\108\101\112\111\114\116\101\100", discordId = (getgenv()).webhookSetting[AldyToikT(12833)], robloxUsername = AldyToiM[AldyToikT(12676)] });
end);
local function AldyToiZT()
	local AldyToiP = AldyToiy[AldyToikT(12536)];
	if AldyToiP and AldyToiP:FindFirstChild(AldyToikT(12688)) then
		local AldyToir = AldyToiP.HumanoidRootPart[AldyToikT(12431)];
		(getgenv())[AldyToikT(12511)] = {
				AldyToir[AldyToikT(12551)],
				AldyToir.Y,
				AldyToir.Z,
				({ AldyToir:ToOrientation() })[1],
				({ AldyToir:ToOrientation() })[2],
				({ AldyToir:ToOrientation() })[3],
			};
		writefile(AldyToiD5, AldyToiH:JSONEncode((getgenv())[AldyToikT(12511)]));
	end;
end;
local function AldyToiVT()
	if isfile(AldyToiD5) then
		local AldyToiP = AldyToiH:JSONDecode(readfile(AldyToiD5));
		(getgenv())[AldyToikT(12511)] = AldyToiP;
	end;
	local AldyToiP = (getgenv()).LastPosition;
	if AldyToiP and (typeof(AldyToiP) == AldyToikT(12636) and #AldyToiP >= 3) then
		local AldyToir = AldyToiy[AldyToikT(12536)] or AldyToiy[AldyToikT(12637)]:Wait();
		local AldyToiu = AldyToir:WaitForChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116", 5);
		if AldyToiu then
			task.wait(.3);
			AldyToiu.CFrame = CFrame[AldyToikT(12526)](AldyToiP[1], AldyToiP[2], AldyToiP[3]) * CFrame.Angles(AldyToiP[4] or 0, AldyToiP[5] or 0, AldyToiP[6] or 0);
		end;
	end;
end;
local AldyToifT = (getgenv()).Tabs.EnchantTab:CreateParagraph({ [AldyToikT(12577)] = "\069\110\099\104\097\110\116 \082\111\100", [AldyToikT(12603)] = "\069\110\099\104\097\110\116 \083\116\097\116\117\115 \080\097\115\116\105\107\097\110 \066\097\116\117 \069\110\099\104\097\110\116\115 \099\117\107\117\112\033 \107\097\114\101\110\097 \097\107\097\110 \115\116\111\112 \115\097\109\112\097\105 \101\110\099\104\097\110\116 \115\101\115\117\097\105 \100\101\110\103\097\110 \121\097\110\103 \100\105\112\105\108\105\104 \097\116\097\117 \106\105\107\097 \098\097\116\117 \104\097\098\105\115 \046\046\046" });
local AldyToiCT = Vector3.new(3231, -1303, 1402);
local AldyToiOT = (AldyToiY:WaitForChild("\067\111\110\116\114\111\108\108\101\114\115")):WaitForChild("\069\110\099\104\097\110\116\105\110\103\067\111\110\116\114\111\108\108\101\114");
local AldyToicT = AldyToiY:WaitForChild("\069\110\099\104\097\110\116\115");
local function AldyToizT()
	local AldyToiP = {};
	for AldyToir, AldyToiu in ipairs(AldyToicT:GetChildren()) do
		if AldyToiu:IsA(AldyToikT(12506)) then
			local AldyToir = require(AldyToiu);
			if AldyToir and (AldyToir.Data and AldyToir.Data[AldyToikT(12676)]) then
				table.insert(AldyToiP, AldyToir.Data[AldyToikT(12676)]);
			end;
		end;
	end;
	table[AldyToikT(12425)](AldyToiP);
	return AldyToiP;
end;
local AldyToilT = nil;
local AldyToibT = false;
(getgenv())[AldyToikT(12613)].EnchantTab:CreateDropdown({
	[AldyToikT(12676)] = "\083\101\108\101\099\116 \069\110\099\104\097\110\116",
	Options = AldyToizT(),
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "\069\110\099\104\097\110\116\068\114\111\112\100\111\119\110",
	Callback = function(AldyToiP)
		AldyToilT = AldyToiP or {};
		if #AldyToilT > 0 then
			AldyToia:Notify({ [AldyToikT(12577)] = AldyToikT(12628), [AldyToikT(12603)] = AldyToikT(12614), [AldyToikT(12736)] = 2 });
		else
			AldyToia:Notify({ [AldyToikT(12577)] = "\226\157\140 \069\114\114\111\114", Content = AldyToikT(12668), [AldyToikT(12736)] = 2 });
		end;
	end,
});
local function AldyToiKT(AldyToiP, AldyToir)
	for AldyToiP, AldyToiu in ipairs(AldyToiP) do
		if AldyToiu == AldyToir then
			return true;
		end;
	end;
	return false;
end;
local function AldyToiST(AldyToiP, AldyToir)
	AldyToir = AldyToir or "\044 ";
	local AldyToiu = "";
	for AldyToiy, AldyToii in ipairs(AldyToiP) do
		AldyToiu = AldyToiu .. tostring(AldyToii);
		if AldyToiy < #AldyToiP then
			AldyToiu = AldyToiu .. AldyToir;
		end;
	end;
	return AldyToiu;
end;
(getgenv())[AldyToikT(12613)][AldyToikT(12812)]:CreateToggle({ Name = "\083\116\097\114\116 \069\110\099\104\097\110\116 \082\111\100", [AldyToikT(12813)] = function(AldyToiP)
		if AldyToiP then
			if not AldyToilT then
				AldyToia:Notify({ [AldyToikT(12577)] = "\226\157\140 \069\114\114\111\114", [AldyToikT(12603)] = AldyToikT(12668), Duration = 2 });
				return;
			end;
			AldyToibT = true;
			AldyToifT:Set({ Title = AldyToikT(12293), Content = AldyToikT(12775) .. AldyToiST(AldyToilT) });
			local AldyToiP = (AldyToiu:WaitForChild(AldyToikT(12734))):FindFirstChild(AldyToiy.Name);
			local AldyToir = AldyToiP and AldyToiP:FindFirstChild("\072\117\109\097\110\111\105\100\082\111\111\116\080\097\114\116");
			if AldyToir then
				AldyToir[AldyToikT(12431)] = CFrame.new(AldyToiCT);
			end;
			task.spawn(function()
				while AldyToibT do
					local AldyToiP = AldyToiX5();
					if not AldyToiP then
						AldyToifT:Set({ Title = AldyToikT(12293), Content = AldyToikT(12510) });
						AldyToibT = false;
						break;
					end;
					local AldyToir, AldyToiu = pcall(function()
							(getgenv()).Remotes[AldyToikT(12615)]:FireServer(AldyToiP, "\069\110\099\104\097\110\116\083\116\111\110\101\115");
							task[AldyToikT(12601)](.2);
							(getgenv()).Remotes.RE_EquipTool:FireServer(2);
							task[AldyToikT(12601)](.2);
							(getgenv())[AldyToikT(12473)].RE_ActivateEnchantingAltar:FireServer();
						end);
					if not AldyToir then
						AldyToifT:Set({ Title = "\069\110\099\104\097\110\116 \083\116\097\116\117\115", Content = "\226\154\160\239\184\143 \069\114\114\111\114 \115\097\097\116 \101\110\099\104\097\110\116\046 \072\101\110\116\105\107\097\110\046" });
						AldyToibT = false;
						break;
					end;
					task[AldyToikT(12601)](1);
				end;
			end);
		else
			AldyToibT = false;
			AldyToifT:Set({ [AldyToikT(12577)] = "\083\116\111\112\112\101\100", Content = "\069\110\099\104\097\110\116\105\110\103 \115\116\111\112\112\101\100\046" });
		end;
	end });
local function AldyToiqT(AldyToiP)
	for AldyToir, AldyToiu in ipairs(AldyToicT:GetChildren()) do
		if AldyToiu:IsA(AldyToikT(12506)) then
			local AldyToir = require(AldyToiu);
			if AldyToir and (AldyToir.Data and AldyToir[AldyToikT(12294)][AldyToikT(12771)] == AldyToiP) then
				return AldyToir;
			end;
		end;
	end;
	return nil;
end;
(getgenv()).Remotes.RERollEnchant.OnClientEvent:Connect(function(AldyToiP, AldyToir, AldyToiu, AldyToiy)
	if not AldyToibT then
		return;
	end;
	local AldyToii = AldyToiqT(AldyToir);
	if AldyToii then
		local AldyToir = AldyToii.Data[AldyToikT(12676)];
		print(string[AldyToikT(12689)]("\091\082\079\076\076\093 \073\068\058 \037\115 \124 \069\110\099\104\097\110\116\058 \037\115", AldyToiP, AldyToir));
		if AldyToiKT(AldyToilT, AldyToir) then
			AldyToifT:Set({ Title = "\226\156\133 \069\110\099\104\097\110\116 \083\101\108\101\115\097\105", [AldyToikT(12603)] = AldyToikT(12394) .. (AldyToir .. AldyToikT(12698)) });
			AldyToibT = false;
		else
			AldyToifT:Set({ Title = "\069\110\099\104\097\110\116 \083\116\097\116\117\115", Content = AldyToikT(12605) .. (AldyToir .. "\n\077\101\110\099\111\098\097 \108\097\103\105\046\046\046") });
		end;
	end;
end);
AldyToiy:SetAttribute(AldyToikT(12769), 7);
AldyToir.Heartbeat:Connect(function()
	AldyToiy:SetAttribute(AldyToikT(12769), 7);
end);
if (getgenv()).AutoSaveEnabled then
	AldyToiVT();
end;
AldyToiMT();
AldyToiNT();
AldyToiM[AldyToikT(12637)]:Connect(function(AldyToiP)
	local AldyToir = AldyToiu.Characters:FindFirstChild(AldyToiy[AldyToikT(12676)]);
	local AldyToii = game[AldyToikT(12428)][AldyToikT(12817)].Character:WaitForChild(AldyToikT(12688));
	for AldyToiP, AldyToir in pairs(AldyToiE) do
		if tostring(AldyToir[AldyToikT(12471)]) == tostring(AldyToiw) then
			AldyToim = AldyToir.Id;
			break;
		end;
	end;
	if (getgenv())[AldyToikT(12679)] then
		AldyToiVT();
	end;
	local AldyToiH = (getgenv())[AldyToikT(12430)][AldyToikT(12726)];
	(getgenv()).toggleAnimation:Set(AldyToiH);
	local AldyToiT = (getgenv()).toggleState[AldyToikT(12810)];
	(getgenv()).autoFishToggle:Set(AldyToiT);
	AldyToiGt(AldyToiT);
end);
task[AldyToikT(12322)](function()
	while true do
		local AldyToiP = tick() - (getgenv()).lastEventTime;
		AldyToiZT();
		if AldyToiP > (getgenv())[AldyToikT(12488)] and ((getgenv())[AldyToikT(12430)].bool_autoFish and (getgenv())[AldyToikT(12430)][AldyToikT(12321)]) then
			AldyToiQt();
			(getgenv())[AldyToikT(12692)] = tick();
		end;
		task.wait(2);
	end;
end);
AldyToir[AldyToikT(12333)]:Connect(function()
	for AldyToiP, AldyToir in ipairs(AldyToiu:GetChildren()) do
		if AldyToir:IsA(AldyToikT(12660)) and AldyToir:FindFirstChildWhichIsA(AldyToikT(12502), true) then
			for AldyToiP, AldyToir in ipairs(AldyToir:GetDescendants()) do
				if AldyToir:IsA("\066\097\115\101\080\097\114\116") and AldyToir.CanCollide == true then
					AldyToir.CanCollide = true;
				end;
			end;
		end;
	end;
end);
AldyToipT();
AldyToiH5({ [AldyToikT(12317)] = true });
